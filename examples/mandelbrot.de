mod constants {
  comptime PRECISION = 1000;
}

mod Ordering {
  comptime LessThan = -1;
  comptime Equal = 0;
  comptime GreaterThan = 1;
}

struct Fixed {
  value: Int,

  fn new(value: Int) -> Fixed {
    Fixed { value: value }
  }

  fn from_int(value: Int) -> Fixed {
    Fixed { value: value * constants.PRECISION }
  }

  fn add(self: Fixed, other: Fixed) -> Fixed {
    Fixed { value: self.value + other.value }
  }

  fn sub(self: Fixed, other: Fixed) -> Fixed {
    Fixed { value: self.value - other.value }
  }

  fn mul(self: Fixed, other: Fixed) -> Fixed {
    Fixed { value: self.value * other.value / constants.PRECISION }
  }

  fn div(self: Fixed, other: Fixed) -> Fixed {
    Fixed { value: self.value * constants.PRECISION / other.value }
  }

  fn clone(self: Fixed) -> Fixed {
    Fixed { value: self.value }
  }

  fn cmp(self: Fixed, other: Fixed) -> Int {
    let retval = if self.value < other.value {
      Ordering.LessThan
    } else if self.value > other.value {
      Ordering.GreaterThan
    } else {
      Ordering.Equal
    };
    retval
  }

  fn round_down(self: Fixed) -> Int {
    self.value / constants.PRECISION
  }
}

struct Complex {
  real: Fixed,
  imag: Fixed,

  fn new(real: Fixed, imag: Fixed) -> Complex {
    Complex {
      real: real,
      imag: imag,
    }
  }

  fn add(self: Complex, other: Complex) -> Complex {
    Complex {
      real: self.real.add(other.real),
      imag: self.imag.add(other.imag),
    }
  }

  fn mul(self: Complex, other: Complex) -> Complex {
    Complex {
      real: (self.real.mul(other.real)).sub(self.imag.mul(other.imag)),
      imag: (self.real.mul(other.imag)).sub(self.imag.mul(other.real))
    }
  }

  fn clone(self: Complex) -> Complex {
    Complex {
      real: self.real.clone(),
      imag: self.imag.clone(),
    }
  }

  fn abs_squared(self: Complex) -> Fixed {
    (self.real.mul(self.real)).add(self.imag.mul(self.imag))
  }
}

fn in_mandelbrot(num_iterations: Int, c: Complex) -> Bool {
  let z = c.clone();
  let iterations = 0;
  while (z.abs_squared()).round_down() < 4 {
    z = (z.mul(z)).add(c);
    iterations += 1;
    if iterations > num_iterations {
      return true;
    }
  }
  false
}

struct Linspace {
  value: Fixed,
  end: Fixed,
  stepsize: Fixed,

  fn new(start: Fixed, end: Fixed, steps: Int) -> Linspace {
    let stepsize = (end.sub(start)).div(Fixed.from_int(steps));
    Linspace {
      value: start,
      end: end,
      stepsize: stepsize,
    }
  }

  fn next(self: Linspace) -> (Bool, Fixed) {
    let value = self.value.clone();
    self.value = self.value.add(self.stepsize);
    let has_next = self.value.cmp(self.end) == Ordering.LessThan;
    (has_next, value)
  }
}



[export("run")]
fn run() {
  let a = Complex.new(Fixed.new(500), Fixed.new(0));
  let contained = in_mandelbrot(10, a);
  print(`$a: $contained`);

  let linspace = Linspace.new(Fixed.from_int(-2), Fixed.from_int(2), 64);
  loop {
    let (has_next, value) = linspace.next();
    print(dyn_int(value));
    if not has_next {
      break;
    }
  }
  
}

print("Debris loaded!");