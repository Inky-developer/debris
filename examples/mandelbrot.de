import scan;

mod constants {
    # The precision for fixed point calculations
    # This value means that the next bigger number after 0 is 1/PRECISION
    comptime PRECISION = 1000;
}

mod Ordering {
    comptime LessThan = -1;
    comptime Equal = 0;
    comptime GreaterThan = 1;
}

# Type that implements fixed point operations with a constant precision
struct Fixed {
    value: Int,

    fn new(value: Int) -> Fixed {
        Fixed { value: value }
    }

    fn from_int(value: Int) -> Fixed {
        Fixed { value: value * constants.PRECISION }
    }

    fn add(self: Fixed, other: Fixed) -> Fixed {
        Fixed { value: self.value + other.value }
    }

    fn sub(self: Fixed, other: Fixed) -> Fixed {
        Fixed { value: self.value - other.value }
    }

    fn mul(self: Fixed, other: Fixed) -> Fixed {
        Fixed { value: self.value * other.value / constants.PRECISION }
    }

    fn div(self: Fixed, other: Fixed) -> Fixed {
        Fixed { value: self.value * constants.PRECISION / other.value }
    }

    fn clone(self: Fixed) -> Fixed {
        Fixed { value: self.value }
    }

    fn cmp(self: Fixed, other: Fixed) -> Int {
        let retval = if self.value < other.value {
            Ordering.LessThan
        } else if self.value > other.value {
            Ordering.GreaterThan
        } else {
            Ordering.Equal
        };
        retval
    }

    fn round_down(self: Fixed) -> Int {
        self.value / constants.PRECISION
    }
}

# Simple type to represent a Complex number, out of two fixed point types
struct Complex {
    real: Fixed,
    imag: Fixed,

    fn new(real: Fixed, imag: Fixed) -> Complex {
        Complex {
            real: real,
            imag: imag,
        }
    }

    fn add(self: Complex, other: Complex) -> Complex {
        Complex {
            real: self.real.add(other.real),
            imag: self.imag.add(other.imag),
        }
    }

    fn sub(self: Complex, other: Complex) -> Complex {
        Complex {
            real: self.real.sub(other.real),
            imag: self.imag.sub(other.imag),
        }
    }

    fn mul(self: Complex, other: Complex) -> Complex {
        Complex {
            real: self.real.mul(other.real).sub(self.imag.mul(other.imag)),
            imag: self.real.mul(other.imag).add(self.imag.mul(other.real))
        }
    }

    fn clone(self: Complex) -> Complex {
        Complex {
            real: self.real.clone(),
            imag: self.imag.clone(),
        }
    }

    fn abs_squared(self: Complex) -> Fixed {
        self.real.mul(self.real).add(self.imag.mul(self.imag))
    }

    fn in_mandelbrot(self: Complex, num_iterations: Int) -> Bool {
        let z = self.clone();
        let iterations = 0;
        while z.abs_squared().round_down() < 4 {
            let new_z = z.mul(z);
            z = z.mul(z).add(self);
            iterations += 1;
            if iterations > num_iterations {
                return true;
            }
        }
        false
    }
}

fn set_block(color: Bool) {
    if color {
        execute(`setblock ~ ~ ~ black_concrete`);
    } else {
        execute(`setblock ~ ~ ~ white_concrete`);
    }
}


# The main function, which renders the mandelbrot set out of black and white blocks at the current location
[export("generate")]
fn run() {
    # The start and end coordinates
    let view_size = Fixed.new(1200);
    let center_pos = Complex.new(Fixed.new(-600), Fixed.new(0));

    let start = Complex { real: center_pos.real.sub(view_size), imag: center_pos.imag.sub(view_size) };

    # The size of the rendered grid, currently 32 by 32 blocks
    comptime steps = 64;
    let stepsize = view_size.mul(Fixed.from_int(2)).div(Fixed.from_int(steps));

    let pos = start.clone();
    let i = 0;

    scan.scan(steps, 1, steps) {
        let contained = pos.in_mandelbrot(10);
        set_block(contained);
        pos.real = pos.real.add(stepsize);
        i += 1;
        if i >= steps {
            pos.real = start.real;
            pos.imag = pos.imag.add(stepsize);
            i = 0;
        }
    };
}

print("Mandelbrot loaded!");