initSidebarItems({"fn":[["create_neg_int_literal_maybe","This function implements a hack that combines a minus token with an int token. This is not done in general, because this behavior should not be exhibited in all places. E.g. `a-2` should not parse a negative number literal."],["lookahead_update","Looks forward and checks if the current item can be an update. This is a hack to resolve the statement-ambiguity where both of expr and update are valid. For example, `(a, b, c)` could be parsed as a tuple or as a pattern for an update."],["parse",""],["parse_assignment",""],["parse_attribute_list_maybe",""],["parse_block",""],["parse_branch",""],["parse_comma_separated","Parses a comma separated list of items Returns a tuple of (`number_of_items`, `number_of_commas`)"],["parse_comma_separated_inner",""],["parse_control_flow",""],["parse_expr",""],["parse_expr_inner",""],["parse_expr_maybe",""],["parse_format_string",""],["parse_function",""],["parse_function_pattern",""],["parse_import",""],["parse_loop",""],["parse_module",""],["parse_param_declaration",""],["parse_param_list",""],["parse_param_list_declaration",""],["parse_parenthesis_or_tuple",""],["parse_path",""],["parse_pattern",""],["parse_postfix_maybe",""],["parse_prefix","Parses a single prefix"],["parse_prefix_maybe","Parses leading prefix operators and control flow operators and returns whether a prefix was parsed"],["parse_ret_maybe",""],["parse_root",""],["parse_statement","Parses a statement"],["parse_struct_def",""],["parse_struct_literal",""],["parse_struct_literal_item",""],["parse_struct_vars",""],["parse_update",""],["parse_value_maybe",""],["parse_while",""],["parse_with",""]],"struct":[["ExpressionConfig",""],["Parser",""],["RecoveryOptions","Options passed to the parsers recover function"]],"type":[["ParseResult",""]]});