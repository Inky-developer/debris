initSidebarItems({"enum":[["Accessor","An accessor represents a dotted path"],["BuildMode","The build mode for this compilation"],["Ident","identifier for a value"],["OptMode","How to optimize the code"],["SpecialIdent","Every special identifier"]],"fn":[["character_width_at_index","Utility function to get the width of a character at a given byte index"]],"mod":[["accessor",""],["compile_context",""],["config",""],["file_provider","This module has the [`FileProvider`] trait, which is used by the compile config to resolve import statements."],["graph","Very basic graph implementation which is specialized for `llir` block analysis"],["ident",""],["input_file","Input files are used to store the files required for successful compilation The big advantage of have a global storage of all possible input files is that this allows for extremely cheap spans which only consist of a (start, length) tuple. To get the corresponding file for a span, simply check whether the span lies withing file.offset and file.offset + file.length"],["span",""]],"struct":[["Code","A code object contains the source code and optionally a path to the corresponding file"],["CodeRef","A handy object to work in a specific input file"],["CompilationId","The id of the current compilation unit. Used to generate ids that are unique across all compilation units"],["CompileContext","The Compilation context stores various information about the current compilation"],["Config","Holds data about the user specified configuration"],["InputFile","A single input file, implementation detail"],["InputFiles","Keeps track of all input files and allows to make cheap copy-able spans"],["Span","A span which uniquely specifies a span of characters in their corresponding file All spans are dependent on the `InputFiles` which contains the file that spans can refer to."]],"type":[["CodeId","The type of a code id, currently just a usize"],["FxIndexMap",""]]});