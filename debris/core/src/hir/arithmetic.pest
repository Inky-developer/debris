program = { SOI ~ statement* ~ EOI }
statement = { 
    assignment ~ ";"
  | function_call ~ ";"
}

assignment = { "let" ~ ident ~ "=" ~ expression }

expression = { 
	exp_primary ~ ( exp_infix ~ exp_primary )*
}
	exp_prefix = { prefix_minus | prefix_not }
    prefix_value = { exp_prefix ~ exp_primary }
    exp_infix = _{ infix_times | infix_divide | infix_modulo | infix_plus | infix_minus | infix_comparison }
    exp_primary = _{ exp_parens | value | prefix_value}
    exp_parens = _{ "(" ~ expression ~ ")" }

value = { function_call | execute | fixed | integer | accessor | string }

function_call = { ident ~ parameter_list }
	parameter_list = { 
    	"(" ~ ")"
    	| "(" ~ expression ~ ( "," ~ expression )* ~ ","? ~ ")"
    }

execute = { "execute" ~ expression }

accessor = { (ident ~ ".")* ~ ident }

fixed = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT{1,3} }
integer = @{ '0'..'9'+ }
ident = @{ !ASCII_DIGIT ~ ( ASCII_ALPHANUMERIC | "_" )+ }
string = { "\"" ~ string_inner ~ "\"" }
  string_inner = @{ char* }
char = @{ !( "\"" | "\\" ) ~ ANY }

prefix_minus = @{ "-" }
prefix_not = @{ "not " }
infix_times = @{ "*" }
infix_divide = @{ "/" }
infix_modulo = @{ "%" }
infix_plus = @{ "+" }
infix_minus = @{ "-" }
infix_and = @{ "and " }
infix_or = @{ "or " }
infix_comparison = _{ compare_eq | compare_ne | compare_gt | compare_ge | compare_lt | compare_le }
  compare_eq = { "==" }
  compare_ne = { "!=" }
  compare_gt = { ">" }
  compare_ge = { ">=" }
  compare_lt = { "<" }
  compare_le = { "<=" }

WHITESPACE = _{ " " | "\r" | "\n" }
COMMENT = @{ "#" ~ ( !"\n" ~ ANY )* }
