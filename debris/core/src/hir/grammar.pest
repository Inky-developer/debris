program = { SOI ~ item* ~ EOI }

item = {
	statement
  | object_def
}

statement = { 
  control_flow ~ ";"
  | assignment ~ ";"
  | function_call ~ ";"
  | value_update ~ ";"
  | import ~ ";"
  | block ~ ";"
  | if_branch ~ ";"
}

block = { "{" ~ item* ~ ("out " ~ expression)? ~ "}" }

object_def = { attribute_list? ~ (object) }
  attribute_list = { "[" ~ accessor ~ ("," ~ accessor)* ~ ","? ~ "]" }
  object = { function_def | module }

function_def = { "fn " ~ ident ~ function_signature ~ block }
	function_signature = { param_list ~ ("->" ~ type_pattern)? }
	param_list = { "(" ~ (type_def ~ ",")* ~ type_def? ~ ")" }
	type_def = { ident ~ ":" ~ type_pattern }

type_pattern = { fn_pattern | accessor }
	fn_pattern = { "fn" ~ type_pattern_list ~ ("->" ~ type_pattern)? }
	type_pattern_list = { "(" ~ (type_pattern ~ ",")* ~ type_pattern? ~ ")" }

module = { "mod " ~ ident ~ block }

assignment = { "let " ~ ident ~ "=" ~ expression }
value_update = { ident ~ "=" ~ expression }

import = { "import " ~ accessor }
control_flow = { control_flow_kw ~ expression? }

expression = { 
	exp_primary ~ ( exp_infix ~ exp_primary )*
}
	exp_prefix = { prefix_minus | prefix_not }
    prefix_value = { exp_prefix ~ exp_primary }
    exp_infix = _{ infix_times | infix_divide | infix_modulo | infix_plus | infix_minus | infix_comparison | infix_and | infix_or}
    exp_primary = _{ exp_parens | value | prefix_value}
    exp_parens = _{ "(" ~ expression ~ ")" }

value = { if_branch | block | function_call | integer | bool | accessor | string }

function_call = { accessor ~ parameter_list }
	parameter_list = { 
    	"(" ~ ")"
    	| "(" ~ expression ~ ( "," ~ expression )* ~ ","? ~ ")"
    }

if_branch = { "if " ~ expression ~ block ~ ("else " ~ (block | if_branch))? }

accessor = { (ident ~ ".")* ~ ident }

fixed = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT{1,3} }
integer = @{ "-"? ~ '0'..'9'+ }
bool = @{("true" | "false") ~ !ident }
ident = @{ !ASCII_DIGIT ~ ( ASCII_ALPHANUMERIC | "_" )+ }
string = { "\"" ~ string_inner ~ "\"" }
  string_inner = @{ char* }
char = @{ !( "\"" | "\\" ) ~ ANY }

control_flow_kw = @{ "return" ~ !ident }

prefix_minus = @{ "-" }
prefix_not = @{ "not " }
infix_times = @{ "*" }
infix_divide = @{ "/" }
infix_modulo = @{ "%" }
infix_plus = @{ "+" }
infix_minus = @{ "-" }
infix_and = @{ "and " }
infix_or = @{ "or " }
infix_comparison = _{ compare_eq | compare_ne | compare_ge | compare_gt | compare_le | compare_lt }
  compare_eq = { "==" }
  compare_ne = { "!=" }
  compare_ge = { ">=" }
  compare_gt = { ">" }
  compare_le = { "<=" }
  compare_lt = { "<" }

WHITESPACE = _{ " " | "\r" | "\n" }
COMMENT = _{ "#" ~ ( !"\n" ~ ANY )* }
