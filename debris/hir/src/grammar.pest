program = { SOI ~ item* ~ EOI }

item = {
	statement
  | object_def
}

statement = { 
  control_flow ~ ";"
  | assignment ~ ";"
  | function_call ~ ";"
  | value_update ~ ";"
  | import ~ ";"
  | block
  | if_branch
  | inf_loop
}

block = { "{" ~ item* ~ (expression)? ~ "}" }
loop_block = { "{" ~ item* ~ "}" }

object_def = { attribute_list? ~ (object) }
  attribute_list = { "[" ~ accessor ~ ("," ~ accessor)* ~ ","? ~ "]" }
  object = { function_def | module | struct_def }

function_def = { "fn " ~ ident ~ function_signature ~ block }
	function_signature = { param_list ~ ("->" ~ type_pattern)? }
	param_list = { "(" ~ (type_def ~ ",")* ~ type_def? ~ ")" }
	type_def = { ident ~ ":" ~ type_pattern }

type_pattern = { fn_pattern | tuple_pattern | accessor }
	fn_pattern = { "fn" ~ type_pattern_list ~ ("->" ~ type_pattern)? }
    tuple_pattern = { "(" ~ (type_pattern ~ ",")* ~ type_pattern? ~ ")" }
	type_pattern_list = { "(" ~ (type_pattern ~ ",")* ~ type_pattern? ~ ")" }

module = { "mod " ~ ident ~ block }

struct_def = { "struct " ~ ident ~ "{" ~ struct_variables ~ struct_items ~ "}" }
	struct_variables = { (variable_declaration ~ ",")* ~ variable_declaration? }
    struct_items = { object_def* }
variable_declaration = { ident ~ ":" ~ type_pattern }

struct_initialization = { accessor ~ "{" ~ struct_initializer_pairs ~ "}" }
	struct_initializer_pairs = { (struct_initializer_pair ~ ",")* ~ struct_initializer_pair? }
    struct_initializer_pair = { ident ~ ":" ~ expression }

tuple_initialization = { "(" ~ ( expression ~ "," )* ~ expression? ~ ")" }

assignment = { (assignment_let | assignment_comptime) ~ assignment_pattern ~ "=" ~ expression }
  assignment_let = { "let " }
  assignment_comptime = { "comptime " }
  assignment_pattern = _{ accessor | assignment_tuple }
  assignment_tuple = { "(" ~ (assignment_pattern ~ ",")* ~ assignment_pattern? ~ ")" }
value_update = { assignment_pattern ~ "=" ~ expression }

import = { "import " ~ accessor }
control_flow = { control_flow_kw ~ expression? }

expression = { struct_initialization | expression_base }
expression_without_struct = { expression_base }
expression_base = _{ 
	exp_primary ~ ( exp_infix ~ exp_primary )*
}
	exp_prefix = { prefix_minus | prefix_not }
    prefix_value = { exp_prefix ~ exp_primary }
    exp_infix = _{ infix_times | infix_divide | infix_modulo | infix_plus | infix_minus | infix_comparison | infix_and | infix_or}
    exp_primary = _{ value | prefix_value}
    exp_parens = _{ "(" ~ expression ~ ")" }

value = { if_branch | inf_loop | block | function_call | integer | bool | accessor | string | format_string | exp_parens | tuple_initialization }

function_call = { ((exp_parens ~ "." ~ ident) | accessor) ~ parameter_list }
	parameter_list = { 
    	"(" ~ ")"
    	| "(" ~ expression ~ ( "," ~ expression )* ~ ","? ~ ")"
    }

if_branch = { comptime_prefix? ~ "if " ~ expression_without_struct ~ block ~ ("else " ~ (block | if_branch))? }
inf_loop = { "loop" ~ loop_block }

accessor = { (ident ~ ".")* ~ ident }

keyword = {("fn" | "mod" | "struct" | "let" | "comptime" | "import" | "if" | "else" | "loop" | "true" | "false" | "return" | "break" | "continue" | "not" | "and" | "or") ~ !( ASCII_ALPHANUMERIC | "_" )}
fixed = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT{1,3} }
integer = @{ "-"? ~ '0'..'9'+ } 
bool = @{("true" | "false") ~ !ident }
ident = @{ !ASCII_DIGIT ~ !keyword ~ ( ASCII_ALPHANUMERIC | "_" )+ }
string = { "\"" ~ string_inner ~ "\"" }
  string_inner = @{ char* }
  char = @{ !( "\"" | "\\" ) ~ ANY }
format_string = ${ "`" ~ (format_string_text | format_string_var)* ~ "`" }
  format_string_text = { ("\\$" | (!("$" | "`") ~ ANY))+ }
  format_string_var = { "$" ~ ident+ }

control_flow_kw = ${ (control_flow_return | control_flow_break | control_flow_continue) ~ !( ASCII_ALPHANUMERIC | "_" ) }
  control_flow_return = { "return" }
  control_flow_break = { "break" }
  control_flow_continue = { "continue" }

comptime_prefix = { "comptime " }

prefix_minus = @{ "-" }
prefix_not = @{ "not " }
infix_times = @{ "*" }
infix_divide = @{ "/" }
infix_modulo = @{ "%" }
infix_plus = @{ "+" }
infix_minus = @{ "-" }
infix_and = @{ "and " }
infix_or = @{ "or " }
infix_comparison = _{ compare_eq | compare_ne | compare_ge | compare_gt | compare_le | compare_lt }
  compare_eq = { "==" }
  compare_ne = { "!=" }
  compare_ge = { ">=" }
  compare_gt = { ">" }
  compare_le = { "<=" }
  compare_lt = { "<" }

WHITESPACE = _{ " " | "\r" | "\n" }
COMMENT = _{ "#" ~ ( !"\n" ~ ANY )* }
