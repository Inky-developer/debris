var searchIndex = JSON.parse('{\
"debris_backends":{"doc":"Backend implementations for the debris compiler","t":[0,4,13,12,12,12,13,12,12,3,12,12,12,4,13,12,12,13,12,12,13,12,12,13,12,12,12,13,12,12,13,12,12,13,12,13,12,12,12,13,12,13,12,13,12,12,4,13,12,12,13,13,13,13,4,13,3,12,12,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["common","ExecuteComponent","IfScoreRelation","player1","player2","comparison","IfScoreRange","player","range","FunctionIdent","namespace","path","is_collection","MinecraftCommand","ScoreboardSet","player","value","ScoreboardSetEqual","player1","player2","ScoreboardSetFromResult","player","command","ScoreboardOperation","player1","player2","operation","ScoreboardOperationAdd","player","value","Execute","parts","and_then","Function","function","ScoreboardAdd","name","criterion","json_name","ScoreboardRemove","name","RawCommand","command","JsonMessage","target","message","MinecraftRange","Range","from","to","Minimum","Maximum","Equal","NotEqual","ObjectiveCriterion","Dummy","ScoreboardPlayer","player","scoreboard","DatapackBackend","Backend","generate","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","generate","clone","clone","clone","clone","clone","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from_operator"],"q":["debris_backends","debris_backends::common","","debris_backends::common::ExecuteComponent","","","debris_backends::common","debris_backends::common::ExecuteComponent","","debris_backends::common","","","","","","debris_backends::common::MinecraftCommand","","debris_backends::common","debris_backends::common::MinecraftCommand","","debris_backends::common","debris_backends::common::MinecraftCommand","","debris_backends::common","debris_backends::common::MinecraftCommand","","","debris_backends::common","debris_backends::common::MinecraftCommand","","debris_backends::common","debris_backends::common::MinecraftCommand","","debris_backends::common","debris_backends::common::MinecraftCommand","debris_backends::common","debris_backends::common::MinecraftCommand","","","debris_backends::common","debris_backends::common::MinecraftCommand","debris_backends::common","debris_backends::common::MinecraftCommand","debris_backends::common","debris_backends::common::MinecraftCommand","","debris_backends::common","","debris_backends::common::MinecraftRange","","debris_backends::common","","","","","","","","","debris_backends","","","debris_backends::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends","","","","","","","","debris_backends::common","","","","","debris_backends","debris_backends::common","","","","","","debris_backends","debris_backends::common","","","","",""],"d":["Defines common items that are specific to the latest …","A component in an execute command","Tests for a relation between to scores","","","","Tests for a relation between a score and a static value","","","A unique minecraft function identifier","The namespace of this function, for example <code>debris</code>","The path of this function, for example <code>foo/bar/baz</code>","Whether this function is a collection, marked by a <code>#</code>","Enumerates all minecraft commands that are used by any …","Sets the scoreboard value to a specific integer","","","Sets the scoreboard value to another scorboard value","","","Sets the scoreboard value equal to the result of the …","","","","","","","Quick operation which adds or removes a static value","","","Any used execute command","","","Calls another function","","","","","","","","","","","","","Any valid minecraft range","A full range, eg. 1..99","","","A range with a lower bound, eg. 0..","A range with an upper bound, eg. ..50","A range that only contains one value","A range that contains every value except one","Any objective criterion","Mostly used by debris","A combination of scoreboard and player","","","The Datapack Backend implementation","A Backend for debris, which has to convert <code>LLIR</code> into a …","Converts the llir into a directory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,2,2,1,3,3,0,4,4,4,0,5,6,6,5,7,7,5,8,8,5,9,9,9,5,10,10,5,11,11,5,12,5,13,13,13,5,14,5,15,5,16,16,0,17,18,18,17,17,17,17,0,19,0,20,20,0,0,21,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,17,17,17,17,17,17,17,17,17,17,20,20,20,20,20,20,20,20,20,19,19,19,19,19,19,19,19,19,19,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,5,1,17,20,19,22,5,1,17,20,19,4,22,19,4,5,1,17,17],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3],["llir",3]],["directory",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["compilecontext",3],["llir",3]],["directory",3]],[[],["minecraftcommand",4]],[[],["executecomponent",4]],[[],["minecraftrange",4]],[[],["scoreboardplayer",3]],[[],["objectivecriterion",4]],[[],["datapackbackend",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["scoreboardcomparison",4],["i32",15]]]],"p":[[4,"ExecuteComponent"],[13,"IfScoreRelation"],[13,"IfScoreRange"],[3,"FunctionIdent"],[4,"MinecraftCommand"],[13,"ScoreboardSet"],[13,"ScoreboardSetEqual"],[13,"ScoreboardSetFromResult"],[13,"ScoreboardOperation"],[13,"ScoreboardOperationAdd"],[13,"Execute"],[13,"Function"],[13,"ScoreboardAdd"],[13,"ScoreboardRemove"],[13,"RawCommand"],[13,"JsonMessage"],[4,"MinecraftRange"],[13,"Range"],[4,"ObjectiveCriterion"],[3,"ScoreboardPlayer"],[8,"Backend"],[3,"DatapackBackend"]]},\
"debris_common":{"doc":"Common items used by the compiler","t":[4,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,3,12,12,6,3,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Ident","Value","Special","SpecialIdent","Add","Sub","Mul","Div","Modu","UnaryMinus","And","Or","Not","CmpEq","CmpNe","CmpGt","CmpGe","CmpLt","CmpLe","Clone","PromoteRuntime","Accessor","Path","Code","source","path","CodeId","CodeRef","file","InputFiles","Span","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","from","from","clone","clone","clone","clone","clone","default","eq","ne","eq","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","new","equals_ident","get_code","get_offset","get_span","get_relative_span","new","add_input","get_code_ref","get_input","get_input_offset","get_total_offset","get_span_code","get_span_str","get_span_line","new","empty","start","end","len","is_empty","until"],"q":["debris_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["identifier for a value","Since Idents have be cloned quite often a generic value is…","","Every special identifier","","","","","","","","","","","","","","","","","","An accessor represents a dotted path","A path like a.b.c","A code object contains the source code and optionally a …","","","The type of a code id, currently just a usize","A handy object to work in a specific input file","","Keeps track of all input files and allows to make cheap …","A span which uniquely specifies a span of characters in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new identifier","","","","","Returns a span that is relative to the start of this code …","","Adds a code unit and returns its ID","","Gets the input file with this id","Gets the offset of the file with this id","Calculates the total byte offset","","Returns the str that corresponds to a span","Returns the line in a file at which this span begins","Creates a new <code>Span</code> from the starting character and its …","Creates an empty Span","Returns the start of this span","Returns the end of this span","Returns the length of this span","Returns, whether this span is empty","Constructs a new span which ranges from the start of this …"],"i":[0,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,3,0,4,4,0,0,5,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,1,1,3,1,2,3,5,7,6,1,1,2,3,3,4,4,7,7,1,2,3,4,5,6,7,2,1,1,2,3,4,7,1,3,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["specialident",4]]],[[]],[[["ident",4]]],[[],["ident",4]],[[],["specialident",4]],[[],["accessor",4]],[[],["coderef",3]],[[],["span",3]],[[],["inputfiles",3]],[[["ident",4]],["bool",15]],[[["ident",4]],["bool",15]],[[["specialident",4]],["bool",15]],[[["accessor",4]],["bool",15]],[[["accessor",4]],["bool",15]],[[["code",3]],["bool",15]],[[["code",3]],["bool",15]],[[["span",3]],["bool",15]],[[["span",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["asref",8],["str",15]]],[[],["bool",15]],[[],["code",3]],[[],["usize",15]],[[],["span",3]],[[["span",3]],["span",3]],[[]],[[["code",3]],["codeid",6]],[[["codeid",6]],["coderef",3]],[[["codeid",6]],["code",3]],[[["codeid",6]],["usize",15]],[[],["usize",15]],[[["span",3]],["coderef",3]],[[["span",3]],["str",15]],[[["span",3]],["usize",15]],[[["usize",15]]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[["span",3]]]],"p":[[4,"Ident"],[4,"SpecialIdent"],[4,"Accessor"],[3,"Code"],[3,"CodeRef"],[3,"InputFiles"],[3,"Span"]]},\
"debris_core":{"doc":"Core implementation of the debris compiler","t":[0,0,4,13,12,12,13,12,12,13,12,12,13,12,12,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,3,12,12,4,13,13,3,12,12,3,12,12,12,4,13,13,13,3,12,12,12,3,12,12,3,12,12,12,3,12,12,12,3,12,12,12,3,12,12,12,3,12,12,12,12,3,12,12,12,12,4,13,13,13,13,12,12,13,12,12,12,13,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,12,12,12,3,12,12,12,12,3,12,3,12,12,12,12,12,12,12,3,12,12,12,3,12,12,12,12,4,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,3,12,12,12,12,8,16,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3,12,3,12,3,12,12,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,12,12,12,3,11,11,11,11,11,0,0,3,12,12,3,12,12,12,3,12,12,12,3,12,12,12,12,12,3,12,4,13,12,12,12,13,13,3,12,12,12,4,13,13,3,12,3,12,12,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,4,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,4,13,13,13,4,13,13,11,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,11,11,11,11,3,12,12,0,3,12,4,13,13,3,12,3,12,12,3,12,12,0,3,12,12,12,12,3,12,12,12,12,12,3,12,12,12,3,12,4,13,13,13,13,13,13,3,12,12,3,12,12,4,13,13,12,12,8,16,11,10,10,10,10,10,10,3,3,12,12,12,12,12,12,12,3,12,12,3,3,12,12,4,13,13,13,13,13,13,4,13,13,13,13,3,12,12,3,12,12,3,12,12,3,12,12,11,11,11,0,0,5,5,3,12,11,11,0,3,12,0,6,8,10,3,11,11,11,11,11,6,3,11,11,11,11,11,11,11,11,0,3,12,11,11,11,11,11,4,13,13,4,13,13,4,13,3,12,12,12,6,3,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,0,3,12,11,11,0,3,12,11,11,0,3,11,11,11,11,11,11,11,3,11,11,11,0,5,3,12,12,12,3,11,3,12,12,12,12,11,0,3,11,0,3,11,0,3,11,11,0,3,12,12,12,12,3,12,12,12,12,12,3,12,12,12,3,12,12,3,12,12,4,13,12,12,13,12,12,12,13,12,13,12,12,13,12,12,12,13,12,12,12,13,12,13,12,12,12,13,12,13,12,12,13,12,13,12,13,13,12,17,6,6,8,10,11,4,13,13,11,0,3,8,10,8,10,10,8,10,10,11,0,5,5,4,13,13,13,3,11,11,11,3,12,12,3,12,3,12,12,12,8,10,11,11,11,6,3,8,10,10,10,10,4,13,13,3,12,12,12,12,12,4,13,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["hir","hir_nodes","HirConstValue","Integer","span","value","Bool","span","value","Fixed","span","value","String","span","value","HirComparisonOperator","Eq","Ne","Gt","Ge","Lt","Le","HirInfixOperator","Comparison","And","Or","Plus","Minus","Times","Divide","Modulo","HirInfix","span","operator","HirPrefixOperator","Minus","Not","HirPrefix","span","operator","HirImport","span","ident_span","id","HirControlKind","Return","Break","Continue","HirControlFlow","span","kind","expression","HirInfiniteLoop","span","block","HirParameterDeclaration","span","ident","typ","HirVariableInitialization","span","ident","value","HirVariableUpdate","span","ident","value","HirPropertyDeclaration","span","identifier","datatype","HirFunctionCall","span","accessor","parameters_span","parameters","HirConditionalBranch","span","condition","block_positive","block_negative","HirExpression","Variable","Path","Value","UnaryOperation","operation","value","BinaryOperation","operation","lhs","rhs","Block","FunctionCall","ConditionalBranch","InfiniteLoop","HirStatement","VariableDecl","VariableUpdate","FunctionCall","Import","ControlFlow","Block","ConditonalBranch","InfiniteLoop","HirTypePattern","Path","Function","parameters","return_type","span","HirBlock","span","statements","return_value","objects","Attribute","accessor","HirFunction","span","attributes","ident","block","parameters","parameter_span","return_type","HirStruct","span","attributes","properties","HirModule","span","attributes","ident","block","HirObject","Function","Struct","Module","HirItem","Object","Statement","span","get_raw_special_ident","get_special_ident","get_ident","last_item_span","span","span","span","span","return_type_span","HirContext","input_file","compile_context","file_offset","dependencies","HirVisitor","Output","visit_item","visit_object","visit_struct","visit_module","visit_block","visit_import","visit_control_flow","visit_infinite_loop","visit_function","visit_conditional_branch","visit_statement","visit_expression","visit_function_call","visit_variable_declaration","visit_variable_update","visit_property_declaration","visit_const_value","IdentifierPath","idents","SpannedIdentifier","span","HirFile","main_function","code_id","DebrisParser","Rule","EOI","program","item","statement","block","loop_block","object_def","attribute_list","object","function_def","function_signature","param_list","type_def","type_pattern","fn_pattern","type_pattern_list","module","assignment","value_update","import","control_flow","expression","exp_prefix","prefix_value","exp_infix","exp_primary","exp_parens","value","function_call","parameter_list","if_branch","inf_loop","accessor","fixed","integer","bool","ident","string","string_inner","char","control_flow_kw","control_flow_return","control_flow_break","control_flow_continue","prefix_minus","prefix_not","infix_times","infix_divide","infix_modulo","infix_plus","infix_minus","infix_and","infix_or","infix_comparison","compare_eq","compare_ne","compare_ge","compare_gt","compare_le","compare_lt","WHITESPACE","COMMENT","Hir","main_function","code_id","imported_modules","ImportDependencies","insert","len","is_empty","get","iter","llir","llir_nodes","Function","id","returned_value","FastStore","scoreboard","id","value","FastStoreFromResult","scoreboard","id","command","BinaryOperation","scoreboard","id","lhs","rhs","operation","Call","id","Condition","Compare","lhs","rhs","comparison","And","Or","Branch","condition","pos_branch","neg_branch","ExecuteRawComponent","String","ScoreboardValue","ExecuteRaw","0","WriteMessage","target","message","WriteTarget","Chat","Actionbar","Title","Subtitle","Node","FastStore","FastStoreFromResult","BinaryOperation","Call","Condition","Branch","Execute","Write","Nop","VariableAccess","Read","Write","ReadWrite","VariableAccessMut","Read","Write","ReadWrite","nodes","calls_itself","is_empty","not","is_simple","variable_accesses","variable_accesses_mut","iter","is_effect_free","variable_accesses","variable_accesses_mut","writes_to","reads_from","utils","BlockId","Scoreboard","Main","Custom","Internal","ScoreboardValue","Static","Scoreboard","id","ScoreboardOperation","Plus","Minus","Times","Divide","Modulo","Min","Max","ScoreboardComparison","Equal","NotEqual","Greater","GreaterOrEqual","Less","LessOrEqual","evaluate","flip_sides","invert","evaluate","ItemId","id","context","json_format","FormattedText","components","JsonFormatComponent","RawText","Score","LlirContext","span","Llir","functions","runtime","Runtime","scheduled_blocks","load_blocks","mir","MirBranchIf","span","pos_branch","neg_branch","condition","MirCall","span","function","value","parameters","return_value","MirGotoContext","span","context_id","block_id","MirJumpLocation","index","MirNode","Call","GotoContext","JumpLocation","UpdateValue","ReturnValue","BranchIf","MirReturnValue","return_index","context_id","MirUpdateValue","id","new_value","MirValue","Concrete","Template","id","class","MirVisitor","Output","visit_node","visit_call","visit_jump_location","visit_goto_context","visit_update_value","visit_return_value","visit_branch_if","ContextId","MirContext","compile_context","span","kind","id","nodes","control_flow","return_values","MirContextInfo","context","arena","NamespaceArena","ReturnValues","template","default_return","ContextKind","Block","Function","NativeFunction","ComptimeConditionalBlock","RuntimeConditionalBlock","Loop","ControlFlowMode","Normal","Return","Break","Continue","CachedFunctionSignature","parameters","return_type","MirBuilder","main_context","ticking_contexts","Mir","contexts","namespaces","MirContextMap","main_context","ticking_contexts","get_main_context","get","get_mut","objects","obj_bool","or_static","and_static","ObjBool","id","new","as_scoreboard_value","obj_bool_static","ObjStaticBool","value","obj_class","ClassRef","HasClass","class","ObjClass","new","as_generic_ref","get_property","set_property","new_empty","GenericClassRef","GenericClass","new","into_class_ref","class","get_property","typ","matches","set_generics","get_generics","obj_function","ObjFunction","flags","new","with_flags","new_single","overload","expected_signatures","FunctionParameters","Any","Specific","FunctionFlags","None","CompilerImplemented","CompilerFunction","RegisterTickingFunction","FunctionContext","item_id","span","llir_builder","FunctionSignatureRef","FunctionSignature","new","matches","parameters","return_type","FunctionOverload","new","signature","function","compile_context","emit","null","block_for","get_object","get_object_by_ident","call","obj_int","ObjInt","id","new","as_scoreboard_value","obj_int_static","ObjStaticInt","value","new","as_scoreboard_value","obj_module","ObjModule","new","with_members","ident","members","set_property","register","register_typed_function","ModuleFactory","new","call","import_members","obj_native_function","match_parameters","FunctionParameterDefinition","name","expected_type","span","ObjNativeFunction","new","ObjNativeFunctionSignature","native_function_id","function_span","return_type_span","definition_scope","new","obj_never","ObjNever","instance","obj_null","ObjNull","instance","obj_string","ObjString","new","as_str","error","SliceOwned","source","origin","annotations","fold","SnippetOwned","title","id","annotation_type","slices","footer","SourceAnnotationOwned","annotation_type","range","label","ParseError","span","expected","LangError","kind","span","LangErrorKind","VariableAlreadyDefined","name","previous_definition","UnexpectedType","expected","got","declared","UnexpectedPattern","got","UnexpectedOverload","parameters","expected","MissingVariable","var_name","similar","notes","MissingProperty","property","parent","similar","ConstVariable","var_name","UnexpectedOperator","operator","lhs","rhs","UnpromotableType","got","MissingModule","path","error","CircularImport","module","InvalidControlFlow","mode","UnreachableCode","NotYetImplemented","msg","COLORED","Result","LangResult","AsAnnotationSnippet","as_annotation_snippet","to_string","CompileError","ParseError","LangError","format","function_interface","DebrisFunctionInterface","NormalizedFunctionInterface","call","ValidReturnType","into_result","get_class","ToFunctionInterface","to_function_interface","query_parameters","query_return","memory","copy","mem_copy","MemoryLayout","Unsized","One","Multiple","MemoryCounter","new","next_item","next_id","CompileContext","config","input_files","Namespace","id_counter","DebrisObject","class","layout","payload","ObjectPayload","memory_layout","generic_class","get_property","as_function","ObjectProperties","ObjectRef","ValidPayload","as_any","eq","into_object","get_class","BuildMode","Debug","Release","Config","project_name","project_description","default_scoreboard_name","build_mode","opt_mode","OptMode","None","Full","Type","Null","Never","StaticInt","DynamicInt","StaticBool","DynamicBool","String","Function","Class","Module","TypePattern","Any","Int","Bool","Class","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","into_result","get_class","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","into_result","get_class","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","from","into","try_from","borrow","borrow_mut","try_into","type_id","equivalent","visit_item","visit_object","visit_struct","visit_module","visit_block","visit_import","visit_control_flow","visit_function","visit_conditional_branch","visit_infinite_loop","visit_statement","visit_expression","visit_function_call","visit_variable_declaration","visit_variable_update","visit_property_declaration","visit_const_value","memory_layout","memory_layout","memory_layout","memory_layout","as_function","memory_layout","memory_layout","memory_layout","get_property","memory_layout","as_function","memory_layout","generic_class","memory_layout","memory_layout","memory_layout","class","class","class","class","class","class","class","class","class","class","class","class","as_annotation_snippet","as_annotation_snippet","as_annotation_snippet","into_result","get_class","into_result","get_class","into_result","get_class","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","cmp","cmp","cmp","eq","ne","eq","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","eq","eq","ne","eq","eq","ne","eq","ne","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","ne","eq","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","partial_cmp","partial_cmp","partial_cmp","deref","deref","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from_str","hash","hash","hash","hash","hash","hash","hash","hash","hash","source","parse","from_code","new","span","normalize_pest_span","get_ident","add_import_file","new","new","single_ident","span","get_object","set_object","replace_object","from_mir","get_function_calls","schedule","add_on_load","null","get_property","class","expect_concrete","concrete","expect_template","template","assert_type","visit_node","push","add_value","add_anonymous_template","convert_into_template","get_from_spanned_ident","resolve_path","register_function_call","search","as_inner","dummy","add","get","get_single","get_template","get_template_or_default","new","namespace_mut","namespace","next_jump_location","register","register_members","register_function_call","add_value","add_anonymous_object","add_anonymous_template","get_from_spanned_ident","get_ident","get_type_pattern","resolve_path","is_dynamic","default_return","is_function","is_loop","matches_control_flow","is_normal","exits_block","new","context_mut","context","context_info","namespace_mut","arena_mut","arena","context_info","add_context","from_hir","type_ctx","add_input_file","get_input_file","get_unique_id","new","iter","ancestor","has_item_key","add_object","add_value","add_value_at","replace_object_at","len","is_empty","get","get_by_id","generic_class","get_property","as_function","from_payload","get_property","downcast_payload","is_instance","is_release","is_debug","as_snippet","as_slice","as_source_annotation","new","matches","from_str","is_int","is_bool","is_never","runtime_encodable","should_be_const"],"q":["debris_core","debris_core::hir","debris_core::hir::hir_nodes","","debris_core::hir::hir_nodes::HirConstValue","","debris_core::hir::hir_nodes","debris_core::hir::hir_nodes::HirConstValue","","debris_core::hir::hir_nodes","debris_core::hir::hir_nodes::HirConstValue","","debris_core::hir::hir_nodes","debris_core::hir::hir_nodes::HirConstValue","","debris_core::hir::hir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir::hir_nodes::HirExpression","","debris_core::hir::hir_nodes","debris_core::hir::hir_nodes::HirExpression","","","debris_core::hir::hir_nodes","","","","","","","","","","","","","","","","debris_core::hir::hir_nodes::HirTypePattern","","","debris_core::hir::hir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core","debris_core::llir","debris_core::llir::llir_nodes","","","","","","","","","","","","","","","","","","","","","debris_core::llir::llir_nodes::Condition","","","debris_core::llir::llir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir","debris_core::llir::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir","debris_core::llir::json_format","","","","","debris_core::llir","","","","","","","","debris_core","debris_core::mir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mir::MirValue","","debris_core::mir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core","debris_core::objects","debris_core::objects::obj_bool","","","","","","debris_core::objects","debris_core::objects::obj_bool_static","","debris_core::objects","debris_core::objects::obj_class","","","","","","","","","","","","","","","","","","","debris_core::objects","debris_core::objects::obj_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects","debris_core::objects::obj_int","","","","debris_core::objects","debris_core::objects::obj_int_static","","","","debris_core::objects","debris_core::objects::obj_module","","","","","","","","","","","","debris_core::objects","debris_core::objects::obj_native_function","","","","","","","","","","","","","debris_core::objects","debris_core::objects::obj_never","","debris_core::objects","debris_core::objects::obj_null","","debris_core::objects","debris_core::objects::obj_string","","","debris_core","debris_core::error","","","","","","","","","","","","","","","","","","","","","","","debris_core::error::LangErrorKind","","debris_core::error","debris_core::error::LangErrorKind","","","debris_core::error","debris_core::error::LangErrorKind","debris_core::error","debris_core::error::LangErrorKind","","debris_core::error","debris_core::error::LangErrorKind","","","debris_core::error","debris_core::error::LangErrorKind","","","debris_core::error","debris_core::error::LangErrorKind","debris_core::error","debris_core::error::LangErrorKind","","","debris_core::error","debris_core::error::LangErrorKind","debris_core::error","debris_core::error::LangErrorKind","","debris_core::error","debris_core::error::LangErrorKind","debris_core::error","debris_core::error::LangErrorKind","debris_core::error","","debris_core::error::LangErrorKind","debris_core::error","","","","","","","","","","debris_core","debris_core::function_interface","","","","","","","","","","debris_core","debris_core::memory","","","","","","","","","","debris_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir","","","","","","","debris_core::hir::hir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir","","","","","","","","","","","","","","","debris_core::llir::llir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::json_format","","","","","","","","","","","","","","","","debris_core::llir","","","","","","","debris_core::mir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_bool","","","","","","","","","","","debris_core::objects::obj_bool_static","","","","","","","","","","","debris_core::objects::obj_class","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_int","","","","","","","","","","","","","debris_core::objects::obj_int_static","","","","","","","","","","","","","debris_core::objects::obj_module","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_native_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_never","","","","","","","","","","","","","debris_core::objects::obj_null","","","","","","","","","","","","","debris_core::objects::obj_string","","","","","","","","","","","","","debris_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core","","","","","","","","","","","","","","","","","","","","","","debris_core::function_interface","","","","","","","debris_core::memory","","","","","","","","","","","","","","","","debris_core::mir","","","","","","","","","","","","","","","","","debris_core::objects::obj_bool","debris_core::objects::obj_bool_static","debris_core::objects::obj_class","debris_core::objects::obj_function","","debris_core::objects::obj_int","debris_core::objects::obj_int_static","debris_core::objects::obj_module","","debris_core::objects::obj_native_function","","","","debris_core::objects::obj_never","debris_core::objects::obj_null","debris_core::objects::obj_string","debris_core::objects::obj_bool","debris_core::objects::obj_bool_static","debris_core::objects::obj_class","debris_core::objects::obj_function","debris_core::objects::obj_int","debris_core::objects::obj_int_static","debris_core::objects::obj_module","debris_core::objects::obj_native_function","","debris_core::objects::obj_never","debris_core::objects::obj_null","debris_core::objects::obj_string","debris_core::error","","","debris_core","","","","","","","debris_core::hir","","debris_core::mir","","","debris_core","","debris_core::objects::obj_bool","debris_core::objects::obj_bool_static","debris_core::objects::obj_function","debris_core::objects::obj_int","debris_core::objects::obj_int_static","","","","","","","","","","","","debris_core::objects::obj_module","debris_core::objects::obj_null","debris_core::objects::obj_string","debris_core::error","","debris_core","debris_core::function_interface","","debris_core::hir::hir_nodes","","","","","","","","","debris_core::hir","","","debris_core::llir::llir_nodes","","","","debris_core::llir::utils","","","","","","debris_core::mir","","","","debris_core","debris_core::objects::obj_class","debris_core::objects::obj_function","","","","","debris_core::objects::obj_int","debris_core::objects::obj_int_static","debris_core::objects::obj_module","debris_core::objects::obj_native_function","","","debris_core::objects::obj_never","debris_core::objects::obj_null","debris_core::objects::obj_string","debris_core","","debris_core::error","","","","debris_core","","debris_core::hir","debris_core::llir","debris_core::mir","","","","debris_core","debris_core::objects::obj_function","debris_core","debris_core::hir","debris_core::llir::utils","debris_core::mir","debris_core::hir::hir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir","","","","","debris_core::llir::llir_nodes","","","","","","","","","","","","debris_core::llir::utils","","","","","","","","","","debris_core::mir","","","","","","","","","","","","","","","","","","","debris_core","","","debris_core::objects::obj_bool","","debris_core::objects::obj_bool_static","","debris_core::objects::obj_class","","debris_core::objects::obj_function","","","debris_core::objects::obj_int","","debris_core::objects::obj_int_static","","debris_core::objects::obj_module","","debris_core::objects::obj_native_function","","","debris_core::objects::obj_never","debris_core::objects::obj_null","debris_core::objects::obj_string","","debris_core","","","","debris_core::error","","","","","","","","debris_core","","","debris_core::memory","","","","debris_core::hir","debris_core::llir::utils","debris_core::mir","","debris_core","debris_core::objects::obj_string","debris_core::mir","debris_core::hir","debris_core::hir::hir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir","","","","","","debris_core::llir","","debris_core::llir::llir_nodes","","","","","","","","","","","","debris_core::llir::utils","","","","","","debris_core::llir::json_format","","debris_core::llir","debris_core::mir","","","","","","","","","","","","","","","","","","debris_core","","","","debris_core::objects::obj_bool","debris_core::objects::obj_bool_static","debris_core::objects::obj_class","","debris_core::objects::obj_function","","","","","debris_core::objects::obj_int","debris_core::objects::obj_int_static","debris_core::objects::obj_module","","debris_core::objects::obj_native_function","","","debris_core::objects::obj_never","debris_core::objects::obj_null","debris_core::objects::obj_string","debris_core","","","debris_core::error","","","","","","","debris_core","","debris_core::memory","","debris_core::llir","debris_core::llir::llir_nodes","","debris_core::llir::utils","debris_core::llir::json_format","","debris_core::mir","","","debris_core","debris_core::objects::obj_bool","debris_core::objects::obj_bool_static","debris_core::objects::obj_class","","debris_core::objects::obj_function","","debris_core::objects::obj_int","debris_core::objects::obj_int_static","debris_core::objects::obj_module","debris_core::objects::obj_native_function","","debris_core::objects::obj_never","debris_core::objects::obj_null","debris_core::objects::obj_string","debris_core::error","","","","debris_core","","","debris_core::hir","","","debris_core::llir::utils","","","debris_core::mir","debris_core::objects::obj_class","debris_core","debris_core::error","debris_core::hir","","","","","","","","","","","debris_core::llir","","","","","","","debris_core::mir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error","","","","debris_core","","","","","",""],"d":["High-level intermediate representation","Defines every node used in the hir representation","A constant literal, already parsed","","","","","","","","","","","","","Any supported comparison operator","","","","","","","Any operator that can be used as an infix","Any comparison like <, >, <=, >=, ==, !=","Logical and","Logical or","Mathematical addition","Mathematical substraction","Mathematical multiplication","Mathematical division","Mathematical modulo","Holds an infix operator combined with its span","","","Any prefix operator","Mathematical minus","Logical negation","Holds a prefix operator combined with its span","","","Marks an import statement. The id specifies the index of …","","","","","","","","Represents a control flow statement like return or break","","","","An infinite loop (Can be exited using control keywords …","","","Holds a variable type declaration like <code>foo: String</code> This …","","","","Sets a variable like <code>let a = expression();</code>","","","","Similar to <code>HirVariableInitialization</code>, however this node …","","","","Declaration of a property in a struct definition","The span of the declaration","The identifier inside of the struct","The type of the property","Any function call, can be dotted","","","","","An if-branch which checks a condition and runs code …","","","","","Any expression","A variable, for example <code>a</code>","A path to a variable, for example <code>for.bar.a</code>","A literal value, for example <code>2.0</code> or <code>\\\"Hello World\\\"</code>","A unary operation, for example <code>-a</code>","","","A binary operation, for example <code>a + b</code>","","","","A block which returns something","A function call, for example <code>foo()</code> or <code>path.to.foo()</code>","","","Any statement, the difference to an expression is that a …","A variable declaration, for example <code>let foo = 1</code>","A write to an already existing variable","A function call, which can be both an expression and …","Imports another debris file","Controls the program flow","A normal block","A normal if statement","","Any pattern that is allowed to specify a function …","A normal type, like <code>Int</code>","A function, like <code>fn(Int, Int) -> Int</code>","","","","A block of code. Usually contained withing a pair of {} …","","The statements of this block","The returned value:","The objects that got declared within this block","Attributes are a form of metadata that can be applied to …","","A function, which contains other statements","","","","The block containing all statements of the function","","","","A struct definition","","","All declaraed properties of this struct","A module with an associated name","","","","","","","","","Any Item","","","","Returns the associated [SpecialIdent]","Returns the associated [SpecialIdent]","Returns the associated [Ident]","Returns the span of the item in the block which is …","","","","","","Contains state data that are used during the hir …","","","","","Trait which defines methods that a visitor has to …","","","","","","","","","","","","","","","","","","","A list of [SpannedIdentifier]s, can be a dotted path","","Identifies a variable or value based on its span","","This struct stores the high-level intermediate …","","","The pest parser which can parse the grammar file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The hir representation of an input file and all of its …","","","","Keeps track of all imported modules, uses indexes as keys","Inserts a dependency and the code span and returns its …","","","","","Low-level intermediate representation","Contains every node that can be produced in the llir step.","A function node, contains other nodes","The id of this function","The value that this function returns","Stores a ‘fast’ variable","The scoreboard of the target var","The id of the target var","The value to store into the target var","Stores a ‘fast’ variable from the result of another …","The scoreboard of the target var","The id of the target var","The command to use","Operates on two scoreboard values and stores the result …","The scoreboard of the resulting value","The id of the resulting value","The left value","The right value","The kind of operation","Calls a function","The id of that function","Evaluates a condition and returns either true or false","Comparison between two values, eg. val1 <= val2","","","","","","Branches based on a condition","The condition to test","The node to execute if that condition is true","The node to execute if that condition is false","A component for a raw execute command. Either string or …","","","Executes a literal string","","Writes a formatted message","","","The buffer to write to","","","","","Any node","","","","","","","","","Does nothing","Denotes how a specific node accesses variables.","Marks that a value is read by this node","Marks that a value is written to by this node. The second …","Marks that a value can be both read from and written to …","See [VariableAccess].","","","","","Checks if this function contains a node that calls this …","","Returns a condition that is true, when this condition is …","Checks whether this condition is “simple”, which …","Recursively yields all variables that this condition …","","Iterates over this node and all other nodes that this …","Returns whether this command has no side effect. …","Accepts a callback function as argument and calls it with …","See <code>variable_accesses</code>.","Whether this node could modify <code>item_id</code>.","Whether this node has a read-dependency on <code>item_id</code>","","Identifies a single callable block of code","Identifies a specific scoreboard","The Main scoreboard, where all operations are per default","Custom scoreboards, each with a unique identifier","Special scorbeoards used for internal tracking","A Value that can be stored on a scoreboard","","","","Any operation that can be executed on a scoreboard- This …","","","","","","","","Any comparison that can be executed on two scoreboard …","","","","","","","","Flips the comparison (converts OP such that …","Inverts the comparison, such that it is exactly and only …","","A unique identifier for an item","","","(Current incomplete) interface for minecrafts text …","","","","","","A specific llir context","","The low-level intermediate representation struct","The functions which were created, excluding the main …","The runtime, which stores resources","","","","Mid-level intermediate representation","Acts like <code>MirGotoContext</code>, if the condition is equal to …","","","","The condition, has to be a boolean (right now)","A function call to api functions","","","","","","Calls a specific block of a context","","","The nth block of this context to go to","Command to start a new Block withing this context This …","","Any node that can be part of the mir representation","A function call which goes to a new block and initializes …","Goes to a specific jump location.","Marks a jump location. A jump location can be seen as a …","Updates the value of a variable. This is the only node …","Sets the return value for this context. Note that this …","Branches if a condition evaluates to true","Sets the return value for a given context","A reference to the value to be returned, See <code>ReturnValues</code> …","The context to set the return value for","Overrides the old value in the namespace struct with …","","","Any value that is used in the mir compilation and also in …","A concrete object Since concrete objects are already …","A template which marks a future object","","","","","","","","","","","","","Keeps track of single context, which can be a function, a …","A ref to the global compile context","","","The context id and the id of the corresponding namespace","All mir nodes that are emitted","Which control flow mode is used for this context Most …","The values returned by this function","Helper struct which can hold mutable references to the …","","","","","Stores the value and the span it is returned at","The value that is returned by default (when template is …","Contains all possible ‘kinds’ of contexts. This is …","A simple block created by <code>{}</code>","A built-in function","A function created by a user","A block that is conditonally executed at compile time","A block that is conditionally executed at runtime","A runtime loop","The mode how a <code>MirContext</code> exits","Normal exit, just continue with the next nodes","Look for the current function and call the context after …","Calls the context after the loop","Directly jumps to the top of the loop","","","","Visits the hir and creates a mir from it","The first visited function gets marked as the main …","Contexts which got scheduled to run every tick","A Mid-level intermediate representation","All contexts","","","","","","","","Contains all objects which can be used in a debris …","","Returns the boolean or-ed with the static value","","A boolean value that is stored on a scoreboard","","","","","","","","A reference to a class","Marks objects that have a class","Returns the class of this object","The class of a value.","Constructs a new class with a <code>typ</code> and class properties","","Retrieves a property of this class","Changes a property of this class","Constructs a new class with a <code>typ</code>","","","","","","","","Whether this class matches the other class","","","","A function object","","","","","","Returns every possible signature as (params, return) …","Decides which arguments a function can accepts","","","Flags a function can have. These effect how the compiler …","Marks that the function has no special flags","Marks that the function should be implemented by the …","An enum over all functions which are implemented by the …","","The context which gets passed to a function","The id for the returned value","The current span","","","A signature containing expected parameters and return type","","Returns whether the args iterator matches all of the …","","","A signature describing a single overload of a function","","","","","Adds a node to the previously emitted nodes","Shortcut for returning <code>ObjNull</code>","","","Tries to get a property starting at the <code>start</code> namespace …","","","A dynamic Integer","The id of the item","Creates a new dynamic integer with this id","Returns a <code>ScoreboardValue</code> which identifies a specific …","","A static integer object","","Creates a new static integers with this value","Returns a <code>ScoreboardValue</code> which matches this int","","A module object","Creates a new empty module with this name","","Returns the ident of this module","","Sets a property","Registers a value for the first time","Registers a simple api-function whose signature specifies …","A wrapper function for functions that return modules","","","","","","","","","","A callable function object for functions declared in …","","Created when the mir comes across a function definition, …","","","","","","","Signals that a block will never return. The most …","","","","","","A static string object","","","Compilation error handling","An owned counterpart to the <code>annotate_snippets::Slice</code> …","","","","","An owned counterpart to the <code>annotate_snippets::Snippet</code> …","","","","","","An owned counterpart to the …","","","","Thrown when parsing bad input","The span where this error occured","Symbols which were expected instead","A generic error which gets thrown when compiling","The specific error","","Specifies a specific error reason","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used to determine whether the error messages should use …","The result type used by most of the core functions","A result type which allows quick error throwing since no …","","","","A Compile Error","An error which happens when parsing the input","An error which happens when compiling the input","","This module contains a trait <code>ToFunctionInterface</code> which …","The common type for working with callbacks","Any function that can be called as a normal function …","","Trait used for converting any valid return value into a …","","If possible, returns the type of the return value","This trait can convert functions into compatible …","","Static method for querying the accepted parameters","Static method for querying the return type, may be None","","Copies a scoreboard value from source to destination","Copies all items from source over to destination","Specifies how a specific object lays out its runtime …","This type has no runtime memory","This type has exactly one integer sized field","This type is spread across multiple fields","Counter that can give out unique <code>ItemId</code>’s","","","","The Compilation context stores various information about …","The current config which specifies how to compile","The code files","","The current id counter for items that get added to this …","Objects are a central type for the compiler. Basically …","The class of the object","The runtime memory layout of this object","The actual value","A trait for values that can be used as debris object …","Returns the memory layout of this specific object This …","The class specific to this object. Contains additionally …","May be overwritten by distinct payloads which carry …","Interface any object can implement to be treated as a …","The type of the properties map","This struct is used to pass objects arround","","","Tests whether this object is equal to another object","","","The build mode for this compilation","Debug build: produces slower code, but contains various …","drops most safety checks, lower readability","Holds data about the user specified configuration","","","","","","How to optimize the code","No optimizations (excludes the peephole optimizer)","Full optimizations (default)","The type of a class object","The null type, implicitely return by function which don’…","Marks a value that cannot be constructed, for example The …","Compile time known 32-bit signed integer","32-bit signed integer known at runtime","A boolean value known at compile time","Runtime boolean","A compile time known string","Any function, native or api","The type of a class","Module type","The enumeration of patterns allowed as function arguments","The Any pattern matches every type","The Int pattern matches every integer","The Boolean pattern matches every boolean","A type pattern can also take any normal typereates a [HirFile] from code.","","","","","","Creates a new <code>SpannedIdentifier</code> from the [Span]","Creates a new IdentifierPath from the vec of identifiers","","","Returns an object that corresponds to a <code>MirValue</code>","Replaces a Template with the given index with an actual …","","Compiles the mir into a llir","","Schedules a specific block to run every tick.","Adds a specific block to the list of blocks which should …","Creates a new mir value that is null","Gets a property from the value","Returns the class of this value","","","","","Asserts that the type of this value matches <code>typ</code> and …","","Pushes a node to the current context","Adds a value to the current namespace. Fails if the ident …","Adds the class as an anonymous template and returns it as …","","Returns the value that is associated with this ident","Follows this path","Adds a function call to the current context","","","For testing purposes, creates a dummy id","","","Returns the first value if the length of <code>value</code> is exactly …","","","Creates a new context","","","Increments the jump location counter and returns it","Loads the module into this scope","Loads every member of the module (but not the module …","Creates a function call    ","Adds a value that corresponds to <code>ident</code>","Adds an anonymous object and returns a ref MirValue","Adds an anonymous value that is usually used temporarily","Looks up the value that corresponds to this ident","Returns an ident from a span","Returns the type pattern that belongs to a single spanned …","Resolves the accessor and returns the accessed element","Returns whether this context can only be executed at …","Returns the default return value of this context","Whether a return statement can select this block as an …","Whether a break or continue statement can select this …","Returns whether this context matches this control flow …","","Returns whether this control flow mode exits the current …","","Returns a mutable reference to the current context","Returns a shared reference to the current context","Returns a helper struct that contains both a context and …","Returns a mutable reference to the current namespace","Returns a mutable reference to the global arena","Returns a shared reference to the global arena","","","Converts the hir into a mir","","","","Returns a unique id","Creates a new Namespace","","","Returns whether a given item has a corresponding key","Adds an object with a name to this namespace","Adds an anonymous object (without name) to this namespace","Inserts the value at this index and returns the last …","Replaces the object with this id","The amount of objects in this namespace","Thanks, clippy…","Retrieves a named object from this namespace together …","Retrieves an object by its id from this namespace","The class specific to this object. Contains additionally …","May be overwritten by distinct payloads which carry …","Interface any object can implement to be treated as a …","","Tries to get a property that belongs to this object","Converts the payload into its original type","Returns whether the payload is of type <code>T</code>","Whether the current build mode is release","Whether the current build mode is debug","","","","","Returns whether the type matches on this pattern","","","","","Returns whether this type can be completely encoded at …","Returns whether this type should be const. Const types …"],"i":[0,0,0,1,2,2,1,3,3,1,4,4,1,5,5,0,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,0,8,8,0,9,9,0,10,10,0,11,11,11,0,12,12,12,0,13,13,13,0,14,14,0,15,15,15,0,16,16,16,0,17,17,17,0,18,18,18,0,19,19,19,19,0,20,20,20,20,0,21,21,21,21,22,22,21,23,23,23,21,21,21,21,0,24,24,24,24,24,24,24,24,0,25,25,26,26,26,0,27,27,27,27,0,28,0,29,29,29,29,29,29,29,0,30,30,30,0,31,31,31,31,0,32,32,32,0,33,33,1,6,7,9,27,21,24,25,28,29,0,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,0,37,0,38,38,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,40,40,0,41,41,41,41,41,0,0,0,42,42,0,43,43,43,0,44,44,44,0,45,45,45,45,45,0,46,0,47,48,48,48,47,47,0,49,49,49,0,50,50,0,51,0,52,52,0,53,53,53,53,0,54,54,54,54,54,54,54,54,54,0,55,55,55,0,56,56,56,42,42,42,47,47,47,47,54,54,54,54,54,54,0,0,0,57,57,57,0,58,58,58,0,59,59,59,59,59,59,59,0,60,60,60,60,60,60,59,60,60,60,0,61,61,0,0,62,0,63,63,0,64,0,65,65,0,66,66,0,0,67,67,67,67,0,68,68,68,68,68,0,69,69,69,0,70,0,71,71,71,71,71,71,0,72,72,0,73,73,0,74,74,75,75,0,76,76,76,76,76,76,76,76,0,0,77,77,77,77,77,77,77,0,78,78,0,0,79,79,0,80,80,80,80,80,80,0,81,81,81,81,0,82,82,0,83,83,0,84,84,0,85,85,85,85,85,0,0,0,0,0,86,86,86,0,0,87,0,0,0,88,0,89,89,89,89,89,0,0,90,90,90,90,90,90,90,90,0,0,91,91,91,91,91,91,0,92,92,0,93,93,0,94,0,95,95,95,0,0,96,96,96,96,0,97,97,97,95,95,95,95,95,95,95,0,0,98,98,98,0,0,99,99,99,0,0,100,100,100,100,100,100,100,0,101,101,101,0,0,0,102,102,102,0,103,0,104,104,104,104,104,0,0,105,0,0,106,0,0,107,107,0,0,108,108,108,108,0,109,109,109,109,109,0,110,110,110,0,111,111,0,112,112,0,113,114,114,113,115,115,115,113,116,113,117,117,113,118,118,118,113,119,119,119,113,120,113,121,121,121,113,122,113,123,123,113,124,113,125,113,113,126,0,0,0,0,127,127,0,128,128,128,0,0,0,129,0,130,130,0,131,131,131,0,0,0,0,132,132,132,0,133,133,133,0,134,134,0,135,0,136,136,136,0,137,137,137,137,0,0,0,138,138,138,138,0,139,139,0,140,140,140,140,140,0,141,141,0,142,142,142,142,142,142,142,142,142,142,0,143,143,143,143,38,38,38,38,38,38,38,1,1,1,1,1,1,1,1,1,1,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,37,37,37,37,37,37,37,37,37,37,36,36,36,36,36,36,36,36,36,36,144,144,144,144,144,144,144,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,41,41,41,41,41,41,41,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,56,56,56,56,56,56,56,145,145,145,145,145,145,145,145,145,145,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,66,66,66,66,66,66,66,74,74,74,74,74,74,74,74,74,74,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,73,73,73,73,73,73,73,73,72,72,72,72,72,72,72,72,67,67,67,67,67,67,67,67,71,71,71,71,71,71,71,71,71,78,78,78,78,78,78,78,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,79,79,79,79,79,79,79,77,77,77,77,77,77,77,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,83,83,83,83,83,83,83,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,148,148,148,148,148,148,148,148,148,148,148,136,136,136,136,136,136,136,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,139,139,139,139,139,139,139,139,139,139,141,141,141,141,141,141,141,141,141,141,140,140,140,140,140,140,140,140,109,109,109,109,109,109,109,108,108,108,108,108,108,108,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,128,128,128,128,128,128,128,128,128,128,128,143,143,143,143,143,143,143,143,143,143,143,142,142,142,142,142,142,142,142,142,142,142,149,149,149,149,149,149,149,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,86,87,89,91,91,98,99,100,100,103,103,104,104,105,106,107,86,87,89,91,98,99,100,103,104,105,106,107,111,112,128,150,150,150,150,148,148,134,37,36,74,147,81,135,148,86,87,92,98,99,99,99,99,99,99,99,99,99,99,99,99,101,106,107,128,128,143,149,149,1,6,7,8,9,10,12,15,25,37,36,39,45,46,47,53,145,57,58,59,60,61,74,147,80,81,148,89,91,92,93,94,97,98,99,100,102,103,104,105,106,107,139,141,111,112,113,128,143,142,41,66,146,81,84,85,134,93,140,39,145,147,1,1,6,7,7,8,8,9,10,10,11,11,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,24,24,25,25,27,27,28,28,29,29,30,30,31,31,32,32,33,33,37,37,36,36,39,43,43,45,45,46,46,47,47,50,50,51,51,145,145,57,57,58,58,59,60,61,61,74,74,69,69,70,70,73,73,72,72,67,67,71,71,68,147,147,80,81,135,135,148,86,86,87,87,89,90,91,92,92,98,98,99,99,100,100,103,103,104,105,106,107,107,139,141,140,140,111,111,112,112,113,113,128,128,143,143,142,132,132,133,133,39,145,147,146,148,107,146,38,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,27,28,29,30,31,32,33,34,37,36,39,40,41,64,65,42,43,44,45,46,47,49,50,51,52,53,54,145,57,58,59,60,61,62,63,66,74,69,70,73,72,67,71,68,146,147,79,77,80,81,82,83,84,85,134,135,148,136,86,87,89,90,91,92,93,94,96,98,99,100,101,102,103,104,105,106,107,139,141,140,109,108,110,111,112,113,128,143,142,132,133,65,42,54,61,62,63,71,147,85,148,86,87,89,90,91,96,98,99,100,103,104,105,106,107,111,113,128,112,143,142,142,37,36,39,145,57,61,147,89,142,128,144,38,34,34,34,34,34,37,36,36,36,64,64,64,65,65,66,66,74,74,74,74,74,74,74,74,76,78,78,78,78,78,78,78,146,147,147,79,79,79,79,79,77,77,77,77,77,77,77,77,77,77,77,77,77,77,80,80,80,80,80,81,81,83,83,83,83,83,83,83,84,84,84,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,137,137,137,148,136,136,136,139,139,109,108,110,112,143,143,142,142,142,142,142],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["span",3]],[[],["specialident",4]],[[],["specialident",4]],[[],["ident",4]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,[[["hiritem",4]]],[[["hirobject",4]]],[[["hirstruct",3]]],[[["hirmodule",3]]],[[["hirblock",3]]],[[["hirimport",3]]],[[["hircontrolflow",3]]],[[["hirinfiniteloop",3]]],[[["hirfunction",3]]],[[["hirconditionalbranch",3]]],[[["hirstatement",4]]],[[["hirexpression",4]]],[[["hirfunctioncall",3]]],[[["hirvariableinitialization",3]]],[[["hirvariableupdate",3]]],[[["hirpropertydeclaration",3]]],[[["hirconstvalue",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ident",4],["span",3]],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["bool",15]],[[],["bool",15]],[[],["condition",4]],[[],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["itemid",3]],["bool",15]],[[["itemid",3]],["bool",15]],null,null,null,null,null,null,null,null,null,[[],[["itemid",3],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i32",15]],["i32",15]],[[],["scoreboardcomparison",4]],[[],["scoreboardcomparison",4]],[[["i32",15]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["mirnode",4]]],[[["mircall",3]]],[[["mirjumplocation",3]]],[[["mirgotocontext",3]]],[[["mirupdatevalue",3]]],[[["mirreturnvalue",3]]],[[["mirbranchif",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["mircontext",3]],[[["contextid",3]],["mircontext",3]],[[["contextid",3]],["mircontext",3]],null,null,[[["bool",15],["itemid",3],["objbool",3]]],[[["bool",15],["itemid",3],["objbool",3]]],null,null,[[["itemid",3]]],[[],["scoreboardvalue",4]],null,null,null,null,null,null,[[["compilecontext",3]],["classref",6]],null,[[["type",4],["objectproperties",6]]],[[["rc",3]],["genericclassref",6]],[[["ident",4]],[["option",4],["objectref",3]]],[[["ident",4],["objectref",3]]],[[["type",4]]],null,null,[[["rc",3]]],[[],["rc",3]],[[],["classref",6]],[[["ident",4]],[["option",4],["objectref",3]]],[[],["type",4]],[[["genericclass",3]],["bool",15]],[[["string",3],["typepattern",4],["vec",3]]],[[["str",15]],["option",4]],null,null,null,[[["compilecontext",3],["vec",3],["functionoverload",3]]],[[["functionflags",4],["compilecontext",3],["vec",3],["functionoverload",3]]],[[["compilecontext",3]]],[[],[["option",4],["functionoverload",3]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["functionparameters",4],["genericclassref",6]]],[[],["bool",15]],[[],["functionparameters",4]],[[],["genericclassref",6]],null,[[["functionsignatureref",6],["debrisfunctioninterface",3]]],[[],["functionsignature",3]],[[],[["rc",3],["debrisfunctioninterface",3]]],[[],["compilecontext",3]],[[["node",4]]],[[],["objectref",3]],[[["contextid",3]],["blockid",3]],[[["mirvalue",4]],["objectref",3]],[[["contextid",3],["ident",4]],[["option",4],["objectref",3]]],[[["contextid",3]],[["langresult",6],["objectref",3]]],null,null,null,[[["itemid",3]]],[[],["scoreboardvalue",4]],null,null,null,[[]],[[],["scoreboardvalue",4]],null,null,[[]],[[["ident",4],["objectproperties",6]]],[[],["ident",4]],[[]],[[["into",8],["ident",4],["objectref",3]],[["option",4],["objectref",3]]],[[["into",8],["ident",4],["objectref",3]]],[[["compilecontext",3]]],null,[[["bool",15],["fn",8]]],[[["compilecontext",3]],["objmodule",3]],[[],["bool",15]],null,[[],["bool",15]],null,null,null,null,null,[[["cachedfunctionsignature",3],["compilecontext",3],["contextid",3],["rc",3],["genericclassref",6]]],null,null,null,null,null,[[["usize",15],["span",3],["typepattern",4],["compilecontext",3],["contextid",3]]],null,null,[[["compilecontext",3]],["objectref",3]],null,null,[[["compilecontext",3]],["objectref",3]],null,null,[[["string",3]]],[[],["str",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["string",3]],null,null,null,[[["compilecontext",3]],["string",3]],null,null,null,[[["functioncontext",3]],[["langresult",6],["objectref",3]]],null,[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["compilecontext",3]],[["option",4],["genericclassref",6]]],null,[[],[["normalizedfunctioninterface",8],["box",3]]],[[["compilecontext",3]],["functionparameters",4]],[[["compilecontext",3]],[["option",4],["genericclassref",6]]],null,[[["itemid",3]],["node",4]],[[["objectref",3]]],null,null,null,null,null,[[["contextid",3],["usize",15]]],[[],["itemid",3]],[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["genericclassref",6]],[[["ident",4]],[["option",4],["objectref",3]]],[[],[["option",4],["objfunction",3]]],null,null,null,[[],["any",8]],[[["objectref",3]],["bool",15]],[[["compilecontext",3]],["objectref",3]],[[["compilecontext",3]],["classref",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["functioncontext",3]],[["objectref",3],["langerrorkind",4],["result",4]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["bool",15]],[[["hiritem",4]]],[[["hirobject",4]]],[[["hirstruct",3]]],[[["hirmodule",3]]],[[["hirblock",3]]],[[["hirimport",3]]],[[["hircontrolflow",3]]],[[["hirfunction",3]]],[[["hirconditionalbranch",3]]],[[["hirinfiniteloop",3]]],[[["hirstatement",4]]],[[["hirexpression",4]]],[[["hirfunctioncall",3]]],[[["hirvariableinitialization",3]]],[[["hirvariableupdate",3]]],[[["hirpropertydeclaration",3]]],[[["hirconstvalue",4]]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["memorylayout",4]],[[],[["option",4],["objfunction",3]]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["memorylayout",4]],[[["ident",4]],[["option",4],["objectref",3]]],[[["compilecontext",3]],["memorylayout",4]],[[],[["option",4],["objfunction",3]]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["genericclassref",6]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["memorylayout",4]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["classref",6]],[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["snippetowned",3]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["compilecontext",3]],[["option",4],["genericclassref",6]]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["compilecontext",3]],[["option",4],["genericclassref",6]]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["compilecontext",3]],[["option",4],["genericclassref",6]]],[[]],[[["span",3]]],[[["spannedidentifier",3]]],[[["objectref",3]]],[[["index",3]]],[[["hircontrolkind",4]]],[[["contextid",3]]],[[["debrisobject",3]]],[[["itemid",3]]],[[["bool",15]]],[[["typepattern",4],["vec",3]]],[[["itemid",3]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i128",15]]],[[["isize",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15]]],[[]],[[]],[[["string",3]]],[[["parseerror",3]]],[[["langerror",3]]],[[["genericclassref",6]]],[[["normalizedfunctioninterface",8],["box",3]]],[[]],[[],["hirconstvalue",4]],[[],["hircomparisonoperator",4]],[[],["hirinfixoperator",4]],[[],["hirinfix",3]],[[],["hirprefixoperator",4]],[[],["hirprefix",3]],[[],["hircontrolkind",4]],[[],["hirparameterdeclaration",3]],[[],["hirtypepattern",4]],[[],["spannedidentifier",3]],[[],["identifierpath",3]],[[],["rule",4]],[[],["binaryoperation",3]],[[],["call",3]],[[],["condition",4]],[[],["writetarget",4]],[[],["blockid",3]],[[],["scoreboard",4]],[[],["scoreboardvalue",4]],[[],["scoreboardoperation",4]],[[],["scoreboardcomparison",4]],[[],["itemid",3]],[[],["mirvalue",4]],[[],["contextid",3]],[[],["contextkind",4]],[[],["controlflowmode",4]],[[],["objectref",3]],[[],["objclass",3]],[[],["objfunction",3]],[[],["functionparameters",4]],[[],["functionflags",4]],[[],["compilerfunction",4]],[[],["functionoverload",3]],[[],["objint",3]],[[],["objstaticint",3]],[[],["objmodule",3]],[[],["functionparameterdefinition",3]],[[],["objnativefunction",3]],[[],["objnativefunctionsignature",3]],[[],["objnever",3]],[[],["objnull",3]],[[],["objstring",3]],[[],["buildmode",4]],[[],["optmode",4]],[[],["parseerror",3]],[[],["langerror",3]],[[],["langerrorkind",4]],[[],["compileerror",4]],[[],["typepattern",4]],[[],["type",4]],[[],["importdependencies",3]],[[],["runtime",3]],[[],["namespacearena",3]],[[]],[[],["mir",3]],[[],["mircontextmap",3]],[[],["compilecontext",3]],[[]],[[]],[[["rule",4]],["ordering",4]],[[["blockid",3]],["ordering",4]],[[["contextid",3]],["ordering",4]],[[["hirconstvalue",4]],["bool",15]],[[["hirconstvalue",4]],["bool",15]],[[["hircomparisonoperator",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirprefixoperator",4]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hircontrolkind",4]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hiritem",4]],["bool",15]],[[["hiritem",4]],["bool",15]],[[["spannedidentifier",3]],["bool",15]],[[["spannedidentifier",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[["rule",4]],["bool",15]],[[["faststore",3]],["bool",15]],[[["faststore",3]],["bool",15]],[[["binaryoperation",3]],["bool",15]],[[["binaryoperation",3]],["bool",15]],[[["call",3]],["bool",15]],[[["call",3]],["bool",15]],[[["condition",4]],["bool",15]],[[["condition",4]],["bool",15]],[[["executerawcomponent",4]],["bool",15]],[[["executerawcomponent",4]],["bool",15]],[[["executeraw",3]],["bool",15]],[[["executeraw",3]],["bool",15]],[[["blockid",3]],["bool",15]],[[["blockid",3]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["scoreboardoperation",4]],["bool",15]],[[["scoreboardcomparison",4]],["bool",15]],[[["itemid",3]],["bool",15]],[[["itemid",3]],["bool",15]],[[["mirvalue",4]],["bool",15]],[[["mirvalue",4]],["bool",15]],[[["mirgotocontext",3]],["bool",15]],[[["mirgotocontext",3]],["bool",15]],[[["mirjumplocation",3]],["bool",15]],[[["mirjumplocation",3]],["bool",15]],[[["mirupdatevalue",3]],["bool",15]],[[["mirupdatevalue",3]],["bool",15]],[[["mirreturnvalue",3]],["bool",15]],[[["mirreturnvalue",3]],["bool",15]],[[["mirbranchif",3]],["bool",15]],[[["mirbranchif",3]],["bool",15]],[[["mirnode",4]],["bool",15]],[[["mirnode",4]],["bool",15]],[[["mircall",3]],["bool",15]],[[["contextid",3]],["bool",15]],[[["contextid",3]],["bool",15]],[[["contextkind",4]],["bool",15]],[[["controlflowmode",4]],["bool",15]],[[["namespace",3]],["bool",15]],[[["namespace",3]],["bool",15]],[[["objectref",3]],["bool",15]],[[["objbool",3]],["bool",15]],[[["objbool",3]],["bool",15]],[[["objstaticbool",3]],["bool",15]],[[["objstaticbool",3]],["bool",15]],[[],["bool",15]],[[["genericclass",3]],["bool",15]],[[["objfunction",3]],["bool",15]],[[["functionparameters",4]],["bool",15]],[[["functionparameters",4]],["bool",15]],[[["objint",3]],["bool",15]],[[["objint",3]],["bool",15]],[[["objstaticint",3]],["bool",15]],[[["objstaticint",3]],["bool",15]],[[["objmodule",3]],["bool",15]],[[["objmodule",3]],["bool",15]],[[["objnativefunction",3]],["bool",15]],[[["objnativefunction",3]],["bool",15]],[[["objnativefunctionsignature",3]],["bool",15]],[[["objnever",3]],["bool",15]],[[["objnull",3]],["bool",15]],[[["objstring",3]],["bool",15]],[[["objstring",3]],["bool",15]],[[["buildmode",4]],["bool",15]],[[["optmode",4]],["bool",15]],[[["config",3]],["bool",15]],[[["config",3]],["bool",15]],[[["parseerror",3]],["bool",15]],[[["parseerror",3]],["bool",15]],[[["langerror",3]],["bool",15]],[[["langerror",3]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[["compileerror",4]],["bool",15]],[[["compileerror",4]],["bool",15]],[[["typepattern",4]],["bool",15]],[[["typepattern",4]],["bool",15]],[[["type",4]],["bool",15]],[[["memorylayout",4]],["bool",15]],[[["memorylayout",4]],["bool",15]],[[["memorycounter",3]],["bool",15]],[[["memorycounter",3]],["bool",15]],[[["rule",4]],[["ordering",4],["option",4]]],[[["blockid",3]],[["ordering",4],["option",4]]],[[["contextid",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["str",15]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["error",8]]],[[["rule",4],["str",15]],[["pairs",3],["result",4],["error",3]]],[[["coderef",3],["compilecontext",3],["importdependencies",3]],["result",6]],[[["importdependencies",3],["compilecontext",3],["coderef",3]]],[[["span",3]],["span",3]],[[["usize",15],["span",3]],["span",3]],[[["spannedidentifier",3]],["ident",4]],[[["spannedidentifier",3]],["usize",15]],[[["span",3]]],[[["spannedidentifier",3],["vec",3]]],[[],[["option",4],["spannedidentifier",3]]],[[],["span",3]],[[["mircontextmap",3],["mirvalue",4],["namespacearena",3]],[["option",4],["objectref",3]]],[[["namespacearena",3],["itemid",3],["mircontextmap",3],["objectref",3]]],[[["namespacearena",3],["itemid",3],["mircontextmap",3],["objectref",3]]],[[["mircontextmap",3],["namespacearena",3]],[["result",6],["llir",3]]],[[],[["usize",15],["hashmap",3],["blockid",3]]],[[["blockid",3]]],[[["blockid",3]]],[[["compilecontext",3]]],[[["ident",4]],[["option",4],["objectref",3]]],[[],["genericclassref",6]],[[["str",15]],["objectref",3]],[[],[["option",4],["objectref",3]]],[[["str",15]]],[[],["option",4]],[[["span",3],["typepattern",4],["option",4]],["result",6]],[[["mirnode",4]]],[[["mirnode",4]]],[[["ident",4],["span",3],["mirvalue",4]],["result",6]],[[["genericclassref",6]],["mirvalue",4]],[[["itemid",3]]],[[["spannedidentifier",3]],[["result",6],["mirvalue",4]]],[[["identifierpath",3]],[["accessedproperty",3],["result",6]]],[[["span",3],["mirvalue",4],["option",4],["vec",3],["objectref",3]],["result",6]],[[["contextid",3],["ident",4]],["option",4]],[[],["index",3]],[[["usize",15]],["contextid",3]],[[["mirvalue",4]],["usize",15]],[[["usize",15]],[["option",4],["mirvalue",4]]],[[],[["option",4],["mirvalue",4]]],[[],["option",4]],[[],["mirvalue",4]],[[["span",3],["option",4],["compilecontext",3],["contextid",3],["contextkind",4],["namespacearena",3]]],[[["namespacearena",3]],["namespace",3]],[[["namespacearena",3]],["namespace",3]],[[],["usize",15]],[[["objmodule",3],["namespacearena",3]]],[[["objmodule",3],["namespacearena",3]]],[[["namespacearena",3],["span",3],["mirvalue",4],["option",4],["vec",3],["objectref",3]],["result",6]],[[["ident",4],["span",3],["mirvalue",4],["namespacearena",3]],["result",6]],[[["objectref",3],["namespacearena",3]],["mirvalue",4]],[[["genericclassref",6],["namespacearena",3]],["mirvalue",4]],[[["namespacearena",3],["spannedidentifier",3]],[["result",6],["mirvalue",4]]],[[["spannedidentifier",3]],["ident",4]],[[["spannedidentifier",3]],[["result",6],["typepattern",4]]],[[["identifierpath",3],["namespacearena",3]],[["accessedproperty",3],["result",6]]],[[],["bool",15]],[[["compilecontext",3]],["objectref",3]],[[],["bool",15]],[[],["bool",15]],[[["hircontrolkind",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["coderef",3],["mir",3],["compilecontext",3]]],[[],["mircontext",3]],[[],["mircontext",3]],[[],["mircontextinfo",3]],[[],["namespace",3]],[[],["namespacearena",3]],[[],["namespacearena",3]],[[["contextid",3]],["mircontextinfo",3]],[[["mircontext",3]]],[[["hir",3],["compilecontext",3]],[["result",6],["mir",3]]],[[],["typecontextref",3]],[[["code",3]],["codeid",6]],[[["codeid",6]],["code",3]],[[],["usize",15]],[[["contextid",3],["option",4],["index",3]]],[[],["namespaceiterator",3]],[[],[["option",4],["index",3]]],[[["usize",15]],["bool",15]],[[["ident",4],["namespaceentry",4]],[["usize",15],["option",4]]],[[["namespaceentry",4]],["usize",15]],[[["usize",15],["namespaceentry",4]],[["option",4],["namespaceentry",4]]],[[["usize",15],["namespaceentry",4]],["namespaceentry",4]],[[],["usize",15]],[[],["bool",15]],[[["ident",4],["arena",3]],["option",4]],[[["usize",15]],[["option",4],["namespaceentry",4]]],[[["compilecontext",3]],["genericclassref",6]],[[["ident",4]],[["option",4],["objectref",3]]],[[],[["option",4],["objfunction",3]]],[[["compilecontext",3],["objectpayload",8]]],[[["ident",4]],[["option",4],["objectref",3]]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["snippet",3]],[[],["slice",3]],[[],["sourceannotation",3]],[[["span",3],["langerrorkind",4]]],[[["genericclass",3]],["bool",15]],[[["compilecontext",3],["str",15]],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]]],"p":[[4,"HirConstValue"],[13,"Integer"],[13,"Bool"],[13,"Fixed"],[13,"String"],[4,"HirComparisonOperator"],[4,"HirInfixOperator"],[3,"HirInfix"],[4,"HirPrefixOperator"],[3,"HirPrefix"],[3,"HirImport"],[4,"HirControlKind"],[3,"HirControlFlow"],[3,"HirInfiniteLoop"],[3,"HirParameterDeclaration"],[3,"HirVariableInitialization"],[3,"HirVariableUpdate"],[3,"HirPropertyDeclaration"],[3,"HirFunctionCall"],[3,"HirConditionalBranch"],[4,"HirExpression"],[13,"UnaryOperation"],[13,"BinaryOperation"],[4,"HirStatement"],[4,"HirTypePattern"],[13,"Function"],[3,"HirBlock"],[3,"Attribute"],[3,"HirFunction"],[3,"HirStruct"],[3,"HirModule"],[4,"HirObject"],[4,"HirItem"],[3,"HirContext"],[8,"HirVisitor"],[3,"IdentifierPath"],[3,"SpannedIdentifier"],[3,"HirFile"],[4,"Rule"],[3,"Hir"],[3,"ImportDependencies"],[3,"Function"],[3,"FastStore"],[3,"FastStoreFromResult"],[3,"BinaryOperation"],[3,"Call"],[4,"Condition"],[13,"Compare"],[3,"Branch"],[4,"ExecuteRawComponent"],[3,"ExecuteRaw"],[3,"WriteMessage"],[4,"WriteTarget"],[4,"Node"],[4,"VariableAccess"],[4,"VariableAccessMut"],[4,"Scoreboard"],[4,"ScoreboardValue"],[4,"ScoreboardOperation"],[4,"ScoreboardComparison"],[3,"ItemId"],[3,"FormattedText"],[4,"JsonFormatComponent"],[3,"LlirContext"],[3,"Llir"],[3,"Runtime"],[3,"MirBranchIf"],[3,"MirCall"],[3,"MirGotoContext"],[3,"MirJumpLocation"],[4,"MirNode"],[3,"MirReturnValue"],[3,"MirUpdateValue"],[4,"MirValue"],[13,"Template"],[8,"MirVisitor"],[3,"MirContext"],[3,"MirContextInfo"],[3,"ReturnValues"],[4,"ContextKind"],[4,"ControlFlowMode"],[3,"CachedFunctionSignature"],[3,"MirBuilder"],[3,"Mir"],[3,"MirContextMap"],[3,"ObjBool"],[3,"ObjStaticBool"],[8,"HasClass"],[3,"ObjClass"],[3,"GenericClass"],[3,"ObjFunction"],[4,"FunctionParameters"],[4,"FunctionFlags"],[4,"CompilerFunction"],[3,"FunctionContext"],[3,"FunctionSignature"],[3,"FunctionOverload"],[3,"ObjInt"],[3,"ObjStaticInt"],[3,"ObjModule"],[3,"ModuleFactory"],[3,"FunctionParameterDefinition"],[3,"ObjNativeFunction"],[3,"ObjNativeFunctionSignature"],[3,"ObjNever"],[3,"ObjNull"],[3,"ObjString"],[3,"SliceOwned"],[3,"SnippetOwned"],[3,"SourceAnnotationOwned"],[3,"ParseError"],[3,"LangError"],[4,"LangErrorKind"],[13,"VariableAlreadyDefined"],[13,"UnexpectedType"],[13,"UnexpectedPattern"],[13,"UnexpectedOverload"],[13,"MissingVariable"],[13,"MissingProperty"],[13,"ConstVariable"],[13,"UnexpectedOperator"],[13,"UnpromotableType"],[13,"MissingModule"],[13,"CircularImport"],[13,"InvalidControlFlow"],[13,"NotYetImplemented"],[8,"AsAnnotationSnippet"],[4,"CompileError"],[8,"NormalizedFunctionInterface"],[8,"ValidReturnType"],[8,"ToFunctionInterface"],[4,"MemoryLayout"],[3,"MemoryCounter"],[3,"CompileContext"],[3,"Namespace"],[3,"DebrisObject"],[8,"ObjectPayload"],[8,"ValidPayload"],[4,"BuildMode"],[3,"Config"],[4,"OptMode"],[4,"Type"],[4,"TypePattern"],[3,"DebrisParser"],[3,"BlockId"],[3,"NamespaceArena"],[3,"ContextId"],[3,"ObjectRef"],[3,"DebrisFunctionInterface"],[6,"LangResult"]]},\
"debris_derive":{"doc":"","t":[23],"n":["object"],"q":["debris_derive"],"d":["Handles an impl block containing methods for debris …"],"i":[0],"f":[null],"p":[]},\
"debris_lang":{"doc":"The Debris compiler.","t":[5,5,5],"n":["debug_run","main","init"],"q":["debris_lang","",""],"d":["Compiles the file <code>test.txt</code> into llir","",""],"i":[0,0,0],"f":[[[["compileconfig",3]],[["result",6],["llir",3]]],[[]],[[],["compileconfig",3]]],"p":[]},\
"debris_std":{"doc":"The standard library implementation for the debris …","t":[5],"n":["load"],"q":["debris_std"],"d":["Loads the standard library module"],"i":[0],"f":[[[["compilecontext",3]],["objmodule",3]]],"p":[]},\
"vfs":{"doc":"Virstual in-memory file system. might switch to a more …","t":[4,13,13,3,12,3,12,12,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FsElement","File","Directoy","File","contents","Directory","files","directories","persist","new","with_data","push_string","persist","new","with_contents","file","dir","resolve_path","persist","directories","directories_inner","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","default","default","eq","ne","eq","ne","eq","ne","fmt","fmt","fmt"],"q":["vfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","returns a new file with this name or returns an existing …","Returns a new directory with this name or returns an …","","","Custom macro to easily generate predefined file structures…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,2,0,3,3,1,2,2,2,2,3,3,3,3,3,3,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,2,3,1,1,2,2,3,3,1,2,3],"f":[null,null,null,null,null,null,null,null,[[["path",3],["str",15]],["result",6]],[[]],[[["str",15]]],[[["str",15]]],[[["path",3],["str",15]],["result",6]],[[]],[[["hashmap",3],["file",3],["string",3],["directory",3],["hashmap",3]]],[[["string",3]],["file",3]],[[["string",3]],["directory",3]],[[],[["fselement",4],["option",4]]],[[["path",3],["str",15]],["result",6]],null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["file",3]],[[],["directory",3]],[[["fselement",4]],["bool",15]],[[["fselement",4]],["bool",15]],[[["file",3]],["bool",15]],[[["file",3]],["bool",15]],[[["directory",3]],["bool",15]],[[["directory",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[4,"FsElement"],[3,"File"],[3,"Directory"]]}\
}');
initSearch(searchIndex);