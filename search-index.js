var searchIndex = JSON.parse('{\
"debris_backends":{"doc":"Backend implementations for the debris compiler","t":[8,3,0,0,10,13,13,13,4,13,3,13,13,13,13,4,4,13,13,4,13,13,13,13,13,3,13,13,13,13,0,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,13,3,13,13,13,13,4,4,13,13,4,13,13,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,11,11,5,11,11,11,11,11,11,11,12,12,3,18,11,11,0,11,11,11,12,11,11,0,11,0,11,0,12,11,0,0,0,0,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,3,11,11,12,11,11,11,5,11,11,11,12,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,11,11,11,11,11,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,12,8,10,3,11,11,11,11,11,11,11,11,12,12,5,5,5,11,11,11,11],"n":["Backend","DatapackBackend","common","datapack","generate","Dummy","Equal","Execute","ExecuteComponent","Function","FunctionIdent","IfScoreRange","IfScoreRelation","JsonMessage","Maximum","MinecraftCommand","MinecraftRange","Minimum","NotEqual","ObjectiveCriterion","Range","RawCommand","ScoreboardAdd","ScoreboardOperation","ScoreboardOperationAdd","ScoreboardPlayer","ScoreboardRemove","ScoreboardSet","ScoreboardSetEqual","ScoreboardSetFromResult","commands","is_collection","namespace","path","player","scoreboard","string_escape","comparison","player","player1","player2","range","and_then","command","command","criterion","function","json_name","message","name","name","operation","parts","player","player","player","player1","player1","player2","player2","target","value","value","0","0","0","0","from","to","Dummy","Equal","Execute","ExecuteComponent","Function","FunctionIdent","IfScoreRange","IfScoreRelation","JsonMessage","Maximum","MinecraftCommand","MinecraftRange","Minimum","NotEqual","ObjectiveCriterion","Range","RawCommand","ScoreboardAdd","ScoreboardOperation","ScoreboardOperationAdd","ScoreboardPlayer","ScoreboardRemove","ScoreboardSet","ScoreboardSetEqual","ScoreboardSetFromResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_operator","into","into","into","into","into","into","is_collection","is_condition","namespace","path","player","scoreboard","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","comparison","player","player1","player2","range","and_then","command","command","criterion","function","json_name","message","name","name","operation","parts","player","player","player","player1","player1","player2","player2","target","value","value","0","0","0","0","from","to","Char","None","Str","StringEscape","borrow","borrow_mut","escape_minecraft","from","into","into_iter","next","try_from","try_into","type_id","0","0","Datapack","FUNCTION_TAGS_PATH","add_load_json","add_tick_json","backend","borrow","borrow_mut","default","dir","fmt","from","function_context","functions","generator","into","json_formatter","main_dir","new","scoreboard_constants","scoreboard_context","stringify","templates","try_from","try_into","type_id","DatapackBackend","borrow","borrow_mut","default","fmt","from","generate","into","try_from","try_into","type_id","0","FunctionContext","FunctionId","GeneratedFunction","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commands","current_function_id","default","eq","equivalent","fmt","fmt","fmt","from","from","from","function_identifiers","function_namespace","functions","functions","get_filename","get_function_id","get_function_ident","hash","identifier","increment","insert","into","into","into","ne","new","next_function_id","register","register_custom_function","register_function","register_with_name","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user_id_map","DatapackGenerator","add_command","borrow","borrow_mut","build","catch_output","compile_context","fmt","from","function_calls_stats","function_ctx","get_as_single_command","get_condition","get_condition_inner","handle","handle_binary_operation","handle_branch","handle_call","handle_condition","handle_execute","handle_fast_store","handle_fast_store_from_result","handle_function","handle_main_function","handle_ticking_function","handle_write","into","llir","new","scoreboard_constants","scoreboard_ctx","stack","try_from","try_into","type_id","JsonTextWriter","borrow","borrow_mut","buf","default","flush_pending","fmt","format_json","from","into","into_string","pending","try_from","try_into","type_id","write","write_score","write_str","ScoreboardConstants","borrow","borrow_mut","constants","constants","default","fmt","from","get_name","into","name","try_from","try_into","type_id","Normal","ScoreboardContext","ScoreboardPlayerId","Temporary","add_player","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","format_player","format_scoreboard","from","from","from","get_scoreboard","get_scoreboard_player","get_temporary_player","hash","into","into","ne","new","player_fmt_string","scoreboard_players","scoreboard_prefix","scoreboards","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","Stringify","as_str","TemplateData","borrow","borrow_mut","clone","clone_into","fmt","from","from","into","project","project_description","template_load_json","template_pack_mcmeta","template_tick_json","to_owned","try_from","try_into","type_id"],"q":["debris_backends","","","","","debris_backends::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::common::ExecuteComponent","","","","","debris_backends::common::MinecraftCommand","","","","","","","","","","","","","","","","","","","","","debris_backends::common::MinecraftRange","","","","","","debris_backends::common::commands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::common::commands::ExecuteComponent","","","","","debris_backends::common::commands::MinecraftCommand","","","","","","","","","","","","","","","","","","","","","debris_backends::common::commands::MinecraftRange","","","","","","debris_backends::common::string_escape","","","","","","","","","","","","","","debris_backends::common::string_escape::StringEscape","","debris_backends::datapack","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::backend","","","","","","","","","","","debris_backends::datapack::function_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::generator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::json_formatter","","","","","","","","","","","","","","","","","","debris_backends::datapack::scoreboard_constants","","","","","","","","","","","","","","debris_backends::datapack::scoreboard_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::scoreboard_context::ScoreboardPlayerId","","debris_backends::datapack::stringify","","debris_backends::datapack::templates","","","","","","","","","","","","","","","","",""],"d":["A Backend for debris, which has to convert <code>LLIR</code> into a …","The Datapack Backend implementation","Defines common items that are specific to the latest …","A Backend that can compile to minecraft datapacks","Converts the llir into a directory","Mostly used by debris","A range that only contains one value","Any used execute command","A component in an execute command","Calls another function","A unique minecraft function identifier","Tests for a relation between a score and a static value","Tests for a relation between to scores","","A range with an upper bound, eg. ..50","Enumerates all minecraft commands that are used by any …","Any valid minecraft range","A range with a lower bound, eg. 0..","A range that contains every value except one","Any objective criterion","A full range, eg. 1..99","","","","Quick operation which adds or removes a static value","A combination of scoreboard and player","","Sets the scoreboard value to a specific integer","Sets the scoreboard value to another scoreboard value","Sets the scoreboard value equal to the result of the other …","","Whether this function is a collection, marked by a <code>#</code>","The namespace of this function, for example <code>debris</code>","The path of this function, for example <code>foo/bar/baz</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mostly used by debris","A range that only contains one value","Any used execute command","A component in an execute command","Calls another function","A unique minecraft function identifier","Tests for a relation between a score and a static value","Tests for a relation between to scores","","A range with an upper bound, eg. ..50","Enumerates all minecraft commands that are used by any …","Any valid minecraft range","A range with a lower bound, eg. 0..","A range that contains every value except one","Any objective criterion","A full range, eg. 1..99","","","","Quick operation which adds or removes a static value","A combination of scoreboard and player","","Sets the scoreboard value to a specific integer","Sets the scoreboard value to another scoreboard value","Sets the scoreboard value equal to the result of the other …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether this function is a collection, marked by a <code>#</code>","Returns whether this component is a condition (Right now …","The namespace of this function, for example <code>debris</code>","The path of this function, for example <code>foo/bar/baz</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This implements iterator to allow for the <code>flat_map</code> …","","","Escapes a string for minecraft: Newlines are replaced with …","","","","","","","","","","Represents an in-memory datapack","","","","","","","","The virtual file structure","","","","Returns the functions directory of this pack","","","","The name of the main directory","Creates a new <code>Datapack</code> from a Config","","","","Implements some functions which can static files which …","","","","The Datapack Backend implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of the current namespace","Returns an iterator of all the generated functions","","","","","","","","Inserts a function with a given id","","","","","","","Register a function with this id. Returns the filename of …","Registers a custom function which was not specified by the …","","","","","","","","","","","","","A bijective mapping from blocks to minecraft functions …","This struct is used to generate a datapack from the llir …","Adds a command to the current stack","","","","Handles the given command and returns the produced output","The compilation configuration","","","Statistics for how often each function got called","Contains the already generated functions","Converts a bunch of minecraft commands into a single …","Evaluates this condition and, if it is true, calls <code>and_then</code>…","","","","","","","","","","","Handles the main function","Handles functions that run every tick","","","The llir to compile","","Keeps track of all constants that are used throughout the …","A context which keeps track of the currently used …","The current stack","","","","","","","","","","","","","","","","","","","","","","Keeps track of used scoreboard constants that are used in …","","","","","","","","","","","","","","","Holds data about specific scoreboard contexts","Used to differentiate between a generated id and a …","","","","","","","","","","","","","","","","","","Returns the name of this scoreboard","Gets the scoreboard player that corresponds to this <code>ItemId</code>","Makes a new scoreboard player and returns it as a …","","","","","Creates a new scoreboard context with the default …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,0,4,0,5,5,4,3,0,0,3,3,0,3,4,4,4,4,0,4,4,4,4,0,6,6,6,7,7,0,8,9,8,8,9,10,11,12,13,14,13,15,13,16,17,10,18,11,19,20,17,20,17,15,18,19,21,22,23,24,25,25,2,3,4,0,4,0,5,5,4,3,0,0,3,3,0,3,4,4,4,4,0,4,4,4,4,4,5,3,7,2,6,4,5,3,7,2,6,4,5,3,7,2,4,5,3,7,2,4,4,5,5,3,3,7,2,2,6,6,4,5,3,7,2,6,3,4,5,3,7,2,6,6,5,6,6,7,7,4,5,3,7,2,4,5,3,2,6,4,5,3,7,2,6,4,5,3,7,2,6,4,5,3,7,2,6,8,9,8,8,9,10,11,12,13,14,13,15,13,16,17,10,18,11,19,20,17,20,17,15,18,19,21,22,23,24,25,25,26,26,26,0,26,26,0,26,26,26,26,26,26,26,27,28,0,29,29,29,0,29,29,29,29,29,29,0,29,0,29,0,29,29,0,0,0,0,29,29,29,0,30,30,30,30,30,30,30,30,30,30,31,0,0,0,32,31,33,32,31,33,31,31,32,33,31,31,31,32,31,33,32,31,33,33,33,33,33,32,33,33,31,32,31,33,32,31,33,31,33,33,33,33,33,33,31,32,31,33,32,31,33,32,31,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,37,0,0,37,38,38,37,38,37,37,37,37,37,38,37,38,38,38,37,37,38,38,38,37,38,37,37,38,38,38,38,38,37,38,37,38,37,38,37,39,40,0,41,0,42,42,42,42,42,42,42,42,42,42,0,0,0,42,42,42,42],"f":[null,null,null,null,[[["llir",3],["compilecontext",3]],["directory",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["minecraftcommand",4]],[[],["executecomponent",4]],[[],["minecraftrange",4]],[[],["scoreboardplayer",3]],[[],["objectivecriterion",4]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["scoreboardcomparison",4]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["str",15]]],[[]],[[]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["config",3]]],[[["config",3]]],null,[[]],[[]],[[],["datapack",3]],null,[[["formatter",3]],["result",6]],[[]],null,[[],["directory",3]],null,[[]],null,null,[[["config",3]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["datapackbackend",3]],[[["formatter",3]],["result",6]],[[]],[[["llir",3],["compilecontext",3]],["directory",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["functionid",3]],[[]],null,null,[[],["functionid",3]],[[["functionid",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[]],null,[[],["string",3]],[[["blockid",3]],["option",4,[["functionid",3]]]],[[["functionid",3]],["option",4,[["rc",3,[["functionident",3]]]]]],[[]],null,[[]],[[["functionid",3],["vec",3,[["minecraftcommand",4]]]]],[[]],[[]],[[]],[[["functionid",3]],["bool",15]],[[["rc",3,[["str",15]]]]],[[],["functionid",3]],[[["functionid",3]]],[[],["functionid",3]],[[["blockid",3]],["functionid",3]],[[["functionid",3],["string",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["minecraftcommand",4]]],[[]],[[]],[[],["directory",3]],[[["node",4]],["vec",3,[["minecraftcommand",4]]]],null,[[["formatter",3]],["result",6]],[[]],null,null,[[["vec",3,[["minecraftcommand",4]]]],["option",4,[["minecraftcommand",4]]]],[[["condition",4],["option",4,[["minecraftcommand",4]]]],["minecraftcommand",4]],[[["condition",4],["vec",3]]],[[["node",4]]],[[["binaryoperation",3]]],[[["branch",3]]],[[["call",3]]],[[["condition",4]]],[[["executeraw",3]]],[[["faststore",3]]],[[["faststorefromresult",3]]],[[["function",3]]],[[],["bool",15]],[[],["bool",15]],[[["writemessage",3]]],[[]],null,[[["compilecontext",3],["llir",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[["formattedtext",3],["scoreboardcontext",3]],["string",3]],[[]],[[]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["jsonformatcomponent",4],["scoreboardcontext",3]]],[[["scoreboardplayer",3]]],[[["str",15]]],null,[[]],[[]],[[]],null,[[],["scoreboardconstants",3]],[[["formatter",3]],["result",6]],[[]],[[["i32",15],["scoreboardcontext",3]],["scoreboardplayer",3]],[[]],[[["i32",15]],["rc",3,[["str",15]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["scoreboardplayerid",4]],["rc",3,[["str",15]]]],[[]],[[]],[[]],[[]],[[],["scoreboardplayerid",4]],[[]],[[["scoreboardplayerid",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]],["rc",3,[["str",15]]]],[[["scoreboard",4]],["rc",3,[["str",15]]]],[[]],[[["itemid",3]]],[[]],[[["scoreboard",4]],["rc",3,[["str",15]]]],[[["itemid",3]],["rc",3,[["str",15]]]],[[],["scoreboardplayer",3]],[[]],[[]],[[]],[[["scoreboardplayerid",4]],["bool",15]],[[["string",3],["buildmode",4]]],null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[],["str",15]],null,[[]],[[]],[[],["templatedata",3]],[[]],[[["formatter",3]],["result",6]],[[["config",3]]],[[]],[[]],null,null,[[["templatedata",3]],["string",3]],[[["templatedata",3]],["string",3]],[[["templatedata",3]],["string",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"Backend"],[4,"ObjectiveCriterion"],[4,"MinecraftRange"],[4,"MinecraftCommand"],[4,"ExecuteComponent"],[3,"FunctionIdent"],[3,"ScoreboardPlayer"],[13,"IfScoreRelation"],[13,"IfScoreRange"],[13,"Execute"],[13,"ScoreboardSetFromResult"],[13,"RawCommand"],[13,"ScoreboardAdd"],[13,"Function"],[13,"JsonMessage"],[13,"ScoreboardRemove"],[13,"ScoreboardOperation"],[13,"ScoreboardSet"],[13,"ScoreboardOperationAdd"],[13,"ScoreboardSetEqual"],[13,"Minimum"],[13,"Maximum"],[13,"Equal"],[13,"NotEqual"],[13,"Range"],[4,"StringEscape"],[13,"Str"],[13,"Char"],[3,"Datapack"],[3,"DatapackBackend"],[3,"FunctionId"],[3,"GeneratedFunction"],[3,"FunctionContext"],[3,"DatapackGenerator"],[3,"JsonTextWriter"],[3,"ScoreboardConstants"],[4,"ScoreboardPlayerId"],[3,"ScoreboardContext"],[13,"Normal"],[13,"Temporary"],[8,"Stringify"],[3,"TemplateData"]]},\
"debris_common":{"doc":"Common items used by the compiler","t":[12,4,13,13,4,13,13,13,13,13,13,3,6,3,3,3,3,13,13,13,13,4,13,3,13,13,13,13,4,13,13,13,13,3,13,4,13,13,13,0,12,5,12,0,0,12,12,12,12,0,0,0,12,12,12,12,12,12,12,12,12,0,12,12,12,12,12,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,4,3,13,13,13,13,4,13,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,18,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11],"n":["0","Accessor","Add","And","BuildMode","CmpEq","CmpGe","CmpGt","CmpLe","CmpLt","CmpNe","Code","CodeId","CodeRef","CompilationId","CompileContext","Config","Debug","Debug","Div","Full","Ident","Index","InputFiles","Mod","Mul","None","Not","OptMode","Or","Path","Promote","Release","Span","Special","SpecialIdent","Sub","UnaryMinus","Value","accessor","build_mode","character_width_at_index","compilation_id","compile_context","config","config","current_uid","default_scoreboard_name","file","graph","ident","input_file","input_files","input_files","input_files","len","opt_mode","path","project_description","project_name","source","span","start","0","0","0","0","Accessor","Path","borrow","borrow_mut","clone","clone_into","eq","equals_ident","equivalent","fmt","from","from","hash","into","ne","to_owned","try_from","try_into","type_id","0","0","CompilationId","CompileContext","add_input_file","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","compilation_id","config","current_uid","eq","equivalent","fmt","fmt","from","from","get_input_file","get_unique_id","hash","input_files","into","into","ne","new","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BuildMode","Config","Debug","Debug","Full","None","OptMode","Release","aggressive_function_inlining","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_mode","clone","clone","clone_into","clone_into","default","default","default_scoreboard_name","disable_optimization","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","into","into","into","is_debug","is_release","ne","opt_mode","opt_mode","project_description","project_name","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_build_mode","GraphDfs","GraphLoopDetector","GraphMatrix","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","default","default","edges","fmt","from","from","from","get_row","get_row_mut","has_loop","index","index_mut","into","into","into","iter","iter_order","new","rows","size","to_visit","to_visit","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","visited","Add","And","CmpEq","CmpGe","CmpGt","CmpLe","CmpLt","CmpNe","Div","Ident","Index","Mod","Mul","Not","Or","Promote","Special","SpecialIdent","Sub","UnaryMinus","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","ne","new","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","Code","CodeId","CodeRef","InputFile","InputFiles","add_input","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","code","default","eq","equivalent","file","fmt","fmt","fmt","fmt","from","from","from","from","get_code","get_code_ref","get_input","get_input_offset","get_offset","get_relative_span","get_span","get_span_code","get_span_file","get_span_line","get_span_str","get_total_offset","hash","input_files","input_files","into","into","into","into","ne","new","offset","path","source","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","EMPTY","Span","at_start","borrow","borrow_mut","char_bounds","character_width_at_index","clone","clone_into","dropped_left_n","end","eq","equivalent","fmt","from","hash","into","is_empty","len","len","ne","new","start","start","to_owned","try_from","try_into","type_id","until"],"q":["debris_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::Accessor","debris_common::Ident","","","debris_common::accessor","","","","","","","","","","","","","","","","","","","debris_common::accessor::Accessor","debris_common::compile_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::ident","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::ident::Ident","","","debris_common::input_file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::span","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An accessor represents a dotted path","","","The build mode for this compilation","","","","","","","A code object contains the source code and optionally a …","The type of a code id, currently just a usize","A handy object to work in a specific input file","The id of the current compilation unit. Used to generate …","The Compilation context stores various information about …","Holds data about the user specified configuration","Debug build: produces slower code, but contains various …","Some optimizations, but no aggressive inlining (default)","","Full optimizations","identifier for a value","","Keeps track of all input files and allows to make cheap …","","","No optimizations","","How to optimize the code","","A path like a.b.c","","drops most safety checks, lower readability","A span which uniquely specifies a span of characters in …","","Every special identifier","","","Since Idents have be cloned quite often a generic value is …","","","Utility function to get the width of a character at a …","","","","The current config which specifies how to compile","The current unique id system. Note that this is different …","","","Very basic graph implementation which is specialized for …","","Input files are used to store the files required for …","","All input files which are used in this compiler","The code files","","","","","","","","","","","","","An accessor represents a dotted path","A path like a.b.c","","","","","","","","","","","","","","","","","","","","The id of the current compilation unit. Used to generate …","The Compilation context stores various information about …","","","","","","","","","","The current config which specifies how to compile","The current unique id system. Note that this is different …","","","","","","","","Returns a unique id","","The code files","","","","","","","","","","","","","The build mode for this compilation","Holds data about the user specified configuration","Debug build: produces slower code, but contains various …","Some optimizations, but no aggressive inlining (default)","Full optimizations","No optimizations","How to optimize the code","drops most safety checks, lower readability","Returns whether the optimizer should perform aggressive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the current build mode is debug","Whether the current build mode is release","","Returns the default optimization mode for this build mode","","","","","","","","","","","","","","","","Replaces the build mode and changes the opt mode to the …","A struct that implements a non-recursive …","Detects loops in a graph. This is a custom struct in order …","A directed graph backed by a matrix. <code>T</code> is the type of …","","","","","","","","","","Returns the indices of all <code>Option::Some</code> variants in the …","","","","","","","Returns <code>true</code> if the graph has a loop which is reachable …","","","","","","","","Creates a new <code>GraphMatrix</code> with a <code>size</code> rows and <code>size</code> …","","","","","","","","","","","","","","","","","","","","","","","","identifier for a value","","","","","","","","Every special identifier","","","Since Idents have be cloned quite often a generic value is …","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new identifier","","","","","","","","","","","","","","A code object contains the source code and optionally a …","The type of a code id, currently just a usize","A handy object to work in a specific input file","A single input file, implementation detail","Keeps track of all input files and allows to make cheap …","Adds a code unit and returns its ID","","","","","","","","","","","The code of the input file","","","","","","","","","","","","","","","Gets the input file with this id","Gets the offset of the file with this id","","Returns a span that is relative to the start of this code …","","","Searches for the input file that contains the given span","Returns the line in a file at which this span begins","Returns the str that corresponds to a span","Calculates the total byte offset","","","All input files which are used in this compiler","","","","","","","The global offset","","","","","","","","","","","","","","","","","A span which uniquely specifies a span of characters in …","Returns a span with the same start and a length of one","","","Since ranges are used to index into a str on a byte level, …","Utility function to get the width of a character at a …","","","","Returns the end of this span","","","","","","","Returns, whether this span is empty","Returns the length of this span","","","Creates a new <code>Span</code> from the starting character and its …","Returns the start of this span","","","","","","Constructs a new span which ranges from the start of this …"],"i":[1,0,2,2,0,2,2,2,2,2,2,0,0,0,0,0,0,3,4,2,4,0,5,0,2,2,4,2,0,2,6,2,3,0,5,0,2,2,5,0,7,0,8,0,0,8,8,7,9,0,0,0,9,10,8,11,7,12,7,7,12,0,11,13,14,15,16,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,13,1,0,0,8,1,8,1,8,1,1,1,8,8,8,1,1,1,8,1,8,8,8,1,8,1,8,1,8,1,1,1,8,1,8,1,8,0,0,3,4,4,4,0,3,4,3,4,7,3,4,7,7,3,4,3,4,3,7,7,4,3,4,7,3,4,7,3,4,4,7,3,4,7,3,4,7,3,3,7,3,7,7,7,3,4,4,3,4,7,3,4,7,3,4,7,7,0,0,0,17,18,19,17,18,19,17,18,19,17,17,17,18,19,17,17,18,17,17,17,18,19,19,19,17,17,17,18,19,17,18,19,17,18,19,17,18,19,18,2,2,2,2,2,2,2,2,2,0,5,2,2,2,2,2,5,0,2,2,5,5,2,5,2,5,2,5,2,5,5,2,5,2,5,5,2,2,5,5,5,2,5,2,5,2,5,5,5,2,5,2,5,2,5,2,5,2,14,15,16,0,0,0,0,0,10,12,9,20,10,12,9,20,10,9,9,20,10,12,12,9,12,9,20,10,12,9,20,10,9,10,10,10,9,9,9,10,10,10,10,10,12,9,10,12,9,20,10,12,10,20,12,12,9,12,9,20,10,12,9,20,10,12,9,20,10,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["str",15]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["accessor",4]],[[]],[[["accessor",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["ident",4]]],[[]],[[]],[[["accessor",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["code",3]],["codeid",6]],[[]],[[]],[[]],[[]],[[],["compilationid",3]],[[]],[[["compilationid",3]],["ordering",4]],null,null,null,[[["compilationid",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["codeid",6]],["code",3]],[[],["usize",15]],[[]],null,[[]],[[]],[[["compilationid",3]],["bool",15]],[[["compilationid",3]]],[[["compilationid",3]],["option",4,[["ordering",4]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["buildmode",4]],[[],["optmode",4]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],[[["buildmode",4]],["bool",15]],[[["optmode",4]],["bool",15]],[[["config",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["config",3]],["bool",15]],[[],["optmode",4]],null,null,null,[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["buildmode",4]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["graphloopdetector",3]],[[],["graphdfs",3]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["graphmatrix",3],["u32",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["graphmatrix",3]]],null,[[["usize",15]]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["ident",4]],[[],["specialident",4]],[[]],[[]],[[["ident",4]],["bool",15]],[[],["bool",15]],[[["specialident",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["specialident",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",4]],["bool",15]],[[["asref",8,[["str",15]]]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[["code",3]],["codeid",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["coderef",3]],[[]],null,[[],["inputfiles",3]],[[["code",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["code",3]],[[["codeid",6]],["coderef",3]],[[["codeid",6]],["code",3]],[[["codeid",6]],["usize",15]],[[],["usize",15]],[[["span",3]],["span",3]],[[],["span",3]],[[["span",3]],["coderef",3]],[[["span",3]]],[[["span",3]],["usize",15]],[[["span",3]],["str",15]],[[],["usize",15]],[[]],null,null,[[]],[[]],[[]],[[]],[[["code",3]],["bool",15]],[[]],null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[],["span",3]],[[]],[[]],[[["str",15]]],[[["usize",15],["str",15]],["usize",15]],[[],["span",3]],[[]],[[["usize",15]],["span",3]],[[],["usize",15]],[[["span",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],null,[[["span",3]],["bool",15]],[[["usize",15],["usize",15]]],[[],["usize",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["span",3]]]],"p":[[3,"CompilationId"],[4,"SpecialIdent"],[4,"BuildMode"],[4,"OptMode"],[4,"Ident"],[4,"Accessor"],[3,"Config"],[3,"CompileContext"],[3,"CodeRef"],[3,"InputFiles"],[3,"Span"],[3,"Code"],[13,"Path"],[13,"Value"],[13,"Index"],[13,"Special"],[3,"GraphMatrix"],[3,"GraphLoopDetector"],[3,"GraphDfs"],[3,"InputFile"]]},\
"debris_error":{"doc":"Compilation error handling","t":[8,17,13,4,13,13,13,13,4,13,13,13,13,13,3,13,4,6,13,13,13,13,13,13,3,13,6,3,3,3,13,13,13,13,13,13,13,13,12,12,12,10,11,11,11,12,11,11,14,11,11,12,11,11,12,12,11,11,11,11,12,11,12,12,0,0,11,12,0,12,12,0,12,12,12,12,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,4,13,13,13,13,13,3,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["AsAnnotationSnippet","COLORED","CircularImport","CompileError","ComptimeUpdate","ComptimeVariable","ConstVariable","ContinueWithValue","ControlFlowRequires","Function","IndexOutOfBounds","InvalidComptimeBranch","InvalidControlFlow","InvalidConversion","LangError","LangError","LangErrorKind","LangResult","Loop","MissingModule","MissingStructInitializer","MissingVariable","NonComptimeVariable","NotYetImplemented","ParseError","ParseError","Result","SliceOwned","SnippetOwned","SourceAnnotationOwned","TupleMismatch","UnexpectedOperator","UnexpectedOverload","UnexpectedPattern","UnexpectedProperty","UnexpectedStructInitializer","UnexpectedType","UnreachableCode","annotation_type","annotation_type","annotations","as_annotation_snippet","as_annotation_snippet","borrow","borrow_mut","caller","clone","clone_into","debris_unimplemented","eq","equivalent","expected","fmt","fmt","fold","footer","format","from","from","from","id","into","kind","label","lang_error","macros","ne","origin","parse_error","range","slices","snippet","source","span","span","title","to_owned","to_string","to_string","try_from","try_into","type_id","utils","0","0","available","class","control_flow","ctx_span","declared","error","expected","expected","got","got","ident","index","lhs","lhs_count","max","missing","module","msg","notes","operator","parameters","path","property","requires","rhs","rhs_count","similar","strukt","strukt","target","this","value_class","value_span","var_name","var_name","var_name","var_name","CircularImport","ComptimeUpdate","ComptimeVariable","ConstVariable","ContinueWithValue","ControlFlowRequires","Function","IndexOutOfBounds","InvalidComptimeBranch","InvalidControlFlow","InvalidConversion","LangError","LangErrorKind","LangErrorSnippet","Loop","MissingModule","MissingStructInitializer","MissingVariable","NonComptimeVariable","NotYetImplemented","TupleMismatch","UnexpectedOperator","UnexpectedOverload","UnexpectedPattern","UnexpectedProperty","UnexpectedStructInitializer","UnexpectedType","UnreachableCode","as_annotation_snippet","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caller","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","footer","from","from","from","from","get_snippet","into","into","into","into","kind","ne","ne","new","slices","span","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","available","class","control_flow","ctx_span","declared","error","expected","expected","got","got","ident","index","lhs","lhs_count","max","missing","module","msg","notes","operator","parameters","path","property","requires","rhs","rhs_count","similar","strukt","strukt","target","this","value_class","value_span","var_name","var_name","var_name","var_name","ParseError","as_annotation_snippet","borrow","borrow_mut","clone","clone_into","eq","equivalent","expected","fmt","fmt","from","into","ne","span","to_owned","to_string","try_from","try_into","type_id","AnnotationOwned","SliceOwned","SnippetOwned","SourceAnnotationOwned","annotation_type","annotation_type","annotation_type","annotations","as_annotation","as_slice","as_snippet","as_source_annotation","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fold","footer","from","from","from","from","id","id","into","into","into","into","label","label","origin","range","slices","source","title","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","display_expected_of","display_expected_of_all","display_expected_of_any"],"q":["debris_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_error::CompileError","","debris_error::LangErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_error::lang_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_error::lang_error::LangErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_error::parse_error","","","","","","","","","","","","","","","","","","","","debris_error::snippet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_error::utils","",""],"d":["","Used to determine whether the error messages should use …","","A Compile Error","","","","","","","","","","","A generic error which gets thrown when compiling","An error which happens when compiling the input","Specifies a specific error reason","A result type which allows quick error throwing since no …","","","","","","","Thrown when parsing bad input","An error which happens when parsing the input","The result type used by most of the core functions","An owned counterpart to the <code>annotate_snippets::Slice</code> struct","An owned counterpart to the <code>annotate_snippets::Snippet</code> …","An owned counterpart to the …","","","","","","","","","","","","","","","","In debug mode stores the caller to provide additional …","","","","","","Symbols which were expected instead","","","","","","","","","","","The specific error","","","This module contains some macros for the most common error …","","","","","","Owned variants of the <code>annotate_snippets</code> library structs","","","The span where this error ocurred","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A generic error which gets thrown when compiling","Specifies a specific error reason","","","","","","","","","","","","","","","","","","","","","","","","","In debug mode stores the caller to provide additional …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The specific error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Thrown when parsing bad input","","","","","","","","Symbols which were expected instead","","","","","","The span where this error ocurred","","","","","","An owned counterpart to the …","An owned counterpart to the <code>annotate_snippets::Slice</code> struct","An owned counterpart to the <code>annotate_snippets::Snippet</code> …","An owned counterpart to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Displays a string which say that the elements of <code>collection</code>","",""],"i":[0,0,1,0,1,1,1,1,0,2,1,1,1,1,0,3,0,0,2,1,1,1,1,1,0,3,0,0,0,0,1,1,1,1,1,1,1,1,4,5,6,7,3,3,3,8,3,3,0,3,3,9,3,3,6,4,3,3,3,3,4,3,8,5,0,0,3,6,0,5,4,0,6,8,9,4,3,7,3,3,3,3,0,10,11,12,13,14,15,16,17,16,18,16,19,12,20,21,22,20,23,24,25,26,21,18,17,27,14,21,22,26,12,23,28,28,27,22,26,29,15,13,1,1,1,1,1,0,2,1,1,1,1,0,0,0,2,1,1,1,1,1,1,1,1,1,1,1,1,1,8,30,8,1,2,30,8,1,2,8,8,1,2,8,1,2,8,1,2,8,1,2,8,8,1,1,2,30,30,8,1,2,1,30,8,1,2,8,8,1,8,30,8,8,1,2,8,1,30,8,1,2,30,8,1,2,30,8,1,2,12,13,14,15,16,17,16,18,16,19,12,20,21,22,20,23,24,25,26,21,18,17,27,14,21,22,26,12,23,28,28,27,22,26,29,15,13,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,4,31,5,6,31,6,4,5,4,6,31,5,4,6,31,5,4,6,31,5,6,4,4,6,31,5,4,31,4,6,31,5,31,5,6,5,4,6,4,4,6,31,5,4,6,31,5,4,6,31,5,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["snippetowned",3]],[[]],[[]],null,[[],["compileerror",4]],[[]],null,[[["compileerror",4]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[["compilecontext",3]],["string",3]],[[]],[[["parseerror",3]]],[[["langerror",3]]],null,[[]],null,null,null,null,[[["compileerror",4]],["bool",15]],null,null,null,null,null,null,null,null,null,[[]],[[["compilecontext",3]],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["langerror",3]],[[],["langerrorkind",4]],[[],["controlflowrequires",4]],[[]],[[]],[[]],[[["langerror",3]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[["controlflowrequires",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[["span",3],["compilecontext",3]],["langerrorsnippet",3]],[[]],[[]],[[]],[[]],null,[[["langerror",3]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[["langerrorkind",4],["span",3]]],null,null,[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[]],[[]],[[],["parseerror",3]],[[]],[[["parseerror",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["parseerror",3]],["bool",15]],null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["annotation",3]],[[["inputfiles",3]],["slice",3]],[[["inputfiles",3]],["snippet",3]],[[["inputfiles",3]],["sourceannotation",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["string",3]],[[],["string",3]],[[],["string",3]]],"p":[[4,"LangErrorKind"],[4,"ControlFlowRequires"],[4,"CompileError"],[3,"SnippetOwned"],[3,"SourceAnnotationOwned"],[3,"SliceOwned"],[8,"AsAnnotationSnippet"],[3,"LangError"],[3,"ParseError"],[13,"ParseError"],[13,"LangError"],[13,"UnexpectedStructInitializer"],[13,"NonComptimeVariable"],[13,"InvalidControlFlow"],[13,"ComptimeVariable"],[13,"UnexpectedType"],[13,"MissingModule"],[13,"UnexpectedOverload"],[13,"UnexpectedPattern"],[13,"IndexOutOfBounds"],[13,"UnexpectedOperator"],[13,"TupleMismatch"],[13,"MissingStructInitializer"],[13,"CircularImport"],[13,"NotYetImplemented"],[13,"MissingVariable"],[13,"UnexpectedProperty"],[13,"InvalidConversion"],[13,"ConstVariable"],[3,"LangErrorSnippet"],[3,"AnnotationOwned"]]},\
"debris_hir":{"doc":"High-level intermediate representation","tn":["COMMENT","DebrisParser","EOI","Hir","HirContext","HirFile","IdentifierPath","ImportDependencies","Rule","SpannedIdentifier","WHITESPACE","_PEST_GRAMMAR_DebrisParser","accessor","assignment","assignment_comptime","assignment_let","assignment_pattern","assignment_tuple","attribute_list","block","bool","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","clone","clone_into","cmp","code_id","code_id","compare_eq","compare_ge","compare_gt","compare_le","compare_lt","compare_ne","compile_context","comptime_prefix","control_flow","control_flow_break","control_flow_continue","control_flow_kw","control_flow_return","default","dependencies","eq","equivalent","exp_infix","exp_parens","exp_prefix","exp_primary","expression","expression_base","expression_without_struct","file_offset","fixed","fmt","fmt","fmt","fn_pattern","format_string","format_string_text","format_string_var","from","from","from","from","function_call","function_def","function_signature","get","hash","hir_context","hir_impl","hir_nodes","ident","identifier","idents","if_branch","import","imported_modules","in_place_update","in_place_update_modifier","inf_loop","infix_and","infix_comparison","infix_divide","infix_minus","infix_modulo","infix_or","infix_plus","infix_times","input_file","insert","integer","into","into","into","into","is_empty","item","iter","keyword","len","loop_block","main_function","main_function","module","modules","object","object_def","param_list","parameter_list","parse","partial_cmp","prefix_minus","prefix_not","prefix_value","program","span","spans","statement","string","string_inner","struct_def","struct_initialization","struct_initializer_pair","struct_initializer_pairs","struct_items","struct_variables","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tuple_initialization","tuple_pattern","type_def","type_id","type_id","type_id","type_id","type_pattern","type_pattern_list","value","value_update","variable_declaration","HirContext","add_import_file","borrow","borrow_mut","compile_context","dependencies","file_offset","fmt","from","get_ident","input_file","into","new","normalize_pest_span","span","try_from","try_into","type_id","HirFile","PREC_CLIMBER","__private_field","borrow","borrow","borrow_mut","borrow_mut","code_id","deref","fmt","from","from","from_code","get_accessor","get_attribute","get_block","get_conditional_branch","get_control_flow","get_expression","get_expression_primary","get_function_call","get_function_def","get_identifier_path","get_import","get_infinite_loop","get_item","get_module","get_object","get_object_def","get_operator","get_param_list","get_pattern","get_property_declaration","get_statement","get_struct_def","get_struct_initialization","get_tuple_initialization","get_type_pattern","get_unary_operator","get_value","into","into","main_function","try_from","try_from","try_into","try_into","type_id","type_id","And","Attribute","BinaryOperation","Block","Block","Bool","Break","Comparison","Comptime","ConditionalBranch","ConditionalBranch","Continue","ControlFlow","Divide","Eq","Fixed","FormatString","Function","Function","FunctionCall","FunctionCall","Ge","Gt","HirBlock","HirComparisonOperator","HirConditionalBranch","HirConstValue","HirControlFlow","HirControlKind","HirDeclarationMode","HirExpression","HirFormatStringMember","HirFunction","HirFunctionCall","HirImport","HirInfiniteLoop","HirInfix","HirInfixOperator","HirItem","HirModule","HirObject","HirParameterDeclaration","HirPrefix","HirPrefixOperator","HirPropertyDeclaration","HirStatement","HirStruct","HirStructInitialization","HirTupleInitialization","HirTypePattern","HirVariableInitialization","HirVariablePattern","HirVariableUpdate","Import","InfiniteLoop","InfiniteLoop","Integer","Le","Let","Lt","Minus","Minus","Module","Modulo","Ne","Not","Object","Or","Path","Path","Path","Plus","Return","Statement","String","String","Struct","StructInitialization","Times","Tuple","Tuple","TupleInitialization","UnaryOperation","Value","Variable","Variable","VariableDecl","VariableUpdate","accessor","accessor","accessor","attributes","attributes","attributes","block","block","block","block_negative","block_positive","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","condition","datatype","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_ident","get_raw_special_ident","get_special_ident","id","ident","ident","ident","ident","ident","ident","ident","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_comptime","kind","last_item_span","mode","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","objects","objects","operator","operator","parameter_span","parameters","parameters","parameters_span","pattern","pattern","properties","return_type","return_type_span","return_value","returns","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","statements","takes_value","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","values","values","span","span","span","span","span","value","value","value","value","value","0","0","0","0","0","0","0","0","0","lhs","operation","operation","rhs","value","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","parameters","return_type","span","span","values","0","0","IdentifierPath","SpannedIdentifier","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","display","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","hash","hash","idents","idents","into","into","last","ne","ne","new","new","single_ident","span","span","span_without_last","split_at_last","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["debris_hir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_hir::hir_context","","","","","","","","","","","","","","","","","","debris_hir::hir_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_hir::hir_nodesdebris_hir::hir_nodes::HirConstValue","","","","","","","","","","debris_hir::hir_nodes::HirExpression","","","","","","","","","","","","","","debris_hir::hir_nodes::HirFormatStringMember","","debris_hir::hir_nodes::HirInfixOperator","debris_hir::hir_nodes::HirItem","","debris_hir::hir_nodes::HirObject","","","debris_hir::hir_nodes::HirStatement","","","","","","","","debris_hir::hir_nodes::HirTypePattern","","","","","","debris_hir::hir_nodes::HirVariablePattern","","debris_hir::identifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The pest parser which can parse the grammar file","","The hir representation of an input file and all of its …","Contains state data that are used during the hir …","This struct stores the high-level intermediate …","A list of <code>SpannedIdentifier</code>s, can be a dotted path","Keeps track of all imported modules, uses indexes as keys","","Identifies a variable or value based on its span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the high-level representation from the pest …","Defines every node used in the hir representation","","","","","","","","","","","","","","","","","","","Inserts a dependency and the code span and returns its …","","","","","","","","","","","","","","","","","","","","","","","","","","","The spans that correspond to the modules. Access via the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains state data that are used during the hir …","","","","","","","","","","","","","","","","","","This struct stores the high-level intermediate …","","","","","","","","","","","","Creates a <code>HirFile</code> from code.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logical and","Attributes are a form of metadata that can be applied to …","A binary operation, for example <code>a + b</code>","A block which returns something","A normal block","","","Any comparison like &lt;, &gt;, &lt;=, &gt;=, ==, !=","","","A normal if statement","","Controls the program flow","Mathematical division","","","","A function, like <code>fn(Int, Int) -&gt; Int</code>","","A function call, for example <code>foo()</code> or <code>path.to.foo()</code>","A function call, which can be both an expression and …","","","A block of code. Usually contained withing a pair of {} …","Any supported comparison operator","An if-branch which checks a condition and runs code …","A constant literal, already parsed","Represents a control flow statement like return or break","","","Any expression","","A function, which contains other statements","Any function call, can be dotted","Marks an import statement. The id specifies the index of …","An infinite loop (Can be exited using control keywords …","Holds an infix operator combined with its span","Any operator that can be used as an infix","Any Item","A module with an associated name","","Holds a variable type declaration like <code>foo: String</code> This is …","Holds a prefix operator combined with its span","Any prefix operator","Declaration of a property in a struct definition","Any statement, the difference to an expression is that a …","A struct definition","Creates a Struct Object from a struct","","Any pattern that is allowed to specify a function …","Sets a variable like <code>let a = expression();</code>","","Similar to <code>HirVariableInitialization</code>, however this node …","Imports another debris file","","","","","","","Mathematical subtraction","Mathematical minus","","Mathematical modulo","","Logical negation","","Logical or","","A path to a variable, for example <code>for.bar.a</code>","A normal type, like <code>Int</code>","Mathematical addition","","","","","","","Mathematical multiplication","","","","A unary operation, for example <code>-a</code>","A literal value, for example <code>2.0</code> or <code>&quot;Hello World&quot;</code>","","A variable, for example <code>a</code>","A variable declaration, for example <code>let foo = 1</code>","A write to an already existing variable","","","","","","","","The block containing all statements of the function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of the property","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the associated Ident","Returns the associated <code>SpecialIdent</code>","Returns the associated <code>SpecialIdent</code>","","","","The identifier inside of the struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the span of the item in the block which is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The objects that got declared within this block","","","","","","","","","","All declared properties of this struct","","","The returned value:","","","","","","","","","","","","","","","","The span of the declaration","","","","","","","","","The statements of this block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A list of <code>SpannedIdentifier</code>s, can be a dotted path","Identifies a variable or value based on its span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>SpannedIdentifier</code> from the Span","Creates a new <code>IdentifierPath</code> from the vec of identifiers","","","","","","","","","","","","",""],"i":[1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,2,3,4,1,2,3,4,1,1,1,1,5,3,1,1,1,1,1,1,6,1,1,1,1,1,1,4,6,1,1,1,1,1,1,1,1,1,6,1,1,3,4,1,1,1,1,1,2,3,4,1,1,1,4,1,0,0,0,1,0,7,1,1,3,1,1,1,1,1,1,1,1,1,1,1,6,4,1,1,2,3,4,4,1,4,1,4,1,5,3,1,4,1,1,1,1,2,1,1,1,1,1,8,4,1,1,1,1,1,1,1,1,1,1,1,2,3,4,1,2,3,4,1,1,1,1,2,3,4,1,1,1,1,1,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,9,5,9,5,9,5,9,5,5,9,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,9,5,5,9,5,9,5,9,10,0,11,11,12,13,14,10,15,11,12,14,12,10,16,13,13,17,18,11,12,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,11,12,13,16,15,16,10,19,18,10,16,19,20,10,21,11,17,10,14,20,13,22,18,11,10,21,17,11,11,11,22,11,12,12,23,24,25,26,27,28,29,26,28,30,30,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,16,10,31,19,32,14,35,15,17,16,10,31,19,32,14,35,15,17,30,38,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,34,13,22,16,10,31,19,32,33,14,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,19,16,10,33,33,35,38,23,26,27,28,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,30,34,40,36,13,22,10,31,32,33,34,29,35,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,40,27,31,32,26,23,26,23,36,37,27,26,26,40,14,13,21,11,12,17,25,31,32,33,34,29,35,36,37,38,23,30,24,39,40,26,27,28,40,14,16,10,31,19,32,14,35,15,17,14,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,35,13,22,16,10,31,19,32,33,14,34,29,35,15,21,36,37,38,23,30,24,39,11,12,17,40,25,26,27,28,18,20,36,37,24,39,41,42,43,44,45,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,74,74,75,75,76,77,0,0,8,7,8,7,8,7,8,7,7,8,7,8,7,8,7,8,8,7,7,8,7,7,7,8,7,7,8,7,8,7,7,7,8,7,7,8,7,8,7,8,7,8,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["rule",4]],[[]],[[["rule",4]],["ordering",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["importdependencies",3]],null,[[["rule",4]],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ident",4],["span",3]],["usize",15]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[]],null,[[],["usize",15]],null,null,null,null,null,null,null,null,null,[[["rule",4],["str",15]],["result",4,[["pairs",3,[["rule",4]]],["error",3,[["rule",4]]]]]],[[["rule",4]],["option",4,[["ordering",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[["spannedidentifier",3]],["usize",15]],[[]],[[]],null,null,null,[[["formatter",3]],["result",6]],[[]],[[["spannedidentifier",3]],["ident",4]],null,[[]],[[["coderef",3],["compilecontext",3],["importdependencies",3]]],[[["span",3],["usize",15]],["span",3]],[[["span",3]],["span",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],null,[[],["precclimber",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[["coderef",3],["compilecontext",3],["importdependencies",3]],["result",6]],[[["hircontext",3],["pairs",3,[["rule",4]]]],["hirexpression",4]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["attribute",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirblock",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirconditionalbranch",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hircontrolflow",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirexpression",4]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirexpression",4]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirfunctioncall",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]],["vec",3,[["attribute",3]]]],["result",6,[["hirfunction",3]]]],[[["hircontext",3],["pairs",3,[["rule",4]]]],["result",6,[["identifierpath",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["hirimport",3]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirinfiniteloop",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hiritem",4]]]],[[["hircontext",3],["pair",3,[["rule",4]]],["vec",3,[["attribute",3]]]],["result",6,[["hirmodule",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]],["vec",3,[["attribute",3]]]],["result",6,[["hirobject",4]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirobject",4]]]],[[["usize",15],["pair",3]],["hirinfix",3]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["vec",3,[["hirparameterdeclaration",3]]]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirvariablepattern",4]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirpropertydeclaration",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirstatement",4]]]],[[["hircontext",3],["pair",3,[["rule",4]]],["vec",3,[["attribute",3]]]],["result",6,[["hirstruct",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirstructinitialization",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirtupleinitialization",3]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirtypepattern",4]]]],[[["hircontext",3],["pair",3,[["rule",4]]]],["hirprefix",3]],[[["hircontext",3],["pair",3,[["rule",4]]]],["result",6,[["hirexpression",4]]]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hircomparisonoperator",4]],[[],["hirinfixoperator",4]],[[],["hirinfix",3]],[[],["hirprefixoperator",4]],[[],["hirprefix",3]],[[],["hircontrolkind",4]],[[],["hirparameterdeclaration",3]],[[],["hirdeclarationmode",4]],[[],["hirtypepattern",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["hirconstvalue",4]],["bool",15]],[[["hirformatstringmember",4]],["bool",15]],[[["hircomparisonoperator",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirprefixoperator",4]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hircontrolkind",4]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirdeclarationmode",4]],["bool",15]],[[["hirvariablepattern",4]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirstructinitialization",3]],["bool",15]],[[["hirtupleinitialization",3]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hiritem",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ident",4]],[[],["specialident",4]],[[],["specialident",4]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["span",3]],null,[[["hirconstvalue",4]],["bool",15]],[[["hirformatstringmember",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirvariablepattern",4]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirstructinitialization",3]],["bool",15]],[[["hirtupleinitialization",3]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hiritem",4]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["span",3]],null,[[],["bool",15]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["spannedidentifier",3]],[[],["identifierpath",3]],[[]],[[]],[[["compilecontext",3]],["string",3]],[[["spannedidentifier",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["span",3]]],[[]],[[["spannedidentifier",3]]],[[]],[[]],[[]],null,[[]],[[]],[[],["spannedidentifier",3]],[[["spannedidentifier",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[["span",3]]],[[["vec",3,[["spannedidentifier",3]]]]],[[],["option",4,[["spannedidentifier",3]]]],[[],["span",3]],null,[[],["option",4,[["span",3]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Rule"],[3,"DebrisParser"],[3,"Hir"],[3,"ImportDependencies"],[3,"HirFile"],[3,"HirContext"],[3,"IdentifierPath"],[3,"SpannedIdentifier"],[3,"PREC_CLIMBER"],[4,"HirInfixOperator"],[4,"HirExpression"],[4,"HirStatement"],[4,"HirConstValue"],[4,"HirControlKind"],[4,"HirDeclarationMode"],[4,"HirComparisonOperator"],[4,"HirTypePattern"],[4,"HirObject"],[4,"HirPrefixOperator"],[4,"HirItem"],[4,"HirVariablePattern"],[4,"HirFormatStringMember"],[3,"HirFunctionCall"],[3,"HirStructInitialization"],[3,"Attribute"],[3,"HirFunction"],[3,"HirStruct"],[3,"HirModule"],[3,"HirInfiniteLoop"],[3,"HirConditionalBranch"],[3,"HirInfix"],[3,"HirPrefix"],[3,"HirImport"],[3,"HirControlFlow"],[3,"HirParameterDeclaration"],[3,"HirVariableInitialization"],[3,"HirVariableUpdate"],[3,"HirPropertyDeclaration"],[3,"HirTupleInitialization"],[3,"HirBlock"],[13,"Integer"],[13,"Bool"],[13,"Fixed"],[13,"String"],[13,"FormatString"],[13,"Variable"],[13,"Path"],[13,"Value"],[13,"Block"],[13,"FunctionCall"],[13,"ConditionalBranch"],[13,"StructInitialization"],[13,"TupleInitialization"],[13,"InfiniteLoop"],[13,"BinaryOperation"],[13,"UnaryOperation"],[13,"String"],[13,"Variable"],[13,"Comparison"],[13,"Object"],[13,"Statement"],[13,"Function"],[13,"Struct"],[13,"Module"],[13,"VariableDecl"],[13,"VariableUpdate"],[13,"FunctionCall"],[13,"Import"],[13,"ControlFlow"],[13,"Block"],[13,"ConditionalBranch"],[13,"InfiniteLoop"],[13,"Path"],[13,"Function"],[13,"Tuple"],[13,"Path"],[13,"Tuple"]]},\
"debris_lang":{"doc":"The Debris compiler.","t":[5,5,5],"n":["debug_run","init","main"],"q":["debris_lang","",""],"d":["Compiles the file <code>test.txt</code> into llir","",""],"i":[0,0,0],"f":[[[["compileconfig",3]],["result",6,[["llir",3]]]],[[],["compileconfig",3]],[[]]],"p":[]},\
"debris_llir":{"doc":"Low-level intermediate representation","t":[12,13,3,13,13,13,3,13,13,13,13,3,13,6,13,13,8,6,3,3,13,13,13,13,13,4,13,4,8,10,0,12,0,12,10,0,0,12,10,12,14,10,0,0,0,0,0,12,14,12,0,14,0,10,0,0,12,0,12,12,0,0,0,12,12,3,4,6,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,8,6,3,8,10,11,11,11,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,10,12,11,11,11,11,11,11,11,11,11,11,5,12,3,8,6,3,8,8,11,11,11,11,11,11,14,10,11,11,11,11,14,14,14,12,11,11,10,5,12,10,11,11,11,11,11,11,11,3,4,13,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,4,13,3,3,6,13,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,12,12,3,3,3,12,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,14,11,3,11,11,12,11,11,11,12,11,11,11,12,11,11,11,11,12,13,13,3,13,3,13,3,13,13,13,4,13,13,3,4,3,13,3,13,3,4,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,14,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,13,13,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,11,11,11,11,5,11,11,11,11,11,11,12,11,11,11,12,11,11,5,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,3,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,12,12,12,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,14,11,11,11,11,11,14,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,3,11,14,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,3,3,6,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,6,0,0,0,0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,12,3,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,4,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,3,17,8,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,10,11,12,11,11,11,11,12,12,11,11,11,11,11,11,17,12,13,13,13,13,13,13,13,3,3,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,5,3,18,11,11,12,11,11,11,11,11,11,12,5,5,5,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,12,13,13,3,4,13,12,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,5,12,3,11,11,11,11,11,11,12,11,11,11,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,13,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,3,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,13,13,13,13,13,13,3,3,13,13,13,13,13,13,13,13,13,4,13,4,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["0","Any","CallGraph","Class","ComptimeBool","ComptimeInt","DebrisObject","DynamicBool","DynamicInt","FormatString","Function","Llir","Module","NativeFunctionId","Never","Null","ObjectPayload","ObjectProperties","ObjectRef","Runtime","String","Struct","StructObject","Tuple","TupleObject","Type","Type","TypePattern","ValidPayload","as_any","class","class","debris_object","entry_function","eq","error_utils","function_interface","functions","get_class","graph","impl_class","into_object","json_format","llir_builder","llir_function_builder","llir_impl","llir_nodes","load_blocks","log","loop_detector","macro_impl_class","match_object","memory","memory_layout","objects","opt","payload","runtime","runtime","scheduled_blocks","type_context","types","utils","visitor","0","Class","ClassKind","ClassRef","Function","Struct","StructObject","Tuple","TupleObject","Type","borrow","borrow","borrow_mut","borrow_mut","comptime_encodable","diverges","diverges","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_property","get_property","into","into","is_bool","is_function","is_never","is_null","is_valid_param","kind","matches","matches","matches_exact","matches_exact","matches_type","ne","ne","new_empty","new_obj_from_allocator","pattern_runtime_encodable","properties","runtime_encodable","set_property","to_string","to_string","try_from","try_from","try_into","try_into","typ","type_id","type_id","0","0","0","0","strukt","tuple","0","DebrisObject","ObjectPayload","ObjectProperties","ObjectRef","ValidPayload","as_any","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone_into","create_class","create_class","deref","downcast_class","downcast_payload","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","from_payload","get_class","get_property","get_property","get_property","into","into","into_object","into_result","memory_layout","payload","runtime_class","runtime_class","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unexpected_type","0","DebrisFunctionInterface","DowncastArray","NormalizedFnSig","NormalizedFunction","ToFunctionInterface","ValidReturnType","borrow","borrow","borrow_mut","borrow_mut","call","call_raw","count","downcast_array","from","from","from","handle_raw_result","impl_downcast_array","impl_map_valid_return_type","impl_to_function_interface","inner_fn","into","into","into_result","make_overload","required_parameter_fn","to_normalized_function","to_normalized_function","try_from","try_from","try_into","try_into","type_id","type_id","FormattedText","JsonFormatComponent","RawText","Score","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","into","into","ne","ne","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","BlockIdGenerator","CallStack","FunctionGenerics","FunctionParameter","Generic","LlirBuilder","MonomorphizedFunction","NativeFunctionId","Parameter","_set_obj","block_id","block_id_generator","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder_set_obj","call_stack","class","compile_context","compile_context","compiled_contexts","default","default","fmt","fmt","fmt","fmt","force_compile_context","from","from","from","from","from","from","function_parameters","functions","functions","generic_instantiation","get_obj","get_obj_opt","global_namespace","instantiations","into","into","into","into","into","into","item_id_allocator","mir_function","native_functions","new","new","next_id","next_id","object_mapping","return_value","return_values_arena","runtime","span","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_context","type_id","type_id","type_id","type_id","type_id","type_id","class","index","index","obj_id","span","span","template","FunctionBuilderRuntime","LlirFunctionBuilder","ParameterPartition","block_id","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","call_builtin_function","call_native_function","compile_native_function","contexts","copy_if_runtime","data","declare_obj","default","fmt","fmt","from","from","from","handle_branch","handle_builtin_function_call","handle_dynamic_branch","handle_function_call","handle_goto","handle_module","handle_native_function_call","handle_node","handle_primitive_declaration","handle_property_access","handle_runtime_copy","handle_runtime_promotion","handle_static_branch","handle_variable_update","into","into","into","left","local_runtime","new","new","nodes","pivot","promote_obj","register_ticking_function","right","set_obj","ticking_functions","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_parameters","verify_property_exists","verify_tuple_length","verify_value","verify_value_comptime","Llir","borrow","borrow_mut","entry_function","fmt","fmt","from","functions","get_function_calls","into","new","runtime","to_string","try_from","try_into","type_id","0","Actionbar","And","BinaryOperation","BinaryOperation","Branch","Branch","Call","Call","Chat","Compare","Condition","Condition","Execute","ExecuteRaw","ExecuteRawComponent","FastStore","FastStore","FastStoreFromResult","FastStoreFromResult","Function","Node","Nop","Or","Read","Read","ReadWrite","ReadWrite","ScoreboardValue","String","Subtitle","Title","VariableAccess","VariableAccessMut","Write","Write","Write","WriteMessage","WriteTarget","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calls_function","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","condition","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","has_call","id","id","id","id","id","inner_iter_with_guarantee","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_effect_free","is_effect_free","is_empty","is_simple","iter","iter_mut","iter_with_guarantee","lhs","make_access_visitor","message","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg_branch","nodes","nodes","not","operation","pos_branch","reads_from","return_value","rhs","scoreboard","scoreboard","scoreboard","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variable_accesses","variable_accesses","variable_accesses_mut","variable_accesses_mut","writes_to","0","0","comparison","lhs","rhs","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","1","MemoryLayout","Multiple","One","Unsized","borrow","borrow_mut","clone","clone_into","copy","eq","equivalent","fmt","from","from","from_iter","into","iter","mem_copy","mem_size","ne","to_owned","try_from","try_into","type_id","0","0","obj_bool","obj_bool_static","obj_class","obj_format_string","obj_function","obj_int","obj_int_static","obj_module","obj_native_function","obj_never","obj_null","obj_string","obj_struct","obj_struct_object","obj_tuple_object","ObjBool","and_static","as_scoreboard_value","borrow","borrow_mut","class","cmp","eq","equivalent","fmt","fmt","from","from","id","into","into_result","memory_layout","memory_layout","ne","new","or_static","to_string","try_from","try_into","type_id","ObjStaticBool","as_scoreboard_value","borrow","borrow_mut","class","eq","equivalent","fmt","fmt","from","from","into","into_result","memory_layout","ne","runtime_class","to_string","try_from","try_into","type_id","value","HasClass","ObjClass","borrow","borrow_mut","class","class","class","clone","clone_into","deref","eq","equivalent","fmt","fmt","from","from","get_property","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","FormatStringComponent","ObjFormatString","String","Value","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","components","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","into","into","into_result","memory_layout","ne","ne","new","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","FunctionClass","FunctionContext","ObjFunction","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_function","call_function_raw","callback_function","class","clone","clone_into","emit","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","into","into","into","into_result","item_id","item_id_allocator","memory_layout","name","ne","new","nodes","parameters","parameters","promote_obj","return_class","runtime","self_val","self_value_as","span","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_ctx","type_id","type_id","type_id","with_new_function_context","ObjInt","as_scoreboard_value","bin_op","borrow","borrow_mut","class","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from","id","into","into_result","memory_layout","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","ObjStaticInt","as_scoreboard_value","bin_op","borrow","borrow_mut","class","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","impl_for","into","into_result","memory_layout","ne","new","runtime_class","to_owned","to_string","try_from","try_into","type_id","value","ObjModule","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","get_property","ident","ident","into","into_result","members","members","memory_layout","ne","new","register","register_function","set_property","to_owned","to_string","try_from","try_into","type_id","with_members","ObjNativeFunction","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","function_id","into","into_result","memory_layout","ne","to_owned","to_string","try_from","try_into","type_id","ObjNever","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","into","into_result","memory_layout","to_owned","to_string","try_from","try_into","type_id","ObjNull","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","from","into","into_result","memory_layout","to_owned","to_string","try_from","try_into","type_id","ObjString","borrow","borrow_mut","class","clone","clone_into","deref","eq","equivalent","fmt","fmt","from","from","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","value","value","ObjStruct","Struct","StructRef","borrow","borrow","borrow_mut","borrow_mut","class","comptime_encodable","create_class","deref","eq","eq","equivalent","equivalent","fields","fmt","fmt","fmt","fmt","from","from","ident","into","into","into_result","memory_layout","mir_namespace","ne","ne","new","runtime_encodable","struct_ref","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ObjStructObject","borrow","borrow_mut","check_properties_valid","class","create_class","eq","equivalent","fmt","fmt","from","get_property","into","into_result","memory_layout","memory_layout","ne","new","properties","struct_type","to_string","try_from","try_into","type_id","ObjTupleObject","Tuple","TupleRef","borrow","borrow","borrow_mut","borrow_mut","class","class","comptime_encodable","create_class","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_property","into","into","into_result","layout","length","matches","memory_layout","memory_layout","ne","ne","new","runtime_encodable","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","values","NodeId","call_graph","code_stats","function_parameters","global_opt","logger","optimize_commands","optimizers","peephole_opt","variable_metadata","CallGraph","InfiniteLoopDetector","borrow","borrow","borrow_mut","borrow_mut","default","detect_infinite_loop","fmt","from","from","from","get_called_functions","graph","graph_for","has_loop","into","into","iter_dfs","loop_detector","modify_call","pending_functions","try_from","try_from","try_into","try_into","type_id","type_id","update","visited_functions","visitor","CodeStats","add_node","borrow","borrow_mut","call_graph","clear","fmt","from","function_calls","function_parameters","into","new","remove_node","try_from","try_into","type_id","update","update_node","variable_information","visited_functions","FunctionParameter","FunctionParameters","None","Read","ReadWrite","Write","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone_into","default","default","dependencies_for","fmt","fmt","from","from","get","into","into","is_dependency","is_read","is_write","parameters","read","set_read","set_write","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","Commands","GlobalOptimizer","MAX_ITERATIONS","Optimizer","borrow","borrow","borrow_mut","borrow_mut","commands","config","execute_commands","fmt","fmt","from","from","functions","get_call_count","get_function","get_function_mut","get_info","get_reads","infinite_loop_detector","into","into","is_id_unused","iter_at","iter_functions","iter_nodes","main_function","new","new","optimize","optimize","optimizer","previous_node","retain_functions","run","run_optimizer","runtime","stats","try_from","try_from","try_into","try_into","type_id","type_id","LOG_ENABLED","0","ChangeReads","ChangeWrite","Delete","DiscardResult","InlineBranch","InlineFunction","InsertAfter","OptimizeCommand","OptimizeCommandDeque","OptimizeCommandKind","RemoveAliasFunction","Replace","SetCondition","UpdateBranch","UpdateBranchCondition","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","deref","deref_mut","fmt","fmt","fmt","from","from","from","id","into","into","into","kind","new","push","shift","shift_back","shift_forward","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0","0","0","0","1","1","branch","new_node","alias_function_optimizer","arithmetic_optimizer","callchain_optimizer","common_path_optimizer","const_optimizer","redundancy_optimizer","redundant_copy_optimizer","optimize_alias_function","Fraction","ONE","borrow","borrow_mut","denominator","fmt","from","from","into","inverse","mul","numerator","optimize_additive","optimize_multiplicative","simple_arithmetic_optimization","simplify","try_from","try_into","type_id","optimize_call_chain","get_common_call","optimize_common_path","ConstOptimizer","borrow","borrow_mut","default","from","into","optimize","try_from","try_into","type_id","value_hints","False","NewCondition","RedundancyOptimizer","SimplifiedCondition","True","aggressive_function_inlining","borrow","borrow","borrow_mut","borrow_mut","default","from","from","from","into","into","merge_condition","optimize","simplify_condition","try_from","try_from","try_into","try_into","type_id","type_id","write_after_write","0","RedundantCopyOptimizer","borrow","borrow_mut","default","from","into","optimize","pending_commands","try_from","try_into","type_id","PeepholeOptimizer","_nodes","borrow","borrow_mut","extend","fmt","from","from_compile_context","into","nodes","opt_mode","optimize","optimize_and_insert","optimize_branch","push","take","try_from","try_into","type_id","value_hints","Exact","Hint","Unknown","ValueHints","VariableUsage","add_read","add_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_all","clear_hint","clone","clone","clone_into","clone_into","constant_value","default","default","default","exact","fmt","fmt","fmt","from","from","from","get_hint","get_scoreboard_value","hints","into","into","into","reads","remove_read","remove_write","set_hint","static_binary_operation","static_condition","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_hints","used_once","writes","0","Runtime","add_on_load","borrow","borrow_mut","contains","default","fmt","from","into","load_blocks","root_blocks","schedule","scheduled_blocks","try_from","try_into","type_id","TypeContext","borrow","borrow_mut","cache","default","fmt","from","get","insert","into","never","never","null","null","try_from","try_into","type_id","Any","Class","ComptimeBool","ComptimeInt","DynamicBool","DynamicInt","FormatString","Function","Module","Never","Null","String","Struct","StructObject","Tuple","TupleObject","Type","Type","TypePattern","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","comptime_encodable","diverges","eq","eq","equivalent","equivalent","expect_class","fmt","fmt","fmt","fmt","from","from","from","hash","into","into","is_bool","is_int","is_never","is_reference","is_valid_param","matches","matches","ne","runtime_encodable","should_be_const","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","BlockId","Custom","Divide","Equal","Greater","GreaterOrEqual","Internal","ItemId","ItemIdAllocator","Less","LessOrEqual","Main","Max","Min","Minus","Modulo","NotEqual","Plus","Scoreboard","Scoreboard","ScoreboardComparison","ScoreboardOperation","ScoreboardValue","Static","Times","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","current","default","dummy","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","evaluate","evaluate","flip_sides","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","hash","hash","id","id","into","into","into","into","into","into","into","invert","ne","ne","ne","ne","next_id","partial_cmp","str_value","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","1"],"q":["debris_llir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::TypePattern","debris_llir::class","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::class::ClassKind","","","","","","debris_llir::debris_object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::error_utils","debris_llir::function_interface","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::json_format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::json_format::JsonFormatComponent","","debris_llir::llir_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::llir_builder::FunctionParameter","","","","","","","debris_llir::llir_function_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::llir_impl","","","","","","","","","","","","","","","","debris_llir::llir_nodesdebris_llir::llir_nodes::Condition","","","","","debris_llir::llir_nodes::ExecuteRawComponent","","debris_llir::llir_nodes::Node","","","","","","","","debris_llir::llir_nodes::VariableAccess","","","","debris_llir::llir_nodes::VariableAccessMut","","","","debris_llir::memory","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::memory::MemoryLayout","","debris_llir::objects","","","","","","","","","","","","","","","debris_llir::objects::obj_bool","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_bool_static","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_class","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_format_string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_format_string::FormatStringComponent","","debris_llir::objects::obj_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_int","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_int_static","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_native_function","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_never","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_null","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_string","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_struct_object","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::objects::obj_tuple_object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::opt","","","","","","","","","","debris_llir::opt::call_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::opt::code_stats","","","","","","","","","","","","","","","","","","","","debris_llir::opt::function_parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::opt::global_opt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::opt::logger","debris_llir::opt::optimize_commands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::opt::optimize_commands::OptimizeCommandKind","","","","","","","","","","","","debris_llir::opt::optimizers","","","","","","","debris_llir::opt::optimizers::alias_function_optimizer","debris_llir::opt::optimizers::arithmetic_optimizer","","","","","","","","","","","","","","","","","","","debris_llir::opt::optimizers::callchain_optimizer","debris_llir::opt::optimizers::common_path_optimizer","","debris_llir::opt::optimizers::const_optimizer","","","","","","","","","","","debris_llir::opt::optimizers::redundancy_optimizer","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::opt::optimizers::redundancy_optimizer::SimplifiedCondition","debris_llir::opt::optimizers::redundant_copy_optimizer","","","","","","","","","","","debris_llir::opt::peephole_opt","","","","","","","","","","","","","","","","","","","","debris_llir::opt::variable_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::opt::variable_metadata::Hint","debris_llir::runtime","","","","","","","","","","","","","","","","debris_llir::type_context","","","","","","","","","","","","","","","","","debris_llir::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::types::TypePattern","debris_llir::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_llir::utils::Scoreboard","","debris_llir::utils::ScoreboardValue","",""],"d":["","The Any pattern matches every type","","A type pattern can also take any normal type","A boolean value known at compile time","Compile time known 32-bit signed integer","Objects are a central type for the compiler. Basically …","Runtime boolean","32-bit signed integer known at runtime","A compile time known format string","Any function, native or api","The low-level intermediate representation struct","Module type","","Marks a value that cannot be constructed, for example The …","The null type, implicitly return by function which don’t …","A trait for values that can be used as debris object …","The type of the properties map","This struct is used to pass objects around","","A compile time known string","Type of a struct definition","An instantiated struct","Type of a tuple","An instantiated tuple","The type of a class object","The type of a type","The enumeration of patterns allowed as function arguments","","","TODO: Clean this mess up This module defines classes. The …","The class of the object","","The entry point","Tests whether this object is equal to another object","","This module contains a trait <code>ToFunctionInterface</code> which …","The functions which were created, excluding the main …","","","","","(Current incomplete) interface for minecraft’s text …","","","","Contains every node that can be produced in the llir step.","","","","","Helper macro that makes match-style semantics available …","","Returns the memory layout of this specific object This …","Contains all objects which can be used in a debris program.","Contains two optimizer that can operate on the llir: The …","The actual value","","The runtime, which stores resources","","","","","","","A class combines <code>ClassKind</code> and corresponding methods. Due …","","","","","","","","","","","","","Returns whether this type can be fully encoded at compile …","","Whether it is impossible to construct a value of this class","","","","","","","","","","","","","","","","","Returns <code>true</code> if the <code>class_kind</code> is <code>ClassKind::Function</code>.","Returns whether this class kind is of type <code>Type::Never</code>","Returns whether this class kind is of type <code>Type::Null</code>","","","Returns whether the other class kind matches this class …","Returns if the value class <code>other</code> matches this pattern","Returns whether <code>other</code> is the same class as self Behavior …","Returns whether the other class has the same type as this …","","","","","","Yeah…","","Returns whether this type can be fully encoded at runtime.","","","","","","","","","","","","","","","","","","Objects are a central type for the compiler. Basically …","A trait for values that can be used as debris object …","The type of the properties map","This struct is used to pass objects around","","","","","","","The class of the object","","","The class specific to this object. Contains additionally …","The class specific to this object. Contains additionally …","","Helper function for downcasting the payload into a class","Converts the payload into its original type","Tests whether this object is equal to another object","","","","","","","","","","","Tries to get a property that belongs to this object","May be overwritten by distinct payloads which carry …","May be overwritten by distinct payloads which carry …","","","","","Returns the memory layout of this specific object This …","The actual value","Returns the class which the runtime encodable variant of …","Returns the class which the runtime encodable variant of …","","","","","","","","","","","The common type for working with callbacks","This trait allows downcasting an entire array of objects …","","","This trait can convert functions into compatible interface …","Trait used for converting any valid return value into a …","","","","","Calls this interface and returns the result and a vec of …","","","","","","","","This macro works much like <code>impl_to_function_interface</code> by …","Maps a valid return type from <code>$from</code> to <code>$to</code>","Implements the <code>ToFunctionInterface</code> trait for functions …","Calls this function if the parameters are valid and …","","","","","Returns the parameters that this function wants. If None …","","","","","","","","","Debris syntax: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Small hack to prevent borrow checker problems where rust …","","","","","","","","","","","","Compiles any context, even if it is already compiled. …","","","","","","","","","","","","","","","","","","","","","","","A list of all used native functions and their …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets an object, with <code>comptime_update_allowed</code> set. This can …","","","","","","","","","","","","","","","","","","","","","","","","","Stores function ids for functions that should be run every …","","Partitions the data according to the predicate. This does …","","","Tries to promote an object to the <code>target</code> class and returns …","","","","","","","","","","","","","","Verifies that the given <code>parameters</code> match the signature of …","","","","","The low-level intermediate representation struct","","","The entry point","","","","The functions which were created, excluding the main …","","","Compiles the mir into a llir","The runtime, which stores resources","","","","","","","","Operates on two scoreboard values and stores the result …","","Branches based on a condition","","Calls a function","","","Comparison between two values, eg. val1 &lt;= val2","Evaluates a condition and returns either true or false","","","Executes a literal string","A component for a raw execute command. Either string or …","Stores a ‘fast’ variable","","Stores a ‘fast’ variable from the result of another …","","A function node, contains other nodes","Any node","Does nothing","","Marks that a value is read by this node","","Marks that a value can be both read from and written to by …","","","","","","Denotes how a specific node accesses variables.","See <code>VariableAccess</code>.","Marks that a value is written to by this node. The second …","","","Writes a formatted message","The buffer to write to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if this function contains a node that calls the …","","","","","","","","","","","","","","","","","","","","","","","The command to use","The condition to test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks whether this node contains a call","The id of this function","The id of the target var","The id of the target var","The id of the resulting value","The id of that function","","","","","","","","","","","","","","","","Returns whether evaluating this condition has any side …","Returns whether this command has no side effect. sometimes …","","Checks whether this condition is “simple”, which means …","Iterates over this node and all other nodes that this node …","A copy of the above function, but with mutability enabled …","Iterates the subnodes and additionally whether the subnode …","The left value","This awful macro contains code that otherwise would have …","","","","","","","","","","","","The node to execute if that condition is false","","The nodes which this function contains","Returns a condition that is true, when this condition is …","The kind of operation","The node to execute if that condition is true","Whether this node has a read-dependency on <code>item_id</code>","","The right value","The scoreboard of the target var","The scoreboard of the target var","The scoreboard of the resulting value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value to store into the target var","Recursively yields all variables that this condition reads …","Accepts a callback function as argument and calls it with …","","See <code>variable_accesses</code>.","Whether this node could modify <code>item_id</code>.","","","","","","","","","","","","","","","","","","","","","","","","Specifies how a specific object lays out its runtime memory","This type is spread across multiple fields","This type has exactly one integer sized field","This type has no runtime memory","","","","","Copies a scoreboard value from source to destination","","","","","","","","","Copies all items from source over to destination","Returns the amount of words that this layout occupies","","","","","","","","","","","","","","","","","","","","","","","A boolean value that is stored on a scoreboard","","","","","","","","","","","","","","","","","","","","Returns the boolean or-ed with the static value","","","","","","","","","","","","","","","","","","","","","","","","","","Marks objects that have a class","The class of a value.","","","Returns the class of this object","","","","","","","","","","","","","","","","","","","","","","","","A static string object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The context which gets passed to a function","A function object","","","","","","","","","","","","","Adds a node to the previously emitted nodes","","","","","","","","","","","","","","","","The id of the returned value","Generates new item ids","","","","","The nodes that are emitted by this function","The parameters for this function call, excluding the self …","","","","","The self value","Returns <code>self_val</code> downcasted to the desired type or None","","","","","","","","","","","","","","","Generates a new function context which can be used for …","A dynamic Integer","Returns a <code>ScoreboardValue</code> which identifies a specific …","Shorthand for adding a binary operation node","","","","","","","","","","","","","The id of the item","","","","","","Creates a new dynamic integer with this id","","","","","","A static integer object","Returns a <code>ScoreboardValue</code> which matches this int","Shorthand for adding a binary operation node","","","","","","","","","","","","","","","","","","","","","","","","Implements From for all numeric types","","","","","Creates a new static integers with this value","","","","","","","","A module object","","","","","","","","","","","","Returns the ident of this module","The identifying name of this module","","","","The members of this module","","","Creates a new empty module with this name","Registers a value for the first time","A more concise way to register builtin functions without …","Sets a property","","","","","","","","","","","","","","","","","","","","","","","","","","","","Signals that a block will never return. The most …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A static string object","","","","","","","","","","","","","","","","","","","","","","","","","Stores a user defined struct","","","","","","","","","","","","","","","The fields are stored in an indexmap so that the user …","","","","","","","","","","","","Stores a reference to the mir namespace so that properties …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A heterogenous, compile-time known collection of objects. …","","","","","","","","","Returns true if any of the contained fields of this tuple …","","","","","","","","","","","","","","","","","","","Returns whether the other tuple matches this tuple, where …","","","","","","Returns whether every type contained in this tuple can be …","","","","","","","","","","The optimizer can uniquely identify each node with this …","","","","","Simple logger to make debugging the optimizer simpler. Can …","","This module contains various types implementing the …","","This module contains structs which can hold metadata for …","","","","","","","","This function returns true if start definitely contains an …","","","","","","","","","","","","","","","","","","","","","","","","tracks statistics about the global code which can be used …","","","","","","","","","Tracks which parameters a function takes. Due to the …","","","","","","","Updates the variable reads and writes. The iterator does …","","","This local variable is cached, so no repeated allocations …","Declares how a variable is used by a function","Stores how functions use variables as parameters.","Variable is not used at all by this function","Variable is read by this function","Variable is read from and written to by this function","Variable is written to by this function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Interface for optimizing functions to get data about the …","Does optimization on the whole program.","Maximum amount of turing-complete iterations the optimizer …","","","","","","","","Execute every command that is in the current command stack","","","","","","","","","Returns the variable info for this node","","","","","","Iterates all subsequent nodes of this function","Iterates over all functions","Iterates over all nodes.","","","","","","","","","Runs the optimization passes and returns the final …","Runs an optimizing function","","","","","","","","","","","Replaces all variables <code>.0</code> with <code>.1</code>","Changes the variable this node writes to","Deletes a single node","Converts the FastStoreFromResult node into its command, …","Discards the node and only keeps the branch that matches …","Inlines the function of this function call.","Inserts this node after","","Just a wrapper around deque with a simple push method","Optimizing functions output commands that tell the …","Removes all aliases to a function which only redirects to …","Replaces the old node completely","Changes the condition of this branch to a new condition …","Updates the specified branch with the new node","Updates the condition of a branch","","","","","","","","","","","","","","","","","","","","","","","Shifts the node id of this command one back","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TODO: implement this properly","This optimizer handles functions that alias other function.","","","","","","","","","","","","","","","Optimizes basic arithmetic expressions with the shape x OP …","","","","","Inlines the function call chain. This optimizer only runs …","Extracts the first common function call in the calls …","This expensive optimization searches for common paths at …","Optimizes nodes which are const-evaluatable. This …","","","","","","","","","","","","","Removes useless nodes","","","","","","","","","","","","","","Tries to merge the condition and the previous node into …","","Simplifies trivial conditions","","","","","","","Checks for a write to <code>id</code> after <code>node</code> and returns with false …","","A node which copies a value <code>a</code> to <code>b</code> is often redundant. …","","","","","","","","","","","A just-in-time peephole optimizer.","","","","","","","","","","","","Optimizes a node and the previous nodes and pushes the new …","","Adds this node to the collection and optimizes it on the …","Drops this instance and returns the wrapped nodes","","","","Information about the possible values of runtime variables","Hints that the value can have exactly one value (the …","A hint about the possible value of a variable","Hints that the value is unknown (the variable can take any …","Stores the possible range of values of a runtime variable","General data about the usage of a specific variable","","","","","","","","","Clears all hints","Clears all hints for this id","","","","","","","","","","","","","","","","","Tries to get the static value of a scoreboard value","","","","","","","","","Tries to evaluate a binary operation with static values","Tries to evaluate a condition with static values","","","","","","","","","","","","Updates the hints for all variables that this node modifies","Returns whether the variable is written to at most once …","","","","Adds a specific block to the list of blocks which should …","","","Returns whether this function contains the given <code>id</code>.","","","","","","Gives an iterator over the blocks which are the root …","Schedules a specific block to run every tick.","","","","","Caches all classes. Could maybe be used as an arena in the …","","","Cache for classes","","","","","","","","The never singleton","","The null singleton","","","","The Any pattern matches every type","A type pattern can also take any normal type","A boolean value known at compile time","Compile time known 32-bit signed integer","Runtime boolean","32-bit signed integer known at runtime","A compile time known format string","Any function, native or api","Module type","Marks a value that cannot be constructed, for example The …","The null type, implicitly return by function which don’t …","A compile time known string","Type of a struct definition","An instantiated struct","Type of a tuple","An instantiated tuple","The type of a class object","The type of a type","The enumeration of patterns allowed as function arguments","","","","","","","","","Returns whether this type can be encoded at compile time.","","","","","","","","","","","","","","","","","","","","Returns whether this type should be treated as a reference.","","Returns whether the type matches on this pattern","Returns whether <code>self</code> matches the pattern of <code>other</code>","","Returns whether this type can be completely encoded at …","Returns whether this type should be const. Const types are …","","","","","","","","","","","","","Identifies a single callable block of code","Custom scoreboards, each with a unique identifier","","","","","Special scoreboards used for internal tracking","A unique identifier for an item, used to determine the","","","","The Main scoreboard, where all operations are per default","","","","","","","Identifies a specific scoreboard","","Any comparison that can be executed on two scoreboard …","Any operation that can be executed on a scoreboard- This …","A Value that can be stored on a scoreboard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a dummy <code>BlockId</code>, For testing only","","","","","","","","","","","","","","","Flips the comparison (converts OP such that …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inverts the comparison, such that it is exactly and only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,2,3,3,0,3,3,3,3,0,3,0,3,3,0,0,0,0,3,3,3,3,3,0,3,0,0,4,0,5,0,6,4,0,0,6,4,7,0,4,0,0,0,0,0,8,0,7,0,0,0,9,0,0,5,0,6,8,0,0,0,7,10,0,0,0,11,11,11,11,11,11,11,12,11,12,11,11,12,11,12,11,12,11,11,12,12,11,11,12,11,12,11,12,11,11,11,11,11,12,11,12,11,12,11,11,12,12,12,11,12,11,12,11,12,11,12,11,12,11,11,12,13,14,15,16,17,18,1,0,0,0,0,0,4,5,1,5,1,5,1,1,9,9,1,5,5,4,1,1,5,1,1,5,1,1,1,4,5,9,9,5,1,4,1,9,5,9,9,1,1,5,1,5,1,5,1,0,19,0,0,0,0,0,0,19,20,19,20,19,19,0,21,19,19,20,19,0,0,0,20,19,20,22,0,20,23,20,19,20,19,20,19,20,0,0,24,24,25,24,25,24,25,24,25,24,25,25,24,25,24,25,25,24,24,25,25,24,25,24,25,24,25,24,25,24,25,24,25,24,25,24,26,27,0,0,0,0,28,0,0,0,28,29,30,29,29,31,28,30,32,33,29,31,28,30,32,33,29,0,29,28,29,29,29,31,33,28,30,32,33,29,29,31,28,30,32,33,32,29,33,32,29,29,29,32,29,31,28,30,32,33,29,32,29,29,32,31,31,29,30,29,29,28,29,31,28,30,32,33,29,31,28,30,32,33,29,29,31,28,30,32,33,34,35,34,34,35,34,35,0,0,0,36,36,37,38,36,37,38,36,36,36,36,36,36,36,38,36,37,37,38,36,37,38,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,38,38,36,36,38,36,38,36,37,38,36,37,36,37,38,36,37,38,36,37,38,36,36,36,0,36,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,39,40,41,0,42,0,42,0,42,40,41,0,42,42,0,0,0,42,0,42,0,0,42,41,43,44,43,44,45,45,40,40,0,0,43,44,42,0,0,43,44,46,47,48,49,50,41,51,45,39,52,40,42,43,44,46,47,48,49,50,41,51,45,39,52,40,42,46,47,48,49,50,41,51,45,39,52,40,42,47,48,49,50,41,51,45,39,52,40,42,48,51,47,48,49,50,41,51,45,39,52,40,42,47,48,49,50,41,51,45,39,52,40,42,46,46,47,48,49,50,41,41,51,45,39,52,40,40,42,42,43,44,46,47,48,49,50,41,51,45,39,52,40,42,42,46,47,48,49,50,42,43,44,46,47,48,49,50,41,51,45,39,52,40,42,41,42,46,41,42,42,42,49,0,52,47,48,49,50,41,51,45,39,52,42,51,46,46,41,49,51,42,46,49,47,48,49,52,47,48,49,50,41,51,45,39,52,40,42,46,41,40,42,43,44,46,47,48,49,50,41,51,45,39,52,40,42,43,44,46,47,48,49,50,41,51,45,39,52,40,42,43,44,46,47,48,49,50,41,51,45,39,52,40,42,47,41,42,41,42,42,53,54,55,55,55,56,57,58,59,60,61,62,63,64,65,66,67,68,67,69,70,71,70,0,72,72,72,72,72,72,72,0,72,72,72,72,72,72,72,72,0,72,72,72,72,72,72,73,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,75,75,75,0,75,75,75,75,75,75,75,75,75,75,75,75,75,0,75,75,75,75,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,77,77,78,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,79,79,79,80,79,80,80,79,80,79,80,80,79,80,79,80,79,80,80,79,80,79,80,80,80,79,80,80,79,80,80,79,80,79,80,79,80,81,82,0,0,0,83,84,85,83,84,85,83,83,84,84,84,84,83,84,85,84,85,84,84,85,85,83,84,85,83,84,85,84,83,83,84,84,85,84,83,83,85,83,85,83,83,83,83,84,84,85,83,84,85,83,84,85,83,83,84,85,83,0,86,0,86,86,86,86,86,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,87,0,87,87,87,87,87,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,87,87,87,87,87,87,87,87,87,87,87,87,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,93,94,93,94,94,93,94,94,93,94,93,94,93,93,93,94,94,93,94,93,93,94,94,94,93,93,94,94,93,94,93,94,93,94,93,94,93,94,0,95,95,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,0,0,96,97,96,97,97,97,96,97,96,97,96,97,96,96,97,97,96,96,97,97,96,97,97,96,97,96,97,97,96,97,97,96,96,97,96,97,96,97,96,97,97,0,0,0,0,0,0,0,0,0,0,0,0,7,98,7,98,98,98,7,7,7,98,7,7,0,7,7,98,7,7,7,98,7,98,7,98,7,98,7,98,7,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,100,100,100,100,100,101,100,101,101,100,100,100,101,101,100,101,100,101,101,100,101,101,100,100,101,100,101,101,100,100,101,100,101,100,101,100,0,0,0,0,102,103,102,103,102,103,102,102,103,102,103,103,102,103,103,102,102,102,102,103,102,103,103,103,103,102,103,104,103,102,103,102,103,102,103,102,102,103,102,103,102,103,0,105,106,106,106,106,106,106,106,0,0,0,106,106,106,106,106,106,107,105,106,107,105,105,105,105,106,107,105,106,107,105,107,106,107,105,107,107,105,107,107,107,106,107,105,106,107,105,106,107,105,108,109,110,111,112,113,114,115,112,113,116,116,0,0,0,0,0,0,0,0,0,117,117,117,117,117,117,117,117,117,117,117,0,0,0,117,117,117,117,0,0,0,0,118,118,118,118,118,118,118,118,118,118,119,119,0,0,119,120,119,120,119,120,120,119,119,120,119,120,0,120,0,119,120,119,120,119,120,0,121,0,122,122,122,122,122,122,122,122,122,122,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,0,124,0,0,125,125,124,126,125,124,126,125,126,126,124,125,124,125,125,124,126,125,124,124,126,125,124,126,125,126,126,126,124,126,125,125,125,125,126,126,126,124,125,124,126,125,124,126,125,124,126,125,126,125,125,127,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,0,2,3,2,3,2,3,2,3,3,3,2,3,2,3,2,2,2,3,3,2,2,3,3,2,3,3,3,3,3,3,2,3,2,3,3,2,3,2,3,2,3,2,3,2,3,10,129,0,130,131,132,132,132,130,0,0,132,132,130,131,131,131,131,132,131,0,133,0,0,0,133,131,129,130,133,131,132,134,135,129,130,133,131,132,134,135,129,130,133,131,132,134,129,130,133,131,132,134,129,135,135,129,129,130,133,131,132,134,129,130,133,131,132,134,131,132,132,129,130,130,133,133,131,131,132,132,134,134,129,130,133,131,132,134,135,129,130,134,133,134,129,130,133,131,132,134,135,132,129,130,133,134,135,129,131,129,130,133,131,132,134,130,133,131,132,134,129,130,133,131,132,134,135,129,130,133,131,132,134,135,129,130,133,131,132,134,135,136,137,138,139,139],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],null,null,null,null,[[["objectref",3]],["bool",15]],null,null,null,[[["typecontext",3]],["classref",6]],null,null,[[["typecontext",3]],["objectref",3]],null,null,null,null,null,null,null,null,null,null,null,[[],["memorylayout",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["type",4]]],[[]],[[["compilecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[["type",4]],["bool",15]],[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[["classkind",4]]],[[["typecontext",3],["itemidallocator",3]],["option",4,[["objectref",3]]]],[[],["bool",15]],null,[[],["bool",15]],[[["ident",4],["objectref",3]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],[[]],[[]],[[]],[[]],null,[[],["objectref",3]],[[]],[[["typecontext",3]],["classref",6]],[[["typecontext",3]],["classref",6]],[[]],[[],["option",4,[["classref",6]]]],[[],["option",4]],[[["objectref",3]],["bool",15]],[[["objectref",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["debrisobject",3]]],[[["typecontext",3],["objectpayload",8]]],[[["typecontext",3]],["classref",6]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[]],[[]],[[["typecontext",3]],["objectref",3]],[[["functioncontext",3]],["option",4,[["langresult",6,[["objectref",3]]]]]],[[],["memorylayout",4]],null,[[["typecontext",3]],["option",4,[["classref",6]]]],[[["typecontext",3]],["option",4,[["classref",6]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["span",3],["class",3],["class",3]],["compileerror",4]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["functioncontext",3]],["result",6,[["objectref",3]]]],[[["functioncontext",3]],["option",4,[["langresult",6,[["objectref",3]]]]]],null,[[],["option",4]],[[]],[[["normalizedfunction",3]]],[[]],[[["functioncontext",3],["option",4,[["langresult",6,[["objectref",3]]]]]],["langresult",6,[["objectref",3]]]],null,null,null,null,[[]],[[]],[[["functioncontext",3]],["option",4,[["langresult",6,[["objectref",3]]]]]],[[["vec",3,[["normalizedfunction",3]]]],["normalizedfunction",3]],null,[[],["normalizedfunction",3]],[[],["normalizedfunction",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["formattedtext",3]],[[],["jsonformatcomponent",4]],[[]],[[]],null,[[["formattedtext",3]],["bool",15]],[[["jsonformatcomponent",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["vec",3,[["jsonformatcomponent",4]]]]],[[]],[[]],[[]],[[["formattedtext",3]],["bool",15]],[[["jsonformatcomponent",4]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["mirobjectid",3],["objectref",3]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mircontextid",3],["fxhashmap",6]],["result",6,[["llir",3]]]],[[["mirnamespace",3],["typecontext",3],["fxhashmap",6],["mirobjectid",3],["objectref",3]]],null,[[],["classref",6]],[[["fxhashmap",6],["mircontextid",3]],["result",6]],null,null,[[],["blockidgenerator",3]],[[],["callstack",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["fxhashmap",6],["mircontextid",3],["blockid",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["option",4,[["monomorphizedfunction",3]]]],[[["mirobjectid",3]],["objectref",3]],[[["mirobjectid",3]],["option",4,[["objectref",3]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["compilecontext",3],["fxhashmap",6],["mirnamespace",3],["returnvaluesarena",3]],["result",6]],[[["mirfunction",3],["vec",3,[["functionparameter",4]]]]],[[],["blockid",3]],null,null,null,null,null,[[],["span",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["mircontext",3]],["result",6,[["function",3]]]],null,[[["objfunction",3],["option",4,[["objectref",3]]],["span",3]],["result",6,[["objectref",3]]]],[[["nativefunctionid",6],["vec",3,[["objectref",3]]],["option",4,[["objectref",3]]],["span",3]],["result",6,[["objectref",3]]]],[[["nativefunctionid",6],["span",3]],["result",6,[["parameterpartition",3,[["objectref",3]]]]]],null,[[["objectref",3]],["objectref",3]],null,[[["mirobjectid",3],["objectref",3],["span",3]],["result",6]],[[],["functionbuilderruntime",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["branch",3]],["result",6,[["objectref",3]]]],[[["functioncall",3],["objfunction",3]],["result",6,[["objectref",3]]]],[[["branch",3],["objbool",3]],["result",6,[["objectref",3]]]],[[["functioncall",3]],["result",6,[["objectref",3]]]],[[["goto",3]],["result",6]],[[["mirmodule",3]],["result",6,[["objectref",3]]]],[[["functioncall",3],["objnativefunction",3]],["result",6,[["objectref",3]]]],[[["mirnode",4]],["result",6]],[[["primitivedeclaration",3]],["result",6]],[[["propertyaccess",3]],["result",6]],[[["runtimecopy",3]],["result",6]],[[["runtimepromotion",3]],["result",6]],[[["branch",3],["objstaticbool",3]],["result",6,[["objectref",3]]]],[[["variableupdate",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["blockid",3],["llirbuilder",3],["fxhashmap",6]]],[[]],null,null,[[["functioncontext",3]],["option",4,[["result",6,[["objectref",3]]]]]],[[["nativefunctionid",6],["span",3]]],[[]],[[["mirobjectid",3],["objectref",3],["span",3],["bool",15]],["result",6]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["nativefunctionid",6],["span",3]],["result",6]],[[["verifypropertyexists",3]],["result",6]],[[["verifytuplelength",3]],["result",6]],null,[[["verifyvaluecomptime",3]],["result",6]],null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],null,[[],["fxhashmap",6,[["blockid",3],["usize",15]]]],[[]],[[["compilecontext",3],["mir",3]],["result",6,[["llir",3]]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockid",3]],["bool",15]],[[],["faststore",3]],[[],["faststorefromresult",3]],[[],["binaryoperation",3]],[[],["call",3]],[[],["condition",4]],[[],["branch",3]],[[],["executerawcomponent",4]],[[],["executeraw",3]],[[],["writemessage",3]],[[],["writetarget",4]],[[],["node",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["faststore",3]],["bool",15]],[[["faststorefromresult",3]],["bool",15]],[[["binaryoperation",3]],["bool",15]],[[["call",3]],["bool",15]],[[["condition",4]],["bool",15]],[[["branch",3]],["bool",15]],[[["executerawcomponent",4]],["bool",15]],[[["executeraw",3]],["bool",15]],[[["writemessage",3]],["bool",15]],[[["writetarget",4]],["bool",15]],[[["node",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,null,null,[[["faststore",3]],["bool",15]],[[["faststorefromresult",3]],["bool",15]],[[["binaryoperation",3]],["bool",15]],[[["call",3]],["bool",15]],[[["condition",4]],["bool",15]],[[["branch",3]],["bool",15]],[[["executerawcomponent",4]],["bool",15]],[[["executeraw",3]],["bool",15]],[[["writemessage",3]],["bool",15]],[[["node",4]],["bool",15]],null,[[]],null,[[],["condition",4]],null,null,[[["itemid",3]],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["itemid",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["memorylayout",4]],[[]],[[["itemid",3],["itemid",3]],["node",4]],[[["memorylayout",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["vec",3,[["itemid",3]]]]],[[]],[[["intoiterator",8]]],[[]],[[]],[[["objectref",3],["objectref",3]]],[[],["usize",15]],[[["memorylayout",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["itemid",3],["objbool",3],["bool",15]]],[[],["scoreboardvalue",4]],[[]],[[]],[[["typecontext",3]],["classref",6]],[[["itemid",3],["objbool",3],["scoreboardvalue",4],["scoreboardcomparison",4]]],[[["objbool",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["itemid",3]]],null,[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],null,[[["objbool",3]],["bool",15]],[[["itemid",3]]],[[["itemid",3],["objbool",3],["bool",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["scoreboardvalue",4]],[[]],[[]],[[["typecontext",3]],["classref",6]],[[["objstaticbool",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[["objstaticbool",3]],["bool",15]],[[["typecontext",3]],["option",4,[["classref",6]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[["typecontext",3]],["classref",6]],null,[[],["objclass",3]],[[]],[[]],[[["objclass",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["classref",6]]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[["objclass",3]],["bool",15]],[[["classref",6]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["formatstringcomponent",4]],[[],["objformatstring",3]],[[]],[[]],null,[[["formatstringcomponent",4]],["bool",15]],[[["objformatstring",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[["formatstringcomponent",4]],["bool",15]],[[["objformatstring",3]],["bool",15]],[[["vec",3,[["formatstringcomponent",4]]]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["objfunction",3],["option",4,[["objectref",3]]]],["langresult",6,[["objectref",3]]]],[[["objfunction",3],["option",4,[["objectref",3]]]],["option",4,[["langresult",6,[["objectref",3]]]]]],null,[[["typecontext",3]],["classref",6]],[[],["objfunction",3]],[[]],[[["node",4]]],[[["objfunction",3]],["bool",15]],[[["functionclass",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],null,null,[[],["memorylayout",4]],null,[[["functionclass",3]],["bool",15]],[[["str",15],["rc",3,[["debrisfunctioninterface",3]]]]],null,null,null,[[["objectref",3],["objectref",3]],["option",4,[["langresult",6,[["objectref",3]]]]]],null,null,null,[[],["option",4]],null,[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["option",4,[["objectref",3]]]]],null,[[],["scoreboardvalue",4]],null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["objint",3]],[[]],null,[[["objint",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["itemid",3]]],[[]],null,[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],null,[[["objint",3]],["bool",15]],[[["itemid",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["scoreboardvalue",4]],null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["objstaticint",3]],[[]],null,[[["objstaticint",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["usize",15]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["u8",15]]],[[["isize",15]]],[[["i128",15]]],[[["i64",15]]],[[["i32",15]]],[[["i16",15]]],[[["i8",15]]],null,[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[["objstaticint",3]],["bool",15]],[[]],[[["typecontext",3]],["option",4,[["classref",6]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["objmodule",3]],[[]],[[["objmodule",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[],["ident",4]],null,[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[]],null,[[],["memorylayout",4]],[[["objmodule",3]],["bool",15]],[[]],[[["into",8,[["ident",4]]],["objectref",3]]],[[["typecontext",3],["objfunction",3]]],[[["into",8,[["ident",4]]],["objectref",3]],["option",4,[["objectref",3]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["ident",4],["objectproperties",6]]],null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["objnativefunction",3]],[[]],[[["objnativefunction",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],null,[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[["objnativefunction",3]],["bool",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["objnever",3]],[[]],[[["objnever",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["objnull",3]],[[]],[[["objnull",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["objstring",3]],[[]],[[]],[[["objstring",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["rc",3,[["str",15]]]]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],[[["objstring",3]],["bool",15]],[[["rc",3,[["str",15]]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["rc",3,[["str",15]]]],null,null,null,null,[[]],[[]],[[]],[[]],[[["typecontext",3]],["classref",6]],[[],["bool",15]],[[["typecontext",3]],["classref",6]],[[]],[[["struct",3]],["bool",15]],[[["objstruct",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],null,[[["struct",3]],["bool",15]],[[["objstruct",3]],["bool",15]],[[["structref",6]]],[[],["bool",15]],null,[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["ident",4],["fxhashmap",6],["indexmap",3]],["result",4,[["langerrorkind",4]]]],[[["typecontext",3]],["classref",6]],[[["typecontext",3]],["classref",6]],[[["objstructobject",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],[[],["memorylayout",4]],null,[[["objstructobject",3]],["bool",15]],[[["structref",6],["fxhashmap",6,[["ident",4],["objectref",3]]]],["result",4,[["langerrorkind",4]]]],null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[["typecontext",3]],["classref",6]],null,[[],["bool",15]],[[["typecontext",3]],["classref",6]],[[["tuple",3]],["bool",15]],[[["objtupleobject",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["vec",3,[["typepattern",4]]]]],[[]],[[]],[[["typecontext",3],["ident",4]],["option",4,[["objectref",3]]]],[[]],[[]],[[["functioncontext",3]],["option",4,[["result",4,[["objectref",3],["langerrorkind",4]]]]]],null,[[],["usize",15]],[[["tuple",3]],["bool",15]],[[],["memorylayout",4]],null,[[["tuple",3]],["bool",15]],[[["objtupleobject",3]],["bool",15]],[[["vec",3,[["objectref",3]]]]],[[],["bool",15]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["infiniteloopdetector",3]],[[["fxhashmap",6],["blockid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["fxhashmap",6]]],[[]],[[["blockid",3]]],null,[[["fxhashmap",6]],["graphmatrix",3,[["nonzerou32",3]]]],[[["blockid",3]],["bool",15]],[[]],[[]],[[]],null,[[["blockid",3],["blockid",3],["i32",15]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["fxhashmap",6]]],null,null,null,[[["node",4]]],[[]],[[]],null,[[]],[[["formatter",3]],["result",6]],[[]],null,null,[[]],[[["callgraph",3]]],[[["node",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["runtime",3],["fxhashmap",6]]],[[["node",4],["option",4,[["blockid",3]]]]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["functionparameter",4]],[[]],[[]],[[],["functionparameters",3]],[[["itemid",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["blockid",3],["itemid",3]],["functionparameter",4]],[[]],[[]],[[["itemid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[]],[[["blockid",3],["itemid",3]]],[[["blockid",3],["itemid",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[["blockid",3]],["usize",15]],[[["blockid",3]],["function",3]],[[["blockid",3]],["function",3]],[[["itemid",3]],["variableusage",3]],[[["itemid",3]],["usize",15]],null,[[]],[[]],[[["itemid",3]],["bool",15]],[[]],[[]],[[]],null,[[["globaloptimizer",3],["codestats",3],["optimizecommanddeque",3]]],[[["config",3],["runtime",3],["fxhashmap",6,[["blockid",3],["function",3]]],["blockid",3]]],[[["commands",3]]],[[]],null,[[],["option",4]],[[]],[[],["fxhashmap",6,[["blockid",3],["function",3]]]],[[],["bool",15]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[["optimizecommandkind",4]]],[[]],[[["i8",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["commands",3]]],null,null,[[]],[[]],null,[[["formatter",3]],["result",6]],[[["i32",15]]],[[]],[[]],[[],["fraction",3]],[[]],null,[[]],[[]],[[["commands",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["commands",3]]],[[["commands",3],["blockid",3],["blockid",3]],["option",4]],[[["commands",3]]],null,[[]],[[]],[[],["constoptimizer",3]],[[]],[[]],[[["commands",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["redundancyoptimizer",3]],[[]],[[["bool",15]]],[[]],[[]],[[]],[[["optimizecommanddeque",3],["globaloptimizer",3],["node",4],["condition",4]],["option",4]],[[["commands",3]]],[[["condition",4]],["option",4,[["simplifiedcondition",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["globaloptimizer",3],["itemid",3]],["bool",15]],null,null,[[]],[[]],[[],["redundantcopyoptimizer",3]],[[]],[[]],[[["commands",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[]],[[["compilecontext",3]]],[[]],null,null,[[["node",4]],["node",4]],[[["node",4]]],[[["branch",3]],["node",4]],[[["node",4]]],[[],["vec",3,[["node",4]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[["option",4,[["i32",15]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["itemid",3]]],[[],["hint",4]],[[],["variableusage",3]],[[]],[[]],null,[[]],[[],["valuehints",3]],[[],["variableusage",3]],[[],["option",4,[["i32",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["itemid",3]],["hint",4]],[[["scoreboardvalue",4]],["option",4,[["i32",15]]]],null,[[]],[[]],[[]],null,[[]],[[]],[[["itemid",3],["hint",4]]],[[["binaryoperation",3]],["option",4,[["i32",15]]]],[[["condition",4]],["option",4,[["bool",15]]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["node",4]]],[[],["bool",15]],null,null,null,[[["blockid",3]]],[[]],[[]],[[["blockid",3]],["bool",15]],[[],["runtime",3]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[["blockid",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[],["typecontext",3]],[[["formatter",3]],["result",6]],[[]],[[],["option",4,[["classref",6]]]],[[["classref",6]]],[[]],[[],["objectref",3]],null,[[],["objectref",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["typepattern",4]],[[],["type",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["typepattern",4]],["bool",15]],[[["type",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["classref",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["classref",6]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["class",3]],["bool",15]],[[["type",4]],["bool",15]],[[["typepattern",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockid",3]],[[],["scoreboard",4]],[[],["scoreboardvalue",4]],[[],["scoreboardoperation",4]],[[],["scoreboardcomparison",4]],[[],["itemid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockid",3]],["ordering",4]],null,[[],["itemidallocator",3]],[[["u32",15]]],[[["blockid",3]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["scoreboardoperation",4]],["bool",15]],[[["scoreboardcomparison",4]],["bool",15]],[[["itemid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["i32",15],["i32",15]],["i32",15]],[[["i32",15],["i32",15]],["bool",15]],[[],["scoreboardcomparison",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["itemid",3]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["scoreboardcomparison",4]],[[["blockid",3]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["itemid",3]],["bool",15]],[[],["itemid",3]],[[["blockid",3]],["option",4,[["ordering",4]]]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null],"p":[[3,"ObjectRef"],[4,"TypePattern"],[4,"Type"],[8,"ValidPayload"],[3,"DebrisObject"],[3,"Llir"],[3,"CallGraph"],[3,"Runtime"],[8,"ObjectPayload"],[13,"Class"],[4,"ClassKind"],[3,"Class"],[13,"Type"],[13,"Struct"],[13,"Tuple"],[13,"Function"],[13,"StructObject"],[13,"TupleObject"],[3,"DebrisFunctionInterface"],[3,"NormalizedFunction"],[8,"DowncastArray"],[8,"ValidReturnType"],[8,"ToFunctionInterface"],[4,"JsonFormatComponent"],[3,"FormattedText"],[13,"RawText"],[13,"Score"],[4,"FunctionParameter"],[3,"LlirBuilder"],[3,"MonomorphizedFunction"],[3,"BlockIdGenerator"],[3,"FunctionGenerics"],[3,"CallStack"],[13,"Generic"],[13,"Parameter"],[3,"LlirFunctionBuilder"],[3,"FunctionBuilderRuntime"],[3,"ParameterPartition"],[3,"ExecuteRaw"],[4,"WriteTarget"],[4,"Condition"],[4,"Node"],[4,"VariableAccess"],[4,"VariableAccessMut"],[4,"ExecuteRawComponent"],[3,"Function"],[3,"FastStore"],[3,"FastStoreFromResult"],[3,"BinaryOperation"],[3,"Call"],[3,"Branch"],[3,"WriteMessage"],[13,"And"],[13,"Or"],[13,"Compare"],[13,"String"],[13,"ScoreboardValue"],[13,"FastStore"],[13,"FastStoreFromResult"],[13,"BinaryOperation"],[13,"Call"],[13,"Condition"],[13,"Branch"],[13,"Execute"],[13,"Write"],[13,"Read"],[13,"Write"],[13,"ReadWrite"],[13,"Read"],[13,"Write"],[13,"ReadWrite"],[4,"MemoryLayout"],[13,"One"],[13,"Multiple"],[3,"ObjBool"],[3,"ObjStaticBool"],[3,"ObjClass"],[8,"HasClass"],[4,"FormatStringComponent"],[3,"ObjFormatString"],[13,"String"],[13,"Value"],[3,"FunctionContext"],[3,"ObjFunction"],[3,"FunctionClass"],[3,"ObjInt"],[3,"ObjStaticInt"],[3,"ObjModule"],[3,"ObjNativeFunction"],[3,"ObjNever"],[3,"ObjNull"],[3,"ObjString"],[3,"Struct"],[3,"ObjStruct"],[3,"ObjStructObject"],[3,"Tuple"],[3,"ObjTupleObject"],[3,"InfiniteLoopDetector"],[3,"CodeStats"],[4,"FunctionParameter"],[3,"FunctionParameters"],[3,"Commands"],[3,"GlobalOptimizer"],[8,"Optimizer"],[3,"OptimizeCommandDeque"],[4,"OptimizeCommandKind"],[3,"OptimizeCommand"],[13,"InlineBranch"],[13,"UpdateBranchCondition"],[13,"RemoveAliasFunction"],[13,"ChangeWrite"],[13,"ChangeReads"],[13,"SetCondition"],[13,"Replace"],[13,"InsertAfter"],[13,"UpdateBranch"],[3,"Fraction"],[3,"ConstOptimizer"],[4,"SimplifiedCondition"],[3,"RedundancyOptimizer"],[13,"NewCondition"],[3,"RedundantCopyOptimizer"],[3,"PeepholeOptimizer"],[4,"Hint"],[3,"VariableUsage"],[3,"ValueHints"],[13,"Exact"],[3,"TypeContext"],[3,"BlockId"],[4,"Scoreboard"],[4,"ScoreboardOperation"],[4,"ScoreboardComparison"],[4,"ScoreboardValue"],[3,"ItemId"],[3,"ItemIdAllocator"],[13,"Custom"],[13,"Internal"],[13,"Static"],[13,"Scoreboard"]]},\
"debris_mir":{"doc":"","tn":["Mir","MirExternItem","borrow","borrow","borrow_mut","borrow_mut","contexts","definition_span","entry_context","extern_items","fmt","fmt","from","from","into","into","mir_builder","mir_context","mir_nodes","mir_object","mir_primitives","namespace","namespace","new","object_id","return_values_arena","try_from","try_from","try_into","try_into","type_id","type_id","Loop","MirBuilder","MirSingletons","Normal","ReturnContextBehavior","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","compile_context","contains","contexts","copy","create_context","current_context","emit","entry_context","exists_runtime_context","extern_items","fmt","from","from","from","from","get_context","get_context","get_context_mut","get_ident","get_local_namespace","get_return_context","get_variable_opt","handle_block","handle_block_keep_context","handle_branch","handle_control_flow","handle_expression","handle_function","handle_function_call","handle_hir_block","handle_import","handle_infinite_loop","handle_literal_value","handle_module","handle_nested_block","handle_object","handle_statement","handle_struct","handle_struct_initialization","handle_tuple_initialization","handle_type_pattern","handle_variable_declaration","handle_variable_update","hir","into","into","into","namespace","never","new","next_context","next_context_id","next_context_with_return_data","null","promote","resolve_path","resolve_path_without_last","return_value","return_values_arena","singletons","target_context_for","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","variable_get_or_insert","0","0","Block","BlockConditionalComptime","BlockConditionalRuntime","Function","Loop","ManuallyHandled","MirContext","MirContextId","MirContextKind","Module","Pass","ReturnContext","ReturnValuesArena","ReturnValuesData","ReturnValuesDataId","Specific","Struct","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","compilation_id","default","default_return","default_return_value","eq","eq","eq","equivalent","equivalent","equivalent","explicit_return","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","get_mut","has_early_returned","hash","hash","id","id","into","into","into","into","into","into","into","is_runtime","kind","local_namespace","local_namespace_id","ne","ne","new","new","nodes","partial_cmp","return_context","return_span","return_value","return_values","return_values","return_values_id","return_values_mut","set_handled_manually","super_context_id","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unconditionally_returned","0","0","Branch","Branch","FunctionCall","FunctionCall","Goto","Goto","MirNode","PrimitiveDeclaration","PrimitiveDeclaration","PropertyAccess","PropertyAccess","RuntimeCopy","RuntimeCopy","RuntimePromotion","RuntimePromotion","VariableUpdate","VariableUpdate","VerifyPropertyExists","VerifyPropertyExists","VerifyTupleLength","VerifyTupleLength","VerifyValueComptime","VerifyValueComptime","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","comptime_update_allowed","condition","condition_span","context_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","function","ident","ident_span","into","into","into","into","into","into","into","into","into","into","into","into","is_comptime","length","mir_node_declaration","neg_branch","obj_id","parameters","pos_branch","property_ident","return_value","return_value","self_obj","span","span","span","span","span","span","span","span","span","span","span","target","target","target","target","target_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","value","value_id","0","0","0","0","0","0","0","0","0","0","0","MirObject","MirObjectId","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","compilation_id","defining_context","eq","equivalent","fmt","fmt","from","from","get_property","hash","id","id","into","into","local_namespace_id","ne","new","new_in","partial_cmp","property_get_or_insert","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","Bool","FormatString","Function","FunctionClass","Int","MirFormatString","MirFormatStringComponent","MirFunction","MirFunctionParameter","MirModule","MirPrimitive","MirStruct","MirStructType","Module","Never","Null","String","String","Struct","StructType","Tuple","TupleClass","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","context_id","context_id","context_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","ident","ident_span","into","into","into","into","into","into","into","into","last_item_span","name","name","parameters","properties","return_span","return_type","return_type_span","span","span","struct_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","LocalNamespaceValue","MirLocalNamespace","MirLocalNamespaceId","MirNamespace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compilation_id","default","eq","equivalent","fmt","fmt","fmt","from","from","from","get_local_namespace","get_local_namespace_mut","get_obj","get_obj_mut","get_obj_namespace","get_obj_namespace_mut","get_property","insert","insert_local_namespace","insert_object","into","into","into","is_empty","iter","local_namespaces","ne","new","objects","properties","property_get_or_insert","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["debris_mir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_mir::mir_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_mir::mir_builder::ReturnContextBehavior","debris_mir::mir_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_mir::mir_context::ReturnContext","","debris_mir::mir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_mir::mir_nodes::MirNode","","","","","","","","","","","debris_mir::mir_object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_mir::mir_primitives","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_mir::mir_primitives::MirFormatStringComponent","","debris_mir::mir_primitives::MirPrimitive","","","","","","","","","","","","debris_mir::namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>ReturnContext::Specific(..)</code> with the current …","","Holds some singletons objects for easier access","Simple uses the specified return context","Simple enum to specify how to calculate the return context","","","","","","","","","","","","","","","","","","Returns true if any context, that lies ‘between’ …","","","","","","","","","","","","Calculates the <code>ReturnContext</code> to use for a context with …","","","","","","","","","","","","","","Handles a nested block and returns its id","Evaluates the object and insert it into the given namespace","","","","","","","","","","","","","","","Creates a new context and returns the previous one","","Creates a new context with default return new return …","","","Returns the object specified by the path","Resolves the path up to the last ident, so that the …","","","","Finds the context to return to using <code>control_flow</code>","","","","","","","","","","","Traverses the namespaces stack until it finds <code>ident</code>. If …","","","","","","","","Don’t jump anywhere, because the jump was handled …","","","","","Don’t jump anywhere, just return to the caller","Specifies where to jump to when all commands of a context …","","Stores returns values a given context can return Multiple …","","Jump to a specific context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The id of the explicitly returned value and the span where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the id of the return value This should be the …","","","","","","The parent context of this context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An if-statement which has a condition, a return value and …","","","","Goes to a specific context","","","Declares a primitive value and assigns it to <code>target</code>","","Binds a required property of an object to an object id so …","","Tries to copy a value (Does nothing if the value is …","","Tries to promote a comptime value to a runtime value, but …","","Updates the variable at <code>target</code> to <code>value</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the update may be performed at compile time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The target to which should be written to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The object with the required ident","","","","","","","","","","","","A duck-typed object. A <code>MirObject</code> contains all attributes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The span of the expression that defined the return type","","The span of the return type definition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tuple of the actual object and the span where it was …","Stores all the identifiers that are local to a given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new object. This object stores the current …","","","","","","","","","The objects are indexed by <code>MirObjectId.id</code> For this reason, …","All properties of this namespace.","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,1,1,2,1,2,1,2,0,0,0,0,0,0,1,1,2,1,1,2,1,2,1,2,3,0,0,3,0,4,5,3,4,5,3,4,3,3,4,5,4,4,4,4,4,4,0,4,5,4,5,3,3,0,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,3,4,5,4,4,4,4,5,4,4,4,4,4,4,4,3,4,5,3,4,5,3,4,5,3,4,6,7,8,8,8,8,8,9,0,0,0,8,9,0,0,0,0,9,8,10,11,8,7,10,12,13,9,11,8,7,10,12,13,9,8,7,13,9,8,7,13,9,13,13,10,12,8,8,7,13,8,7,13,12,11,8,7,10,12,13,9,11,8,7,10,12,13,9,10,10,11,7,13,11,13,11,8,7,10,12,13,9,8,11,11,11,7,13,11,12,11,13,11,12,12,11,10,11,11,9,11,8,7,13,9,11,8,7,10,12,13,9,11,8,7,10,12,13,9,11,8,7,10,12,13,9,12,14,15,0,16,0,16,0,16,0,0,16,0,16,0,16,0,16,0,16,0,16,0,16,0,16,17,18,19,20,21,22,23,24,25,26,27,16,17,18,19,20,21,22,23,24,25,26,27,16,26,17,17,19,17,18,19,20,21,22,23,24,25,26,27,16,17,18,19,20,21,22,23,24,25,26,27,16,16,16,16,16,16,16,16,16,16,16,16,18,24,18,17,18,19,20,21,22,23,24,25,26,27,16,17,23,0,17,24,18,17,27,17,18,18,17,18,19,20,21,22,23,24,25,26,27,20,21,25,26,27,17,18,19,20,21,22,23,24,25,26,27,16,17,18,19,20,21,22,23,24,25,26,27,16,17,18,19,20,21,22,23,24,25,26,27,16,20,21,22,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,0,0,39,40,39,40,40,40,40,40,39,40,40,39,40,39,40,40,40,39,40,39,40,39,40,40,39,40,40,40,39,40,39,40,39,40,41,42,42,42,42,42,0,0,0,0,0,0,0,0,42,42,42,42,43,42,42,42,42,43,42,41,43,44,45,46,47,48,42,41,43,44,45,46,47,48,45,46,48,42,41,43,45,46,47,48,42,41,41,43,44,45,46,47,48,48,47,42,41,43,44,45,46,47,48,48,45,46,45,46,45,45,45,44,48,47,42,41,43,44,45,46,47,48,42,41,43,44,45,46,47,48,44,42,41,43,44,45,46,47,48,44,47,49,50,51,52,53,54,55,56,57,58,59,60,61,56,62,0,0,0,0,63,62,64,63,62,64,62,64,62,64,63,64,62,62,63,62,64,63,62,64,63,63,63,63,63,63,64,64,63,63,63,62,64,64,64,63,62,63,63,64,64,62,64,63,62,64,63,62,64,63,62,64],"f":[null,null,[[]],[[]],[[]],[[]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["compilecontext",3],["hir",3]],["result",6]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6,[["mir",3]]]],[[],["returncontextbehavior",4]],[[]],null,[[["mirobjectid",3]],["bool",15]],null,[[["mirobjectid",3],["span",3]],["mirobjectid",3]],[[["mircontextkind",4],["option",4,[["mircontextid",3]]],["mirlocalnamespaceid",3],["returnvaluesdataid",3],["returncontextbehavior",4]],["mircontext",3]],null,[[]],null,[[["mircontextid",3],["fxhashmap",6],["mircontext",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[["returncontext",4]]],[[]],[[["fxhashmap",6],["mircontext",3],["mircontextid",3]],["mircontext",3]],[[["mircontextid",3]],["mircontext",3]],[[["fxhashmap",6],["mircontext",3],["mircontextid",3]],["mircontext",3]],[[["spannedidentifier",3]],["ident",4]],[[["mircontextid",3]],["mirlocalnamespace",3]],[[["hircontrolkind",4],["mircontextid",3]],["returncontext",4]],[[["ident",4]],["option",4,[["mirobjectid",3]]]],[[["hirblock",3],["mircontextkind",4]],["result",6]],[[["hirblock",3]],["result",6]],[[["hirconditionalbranch",3]],["result",6,[["mirobjectid",3]]]],[[["hircontrolflow",3]],["result",6]],[[["hirexpression",4]],["result",6,[["mirobjectid",3]]]],[[["hirfunction",3]],["result",6]],[[["hirfunctioncall",3]],["result",6,[["mirobjectid",3]]]],[[["hirblock",3]],["result",6,[["mirobjectid",3]]]],[[["hirimport",3]],["result",6]],[[["hirinfiniteloop",3]],["result",6,[["mirobjectid",3]]]],[[["hirconstvalue",4]],["result",6,[["mirobjectid",3]]]],[[["hirmodule",3]],["result",6]],[[["hirblock",3],["mircontextkind",4],["returncontextbehavior",4],["option",4]],["result",6,[["mircontextid",3]]]],[[["hirobject",4]],["result",6]],[[["hirstatement",4]],["result",6]],[[["hirstruct",3]],["result",6]],[[["hirstructinitialization",3]],["result",6,[["mirobjectid",3]]]],[[["hirtupleinitialization",3]],["result",6,[["mirobjectid",3]]]],[[["hirtypepattern",4]],["result",6,[["mirobjectid",3]]]],[[["hirvariableinitialization",3]],["result",6]],[[["hirvariableupdate",3]],["result",6]],null,[[]],[[]],[[]],null,null,[[["compilecontext",3],["hir",3]]],[[["mircontextkind",4],["option",4,[["mircontextid",3]]],["mirlocalnamespaceid",3],["returnvaluesdataid",3],["returncontextbehavior",4]],["mircontextid",3]],null,[[["mircontextkind",4],["option",4,[["mircontextid",3]]],["mirlocalnamespaceid",3],["returncontext",4]],["mircontextid",3]],null,[[["mirobjectid",3],["span",3]],["mirobjectid",3]],[[["identifierpath",3]],["mirobjectid",3]],[[["identifierpath",3]]],[[["mircontextid",3],["mirobjectid",3],["span",3]]],null,null,[[["hircontrolkind",4]],["option",4,[["mircontext",3]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["ident",4],["span",3]],["mirobjectid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["returnvaluesdata",3]],["returnvaluesdataid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mircontextkind",4]],[[],["returnvaluesdataid",3]],[[],["mircontextid",3]],[[],["returncontext",4]],[[]],[[]],[[]],[[]],[[["mircontextid",3]],["ordering",4]],null,[[],["returnvaluesarena",3]],null,[[["mirsingletons",3]],["mirobjectid",3]],[[["mircontextkind",4]],["bool",15]],[[["returnvaluesdataid",3]],["bool",15]],[[["mircontextid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["returnvaluesdataid",3]],["returnvaluesdata",3]],[[["returnvaluesdataid",3]],["returnvaluesdata",3]],null,[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[["mirnamespace",3]],["mirlocalnamespace",3]],null,[[["returnvaluesdataid",3]],["bool",15]],[[["mircontextid",3]],["bool",15]],[[["mircontextid",3],["option",4,[["mircontextid",3]]],["mirlocalnamespaceid",3],["mircontextkind",4],["returnvaluesdataid",3],["returncontext",4]]],[[["mirobjectid",3]]],null,[[["mircontextid",3]],["option",4,[["ordering",4]]]],null,[[],["option",4,[["span",3]]]],[[],["mirobjectid",3]],[[["returnvaluesarena",3]],["returnvaluesdata",3]],null,null,[[["returnvaluesarena",3]],["returnvaluesdata",3]],[[]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["branch",3]]],[[["verifyvaluecomptime",3]]],[[["primitivedeclaration",3]]],[[["variableupdate",3]]],[[["verifytuplelength",3]]],[[]],[[["verifypropertyexists",3]]],[[["runtimecopy",3]]],[[["runtimepromotion",3]]],[[["goto",3]]],[[["functioncall",3]]],[[["propertyaccess",3]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["mirobjectid",3]],[[]],[[["mirobjectid",3]],["ordering",4]],null,null,[[["mirobjectid",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["mirnamespace",3],["ident",4]],["option",4,[["mirobjectid",3]]]],[[]],null,null,[[]],[[]],null,[[["mirobjectid",3]],["bool",15]],[[["compilationid",3],["u32",15]]],[[["mirnamespace",3],["mircontextid",3],["mirobjectid",3]]],[[["mirobjectid",3]],["option",4,[["ordering",4]]]],[[["mirnamespace",3],["vec",3],["ident",4],["span",3],["mircontextid",3]],["mirobjectid",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["vec",3,[["mirformatstringcomponent",4]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["mirlocalnamespaceid",3]],[[],["mirlocalnamespace",3]],[[]],[[]],null,[[],["mirlocalnamespace",3]],[[["mirlocalnamespaceid",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["mirlocalnamespaceid",3]],["mirlocalnamespace",3]],[[["mirlocalnamespaceid",3]],["mirlocalnamespace",3]],[[["mirobjectid",3]],["mirobject",3]],[[["mirobjectid",3]],["mirobject",3]],[[["mirobjectid",3]],["mirlocalnamespace",3]],[[["mirobjectid",3]],["mirlocalnamespace",3]],[[["ident",4]],["option",4,[["mirobjectid",3]]]],[[["mirobjectid",3],["ident",4],["span",3]]],[[],["mirlocalnamespaceid",3]],[[["mircontextid",3]],["mirobject",3]],[[]],[[]],[[]],[[],["bool",15]],[[]],null,[[["mirlocalnamespaceid",3]],["bool",15]],[[["compilecontext",3]]],null,null,[[["vec",3],["mirnamespace",3],["mirobjectid",3],["ident",4],["span",3],["mircontextid",3]],["mirobjectid",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"Mir"],[3,"MirExternItem"],[4,"ReturnContextBehavior"],[3,"MirBuilder"],[3,"MirSingletons"],[13,"Normal"],[3,"ReturnValuesDataId"],[4,"MirContextKind"],[4,"ReturnContext"],[3,"ReturnValuesArena"],[3,"MirContext"],[3,"ReturnValuesData"],[3,"MirContextId"],[13,"ManuallyHandled"],[13,"Specific"],[4,"MirNode"],[3,"Branch"],[3,"FunctionCall"],[3,"Goto"],[3,"RuntimePromotion"],[3,"RuntimeCopy"],[3,"VerifyValueComptime"],[3,"VerifyTupleLength"],[3,"VerifyPropertyExists"],[3,"PrimitiveDeclaration"],[3,"VariableUpdate"],[3,"PropertyAccess"],[13,"Branch"],[13,"FunctionCall"],[13,"Goto"],[13,"RuntimePromotion"],[13,"RuntimeCopy"],[13,"VerifyValueComptime"],[13,"VerifyTupleLength"],[13,"VerifyPropertyExists"],[13,"PrimitiveDeclaration"],[13,"VariableUpdate"],[13,"PropertyAccess"],[3,"MirObject"],[3,"MirObjectId"],[3,"MirFormatString"],[4,"MirPrimitive"],[4,"MirFormatStringComponent"],[3,"MirFunctionParameter"],[3,"MirFunction"],[3,"MirStructType"],[3,"MirStruct"],[3,"MirModule"],[13,"String"],[13,"Value"],[13,"Int"],[13,"Bool"],[13,"String"],[13,"FormatString"],[13,"Function"],[13,"FunctionClass"],[13,"Module"],[13,"Tuple"],[13,"TupleClass"],[13,"StructType"],[13,"Struct"],[3,"MirLocalNamespaceId"],[3,"MirNamespace"],[3,"MirLocalNamespace"]]},\
"debris_std":{"doc":"The standard library implementation for the debris language","t":[5,5,5,5,5,5,5,5,5,14,5,5,5,5,5,5,14,5,5,5],"n":["bool_to_int","dyn_int","execute","execute_format_string","execute_string","function_for","int_to_int","load","load_all","match_parameters","print","print_format_string","print_int","print_int_static","print_string","register_primitives","register_primitives","register_ticking_function","static_bool_to_int","static_int_to_int"],"q":["debris_std","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Executes a string as a command and returns the result","","","Loads the standard library module","","","","","","","","Registers all primitive types","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[["functioncontext",3],["objbool",3]],["objint",3]],[[["functioncontext",3]],["langresult",6,[["objint",3]]]],[[["functioncontext",3]],["langresult",6,[["objint",3]]]],[[["functioncontext",3],["objformatstring",3]],["objint",3]],[[["functioncontext",3],["objstring",3]],["objint",3]],[[["str",15]],["objfunction",3]],[[["objint",3]],["objint",3]],[[["typecontext",3]],["objmodule",3]],[[["typecontext",3]],["hashmap",3,[["ident",4],["objectref",3]]]],null,[[["functioncontext",3]],["langresult",6]],[[["functioncontext",3],["objformatstring",3]]],[[["functioncontext",3],["objint",3]]],[[["functioncontext",3],["objstaticint",3]]],[[["functioncontext",3],["objstring",3]]],[[["typecontext",3],["objmodule",3]]],null,[[["functioncontext",3],["objnativefunction",3]]],[[["functioncontext",3],["objstaticbool",3]],["objint",3]],[[["functioncontext",3],["objstaticint",3]],["objint",3]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};