var searchIndex = JSON.parse('{\
"debris_backends":{"doc":"Backend implementations for the debris compiler","t":[8,3,11,11,0,11,11,11,10,11,11,11,11,11,13,13,13,4,13,3,13,13,13,13,4,4,13,13,4,13,13,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Backend","DatapackBackend","borrow","borrow_mut","common","default","fmt","from","generate","generate","into","try_from","try_into","type_id","Dummy","Equal","Execute","ExecuteComponent","Function","FunctionIdent","IfScoreRange","IfScoreRelation","JsonMessage","Maximum","MinecraftCommand","MinecraftRange","Minimum","NotEqual","ObjectiveCriterion","Range","RawCommand","ScoreboardAdd","ScoreboardOperation","ScoreboardOperationAdd","ScoreboardPlayer","ScoreboardRemove","ScoreboardSet","ScoreboardSetEqual","ScoreboardSetFromResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_operator","into","into","into","into","into","into","is_collection","namespace","path","player","scoreboard","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","comparison","player","player1","player2","range","and_then","command","command","criterion","function","json_name","message","name","name","operation","parts","player","player","player","player1","player1","player2","player2","target","value","value","from","to"],"q":["debris_backends","","","","","","","","","","","","","","debris_backends::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::common::ExecuteComponent","","","","","debris_backends::common::MinecraftCommand","","","","","","","","","","","","","","","","","","","","","debris_backends::common::MinecraftRange",""],"d":["A Backend for debris, which has to convert <code>LLIR</code> into a …","The Datapack Backend implementation","","","Defines common items that are specific to the latest …","","","","Converts the llir into a directory","","","","","","Mostly used by debris","A range that only contains one value","Any used execute command","A component in an execute command","Calls another function","A unique minecraft function identifier","Tests for a relation between a score and a static value","Tests for a relation between to scores","","A range with an upper bound, eg. ..50","Enumerates all minecraft commands that are used by any …","Any valid minecraft range","A range with a lower bound, eg. 0..","A range that contains every value except one","Any objective criterion","A full range, eg. 1..99","","","","Quick operation which adds or removes a static value","A combination of scoreboard and player","","Sets the scoreboard value to a specific integer","Sets the scoreboard value to another scorboard value","Sets the scoreboard value equal to the result of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether this function is a collection, marked by a <code>#</code>","The namespace of this function, for example <code>debris</code>","The path of this function, for example <code>foo/bar/baz</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,1,1,1,2,1,1,1,1,1,3,4,5,0,5,0,6,6,5,4,0,0,4,4,0,4,5,5,5,5,0,5,5,5,5,5,6,4,7,3,8,5,6,4,7,3,8,5,6,4,7,3,5,6,4,7,3,5,5,6,6,4,4,7,3,3,8,8,5,6,4,7,3,8,4,5,6,4,7,3,8,8,8,8,7,7,5,6,4,7,3,5,6,4,3,8,5,6,4,7,3,8,5,6,4,7,3,8,5,6,4,7,3,8,9,10,9,9,10,11,12,13,14,15,14,16,14,17,18,11,19,12,20,21,18,21,18,16,19,20,22,22],"f":[null,null,[[]],[[]],null,[[],["datapackbackend",3]],[[["formatter",3]],["result",6]],[[]],[[["llir",3],["compilecontext",3]],["directory",3]],[[["llir",3],["compilecontext",3]],["directory",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["minecraftcommand",4]],[[],["executecomponent",4]],[[],["minecraftrange",4]],[[],["scoreboardplayer",3]],[[],["objectivecriterion",4]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scoreboardcomparison",4],["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"DatapackBackend"],[8,"Backend"],[4,"ObjectiveCriterion"],[4,"MinecraftRange"],[4,"MinecraftCommand"],[4,"ExecuteComponent"],[3,"ScoreboardPlayer"],[3,"FunctionIdent"],[13,"IfScoreRelation"],[13,"IfScoreRange"],[13,"Execute"],[13,"ScoreboardSetFromResult"],[13,"RawCommand"],[13,"ScoreboardAdd"],[13,"Function"],[13,"JsonMessage"],[13,"ScoreboardRemove"],[13,"ScoreboardOperation"],[13,"ScoreboardSet"],[13,"ScoreboardOperationAdd"],[13,"ScoreboardSetEqual"],[13,"Range"]]},\
"debris_common":{"doc":"Common items used by the compiler","t":[4,13,13,13,13,13,13,13,13,13,3,6,3,13,4,3,13,13,13,13,13,13,3,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Accessor","Add","And","Clone","CmpEq","CmpGe","CmpGt","CmpLe","CmpLt","CmpNe","Code","CodeId","CodeRef","Div","Ident","InputFiles","Modu","Mul","Not","Or","Path","PromoteRuntime","Span","Special","SpecialIdent","Sub","UnaryMinus","Value","add_input","at_start","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","dropped_left_n","empty","end","eq","eq","eq","eq","eq","equals_ident","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_code","get_code_ref","get_input","get_input_offset","get_offset","get_relative_span","get_span","get_span_code","get_span_line","get_span_str","get_total_offset","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","is_empty","len","ne","ne","ne","ne","new","new","new","path","source","start","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","until"],"q":["debris_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An accessor represents a dotted path","","","","","","","","","","A code object contains the source code and optionally a …","The type of a code id, currently just a usize","A handy object to work in a specific input file","","identifier for a value","Keeps track of all input files and allows to make cheap …","","","","","A path like a.b.c","","A span which uniquely specifies a span of characters in …","","Every special identifier","","","Since Idents have be cloned quite often a generic value is…","Adds a code unit and returns its ID","Returns a span with the same start and a length of one","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty Span","Returns the end of this span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the input file with this id","Gets the offset of the file with this id","","Returns a span that is relative to the start of this code …","","","Returns the line in a file at which this span begins","Returns the str that corresponds to a span","Calculates the total byte offset","","","","","","","","","","","","","Returns, whether this span is empty","Returns the length of this span","","","","","Creates a new identifier","","Creates a new <code>Span</code> from the starting character and its …","","","Returns the start of this span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new span which ranges from the start of this …"],"i":[0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,2,1,0,3,0,1,1,3,4,5,3,1,2,6,7,4,5,3,1,2,6,7,4,5,3,1,2,7,5,3,1,2,7,5,4,5,5,5,3,1,2,6,5,2,7,3,3,1,1,2,6,7,4,5,3,3,3,1,2,2,6,7,4,5,7,4,4,4,7,7,7,4,4,4,4,3,1,2,6,5,3,1,2,6,7,4,5,5,5,3,2,6,5,3,4,5,6,6,5,3,1,2,7,5,3,1,3,1,2,6,7,4,5,3,1,2,6,7,4,5,3,1,2,6,7,4,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["code",3]],["codeid",6]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ident",4]],[[],["specialident",4]],[[],["accessor",4]],[[],["coderef",3]],[[],["span",3]],[[]],[[]],[[]],[[]],[[]],[[],["inputfiles",3]],[[["usize",15]],["span",3]],[[]],[[],["usize",15]],[[["ident",4]],["bool",15]],[[["specialident",4]],["bool",15]],[[["accessor",4]],["bool",15]],[[["code",3]],["bool",15]],[[["span",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["specialident",4]]],[[]],[[]],[[["ident",4]]],[[]],[[]],[[]],[[]],[[],["code",3]],[[["codeid",6]],["coderef",3]],[[["codeid",6]],["code",3]],[[["codeid",6]],["usize",15]],[[],["usize",15]],[[["span",3]],["span",3]],[[],["span",3]],[[["span",3]],["coderef",3]],[[["span",3]],["usize",15]],[[["span",3]],["str",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],[[["ident",4]],["bool",15]],[[["accessor",4]],["bool",15]],[[["code",3]],["bool",15]],[[["span",3]],["bool",15]],[[["asref",8],["str",15]]],[[]],[[["usize",15]]],null,null,[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["span",3]]]],"p":[[4,"SpecialIdent"],[4,"Accessor"],[4,"Ident"],[3,"InputFiles"],[3,"Span"],[3,"Code"],[3,"CodeRef"]]},\
"debris_core":{"doc":"Core implementation of the debris compiler","t":[13,4,13,13,3,3,3,13,13,13,13,13,13,13,3,13,13,13,8,6,3,4,13,13,13,13,13,13,4,4,8,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,0,11,0,10,0,11,11,11,11,0,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,17,13,4,13,13,13,13,3,13,4,6,13,13,13,13,13,13,3,13,6,3,3,3,13,13,13,13,13,13,13,13,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,8,8,8,11,11,10,11,11,11,10,11,10,10,11,10,11,11,11,13,3,13,3,3,3,3,3,4,3,13,13,11,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,12,13,13,13,13,13,11,12,11,11,11,11,11,11,11,13,13,13,13,13,13,13,12,13,11,11,11,11,11,11,11,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,11,0,13,11,13,13,12,13,13,13,13,13,13,13,13,13,12,11,13,11,11,11,11,11,11,11,11,11,13,11,11,11,13,12,12,13,11,11,11,11,11,11,13,13,13,13,11,11,13,13,13,13,11,11,11,12,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,11,11,11,11,11,11,11,11,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,3,4,3,4,4,4,4,3,3,3,3,3,4,4,3,4,3,3,4,3,4,3,3,4,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,12,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,0,0,12,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,0,3,4,13,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,3,13,3,13,3,13,13,13,4,13,13,3,4,3,13,3,13,3,4,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,3,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,4,13,4,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,13,13,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,13,13,13,3,4,13,4,13,13,13,13,3,3,3,3,3,3,3,3,3,4,3,3,4,8,3,13,13,16,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,12,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,12,12,11,12,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,10,10,10,11,11,10,10,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,5,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,3,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,3,4,3,4,3,6,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,6,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,11,11,12],"n":["Any","BuildMode","Class","Class","CompileContext","Config","DebrisObject","Debug","DynamicBool","DynamicInt","FormatString","Full","Function","Module","Namespace","Never","None","Null","ObjectPayload","ObjectProperties","ObjectRef","OptMode","Release","StaticBool","StaticInt","String","Struct","StructObject","Type","TypePattern","ValidPayload","add_input_file","add_object","add_value","add_value_at","ancestor","as_any","as_function","as_function","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_mode","class","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","config","create_class","create_class","declare_as_variable","default","default","default_scoreboard_name","deref","downcast_payload","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_payload","function_interface","get","get_by_id","get_class","get_class","get_class","get_class","get_input_file","get_property","get_property","get_property","get_unique_id","hash","hir","id_counter","input_files","into","into","into","into","into","into","into","into","into","into_object","into_result","into_result","into_result","is_bool","is_debug","is_empty","is_int","is_never","is_release","iter","len","llir","matches","memory","memory_layout","mir","ne","ne","ne","new","objects","opt_mode","payload","project_description","project_name","replace_object_at","runtime_encodable","should_be_const","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_ctx","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsAnnotationSnippet","COLORED","CircularImport","CompileError","ComptimeVariable","ConstVariable","ExpectedBoolean","InvalidControlFlow","LangError","LangError","LangErrorKind","LangResult","MissingModule","MissingProperty","MissingStructInitializer","MissingVariable","NonComptimeVariable","NotYetImplemented","ParseError","ParseError","Result","SliceOwned","SnippetOwned","SourceAnnotationOwned","UnexpectedOperator","UnexpectedOverload","UnexpectedPattern","UnexpectedStructInitializer","UnexpectedType","UnpromotableType","UnreachableCode","VariableAlreadyDefined","annotation_type","annotation_type","annotations","as_annotation_snippet","as_annotation_snippet","as_annotation_snippet","as_annotation_snippet","as_slice","as_snippet","as_source_annotation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","expected","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","footer","format","from","from","from","from","from","from","from","from","from","id","into","into","into","into","into","into","into","kind","label","ne","ne","ne","ne","new","origin","range","slices","source","source","span","span","title","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","available","class","ctx_span","declared","error","expected","expected","got","got","got","got","ident","lhs","missing","mode","module","msg","name","notes","operator","parameters","parent","path","previous_definition","property","rhs","similar","similar","strukt","strukt","var_name","var_name","var_name","var_name","DebrisFunctionInterface","NormalizedFunctionInterface","ToFunctionInterface","ValidReturnType","borrow","borrow_mut","call","from","from","from","get_class","into","into_result","query_parameters","query_return","to_function_interface","try_from","try_into","type_id","COMMENT","DebrisParser","EOI","Hir","HirContext","HirFile","IdentifierPath","ImportDependencies","Rule","SpannedIdentifier","WHITESPACE","accessor","add_import_file","assignment","assignment_comptime","assignment_let","attribute_list","block","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone","clone_into","clone_into","clone_into","cmp","code_id","code_id","compare_eq","compare_ge","compare_gt","compare_le","compare_lt","compare_ne","compile_context","control_flow","control_flow_break","control_flow_continue","control_flow_kw","control_flow_return","default","dependencies","display","eq","eq","eq","equivalent","equivalent","equivalent","exp_infix","exp_parens","exp_prefix","exp_primary","expression","expression_base","expression_without_struct","file_offset","fixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_pattern","format_string","format_string_text","format_string_var","from","from","from","from","from","from","from","from","from","from","from_code","function_call","function_def","function_signature","get","get_ident","hash","hash","hash","hir_nodes","ident","idents","if_branch","import","imported_modules","inf_loop","infix_and","infix_comparison","infix_divide","infix_minus","infix_modulo","infix_or","infix_plus","infix_times","input_file","insert","integer","into","into","into","into","into","into","into","into","is_empty","item","iter","last","len","loop_block","main_function","main_function","module","ne","ne","new","new","new","normalize_pest_span","object","object_def","param_list","parameter_list","parse","partial_cmp","prefix_minus","prefix_not","prefix_value","program","single_ident","span","span","span","statement","string","string_inner","struct_def","struct_initialization","struct_initializer_pair","struct_initializer_pairs","struct_items","struct_variables","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_def","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_pattern","type_pattern_list","value","value_update","variable_declaration","And","Attribute","BinaryOperation","Block","Block","Bool","Break","Comparison","Comptime","ConditionalBranch","ConditonalBranch","Continue","ControlFlow","Divide","Eq","Fixed","FormatString","Function","Function","FunctionCall","FunctionCall","Ge","Gt","HirBlock","HirComparisonOperator","HirConditionalBranch","HirConstValue","HirControlFlow","HirControlKind","HirDeclarationMode","HirExpression","HirFormatStringMember","HirFunction","HirFunctionCall","HirImport","HirInfiniteLoop","HirInfix","HirInfixOperator","HirItem","HirModule","HirObject","HirParameterDeclaration","HirPrefix","HirPrefixOperator","HirPropertyDeclaration","HirStatement","HirStruct","HirStructInitialization","HirTypePattern","HirVariableInitialization","HirVariableUpdate","Import","InfiniteLoop","InfiniteLoop","Integer","Le","Let","Lt","Minus","Minus","Module","Modulo","Ne","Not","Object","Or","Path","Path","Plus","Return","Statement","String","String","Struct","StructInitialization","Times","UnaryOperation","Value","Variable","Variable","VariableDecl","VariableUpdate","accessor","accessor","accessor","accessor","attributes","attributes","attributes","block","block","block","block_negative","block_positive","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","condition","datatype","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_ident","get_raw_special_ident","get_special_ident","id","ident","ident","ident","ident","ident","ident","ident_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","kind","last_item_span","mode","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","objects","objects","operator","operator","parameter_span","parameters","parameters","parameters_span","properties","return_type","return_type_span","return_value","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","statements","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","values","span","span","span","span","span","value","value","value","value","value","lhs","operation","operation","rhs","value","parameters","return_type","span","Llir","LlirContext","Runtime","add_on_load","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","fmt","fmt","fmt","fmt","from","from","from","from_mir","functions","get_function_calls","get_object","into","into","into","json_format","llir_nodes","load_blocks","replace_object","runtime","schedule","scheduled_blocks","set_object","span","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utils","FormattedText","JsonFormatComponent","RawText","Score","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","into","into","ne","ne","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","Actionbar","And","BinaryOperation","BinaryOperation","Branch","Branch","Call","Call","Chat","Compare","Condition","Condition","Execute","ExecuteRaw","ExecuteRawComponent","FastStore","FastStore","FastStoreFromResult","FastStoreFromResult","Function","Node","Nop","Or","Read","Read","ReadWrite","ReadWrite","ScoreboardValue","String","Subtitle","Title","VariableAccess","VariableAccessMut","Write","Write","Write","WriteMessage","WriteTarget","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calls_function","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","condition","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","id","id","id","id","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_effect_free","is_empty","is_simple","iter","lhs","message","neg_branch","nodes","not","operation","pos_branch","reads_from","returned_value","rhs","scoreboard","scoreboard","scoreboard","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variable_accesses","variable_accesses","variable_accesses_mut","variable_accesses_mut","writes_to","comparison","lhs","rhs","BlockId","Custom","Divide","Equal","Greater","GreaterOrEqual","Internal","ItemId","Less","LessOrEqual","Main","Max","Min","Minus","Modulo","NotEqual","Plus","Scoreboard","Scoreboard","ScoreboardComparison","ScoreboardOperation","ScoreboardValue","Static","Times","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","context","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","evaluate","evaluate","flip_sides","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","id","id","into","into","into","into","into","into","invert","ne","ne","ne","ne","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MemoryCounter","MemoryLayout","Multiple","One","Unsized","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","copy","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","into","into","mem_copy","ne","ne","new","next_id","next_item","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Block","BranchIf","Break","CachedFunctionSignature","Call","ComptimeConditionalBlock","Concrete","ContextId","ContextKind","Continue","ControlFlowMode","Function","GotoContext","JumpLocation","Loop","Mir","MirBranchIf","MirBuilder","MirCall","MirContext","MirContextInfo","MirContextMap","MirGotoContext","MirJumpLocation","MirNode","MirReturnValue","MirUpdateValue","MirValue","MirVisitor","NamespaceArena","NativeFunction","Normal","Output","Return","ReturnValue","ReturnValues","RuntimeConditionalBlock","Struct","Template","UpdateValue","add","add_anonymous_object","add_anonymous_template","add_anonymous_template","add_context","add_unique_value","add_unique_value","add_value","add_value","arena","arena","arena_mut","as_inner","assert_type","assert_type_exact","block_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","compile_context","concrete","condition","context","context","context_id","context_id","context_info","context_info","context_mut","contexts","control_flow","convert_into_template","default","default","default","default","default_return","default_return","deref","deref_mut","dummy","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exits_block","expect_concrete","expect_template","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hir","function","get","get","get_from_spanned_ident","get_from_spanned_ident","get_ident","get_main_context","get_mut","get_property","get_single","get_template","get_template_or_default","get_type_pattern","hash","id","id","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_concrete","is_dynamic","is_function","is_loop","is_normal","is_template","kind","main_context","main_context","matches_control_flow","namespace","namespace_mut","namespace_mut","namespaces","ne","ne","ne","ne","ne","ne","ne","ne","neg_branch","new","new","new_value","next_jump_location","nodes","null","parameters","parameters","partial_cmp","pos_branch","push","register","register_function_call","register_function_call","register_members","resolve_path","resolve_path","return_index","return_type","return_value","return_values","search","signature_class","span","span","span","span","template","template","ticking_contexts","ticking_contexts","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","visit","visit_branch_if","visit_call","visit_goto_context","visit_jump_location","visit_node","visit_node","visit_return_value","visit_update_value","class","id","obj_bool","obj_bool_static","obj_class","obj_format_string","obj_function","obj_int","obj_int_static","obj_module","obj_native_function","obj_never","obj_null","obj_string","obj_struct","obj_struct_object","ObjBool","and_static","as_scoreboard_value","borrow","borrow_mut","class","eq","equivalent","fmt","fmt","from","from","get_class","id","into","into_result","memory_layout","memory_layout","ne","new","or_static","to_string","try_from","try_into","type_id","ObjStaticBool","as_scoreboard_value","borrow","borrow_mut","class","eq","equivalent","fmt","fmt","from","from","get_class","into","into_result","memory_layout","ne","to_string","try_from","try_into","type_id","value","HasClass","ObjClass","borrow","borrow_mut","class","class","class","clone","clone_into","deref","eq","equivalent","fmt","fmt","from","from","get_class","get_property","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","FormatStringComponent","ObjFormatString","String","Value","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","components","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","get_class","into","into","into_result","memory_layout","ne","ne","new","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Any","CompilerFunction","CompilerImplemented","FunctionContext","FunctionFlags","FunctionOverload","FunctionParameters","FunctionSignature","FunctionSignatureRef","None","ObjFunction","RegisterTickingFunction","Specific","as_function","block_for","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","callback_function","class","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compile_context","default","emit","eq","eq","equivalent","equivalent","expected_signatures","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_class","get_object","get_object_by_ident","into","into","into","into","into","into","into","into_result","item_id","llir_builder","matches","memory_layout","ne","new","new","new","new_single","null","overload","parameters","return_type","signature","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_flags","ObjInt","as_scoreboard_value","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","from","get_class","id","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","ObjStaticInt","as_scoreboard_value","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_class","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","value","ModuleFactory","ObjModule","borrow","borrow","borrow_mut","borrow_mut","call","class","clone","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","from","get_class","get_property","ident","import_members","into","into","into_result","members","memory_layout","ne","new","new","register","register_typed_function","set_property","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_members","FunctionParameterDefinition","ObjNativeFunction","ObjNativeFunctionSignature","as_function","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","class","clone","clone","clone","clone_into","clone_into","clone_into","create_class","definition_scope","eq","eq","equivalent","equivalent","expected_type","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","function_span","get_class","get_class","into","into","into","into_result","into_result","match_parameters","memory_layout","memory_layout","name","native_function_id","ne","new","new","return_type_span","span","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ObjNever","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","get_class","instance","into","into_result","memory_layout","to_owned","to_string","try_from","try_into","type_id","ObjNull","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","from","get_class","instance","into","into_result","memory_layout","to_owned","to_string","try_from","try_into","type_id","ObjString","borrow","borrow_mut","class","clone","clone_into","deref","eq","equivalent","fmt","fmt","from","from","get_class","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","value","ObjStruct","Struct","StructRef","borrow","borrow","borrow_mut","borrow_mut","class","create_class","deref","eq","eq","equivalent","equivalent","fields","fmt","fmt","fmt","fmt","from","from","get_class","ident","into","into","into_result","memory_layout","ne","ne","new","properties","runtime_encodable","should_be_const","struct_ref","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ObjStructObject","borrow","borrow_mut","class","create_class","eq","equivalent","fmt","fmt","from","get_class","into","into_result","memory_ids","memory_layout","ne","new","struct_type","to_string","try_from","try_into","type_id","variables"],"q":["debris_coredebris_core::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error::LangErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::function_interface","","","","","","","","","","","","","","","","","","","debris_core::hirdebris_core::hir::hir_nodesdebris_core::hir::hir_nodes::HirConstValue","","","","","","","","","","debris_core::hir::hir_nodes::HirExpression","","","","","debris_core::hir::hir_nodes::HirTypePattern","","","debris_core::llir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::json_format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::llir_nodesdebris_core::llir::llir_nodes::Condition","","","debris_core::llir::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mirdebris_core::mir::MirValue","","debris_core::objects","","","","","","","","","","","","","","debris_core::objects::obj_bool","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_bool_static","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_class","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_format_string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_int","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_int_static","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_native_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_never","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_null","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_string","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_struct_object","","","","","","","","","","","","","","","","","","","","","",""],"d":["The Any pattern matches every type","The build mode for this compilation","A type pattern can also take any normal type","The type of a class","The Compilation context stores various information about …","Holds data about the user specified configuration","Objects are a central type for the compiler. Basically …","Debug build: produces slower code, but contains various …","Runtime boolean","32-bit signed integer known at runtime","A compile time known format string","Full optimizations (default)","Any function, native or api","Module type","","Marks a value that cannot be constructed, for example The …","No optimizations (excludes the peephole optimizer)","The null type, implicitely return by function which don’…","A trait for values that can be used as debris object …","The type of the properties map","This struct is used to pass objects arround","How to optimize the code","drops most safety checks, lower readability","A boolean value known at compile time","Compile time known 32-bit signed integer","A compile time known string","Type of a struct definition","An instantiated struct","The type of a class object","The enumeration of patterns allowed as function arguments","","","Adds an object with a name to this namespace","Adds an anonymous object (without name) to this namespace","Inserts the value at this index and returns the last …","","","Interface any object can implement to be treated as a …","Interface any object can implement to be treated as a …","","","","","","","","","","","","","","","","","","","","The class of the object","","","","","","","","","","","The current config which specifies how to compile","The class specific to this object. Contains additionally …","The class specific to this object. Contains additionally …","Declares an entry in this namespace as variable. This …","","","","","Converts the payload into its original type","","Tests whether this object is equal to another object","","","","","","","","","","","","","","","Compilation error handling","","","","","","","","","","","","","","","","","","","","","","","","","","This module contains a trait <code>ToFunctionInterface</code> which …","Retrieves a named object from this namespace together …","Retrieves an object by its id from this namespace","","","","","","Tries to get a property that belongs to this object","May be overwritten by distinct payloads which carry …","May be overwritten by distinct payloads which carry …","Returns a unique id","","High-level intermediate representation","The current id counter for items that get added to this …","The code files","","","","","","","","","","","","","","","Whether the current build mode is debug","Thanks, clippy…","","","Whether the current build mode is release","","The amount of objects in this namespace","Low-level intermediate representation","Returns whether the type matches on this pattern","","Returns the memory layout of this specific object This …","Mid-level intermediate representation","","","","Creates a new Namespace","Contains all objects which can be used in a debris …","","The actual value","","","Replaces the object with this id","Returns whether this type can be completely encoded at …","Returns whether this type should be const. Const types …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used to determine whether the error messages should use …","","A Compile Error","","","","","A generic error which gets thrown when compiling","An error which happens when compiling the input","Specifies a specific error reason","A result type which allows quick error throwing since no …","","","","","","","Thrown when parsing bad input","An error which happens when parsing the input","The result type used by most of the core functions","An owned counterpart to the <code>annotate_snippets::Slice</code> …","An owned counterpart to the <code>annotate_snippets::Snippet</code> …","An owned counterpart to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Symbols which were expected instead","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The specific error","","","","","","","","","","","","The span where this error occured","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The common type for working with callbacks","Any function that can be called as a normal function …","This trait can convert functions into compatible …","Trait used for converting any valid return value into a …","","","","","","","If possible, returns the type of the return value","","","Static method for querying the accepted parameters","Static method for querying the return type, may be None","","","","","","The pest parser which can parse the grammar file","","The hir representation of an input file and all of its …","Contains state data that are used during the hir …","This struct stores the high-level intermediate …","A list of [SpannedIdentifier]s, can be a dotted path","Keeps track of all imported modules, uses indexes as keys","","Identifies a variable or value based on its span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a [HirFile] from code.","","","","","","","","","Defines every node used in the hir representation","","","","","","","","","","","","","","","","Inserts a dependency and the code span and returns its …","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>SpannedIdentifier</code> from the [Span]","Creates a new IdentifierPath from the vec of identifiers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logical and","Attributes are a form of metadata that can be applied to …","A binary operation, for example <code>a + b</code>","A block which returns something","A normal block","","","Any comparison like <, >, <=, >=, ==, !=","","","A normal if statement","","Controls the program flow","Mathematical division","","","","A function, like <code>fn(Int, Int) -> Int</code>","","A function call, for example <code>foo()</code> or <code>path.to.foo()</code>","A function call, which can be both an expression and …","","","A block of code. Usually contained withing a pair of {} …","Any supported comparison operator","An if-branch which checks a condition and runs code …","A constant literal, already parsed","Represents a control flow statement like return or break","","","Any expression","","A function, which contains other statements","Any function call, can be dotted","Marks an import statement. The id specifies the index of …","An infinite loop (Can be exited using control keywords …","Holds an infix operator combined with its span","Any operator that can be used as an infix","Any Item","A module with an associated name","","Holds a variable type declaration like <code>foo: String</code> This …","Holds a prefix operator combined with its span","Any prefix operator","Declaration of a property in a struct definition","Any statement, the difference to an expression is that a …","A struct definition","Creates a Struct Object from a struct","Any pattern that is allowed to specify a function …","Sets a variable like <code>let a = expression();</code>","Similar to <code>HirVariableInitialization</code>, however this node …","Imports another debris file","","","","","","","Mathematical substraction","Mathematical minus","","Mathematical modulo","","Logical negation","","Logical or","A path to a variable, for example <code>for.bar.a</code>","A normal type, like <code>Int</code>","Mathematical addition","","","","","","","Mathematical multiplication","A unary operation, for example <code>-a</code>","A literal value, for example <code>2.0</code> or <code>\\\"Hello World\\\"</code>","","A variable, for example <code>a</code>","A variable declaration, for example <code>let foo = 1</code>","A write to an already existing variable","","","","","","","","","The block containing all statements of the function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of the property","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the associated [Ident]","Returns the associated [SpecialIdent]","Returns the associated [SpecialIdent]","","","","The identifier inside of the struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the span of the item in the block which is …","","","","","","","","","","","","","","","","","","","","","","","","","","","The objects that got declared within this block","","","","","","","","All declared properties of this struct","","","The returned value:","","","","","","","","","","","","","","The span of the declaration","","","","","","","","The statements of this block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The low-level intermediate representation struct","A specific llir context","","Adds a specific block to the list of blocks which should …","","","","","","","","","","","","","","","Compiles the mir into a llir","The functions which were created, excluding the main …","","Returns an object that corresponds to a <code>MirValue</code>","","","","(Current incomplete) interface for minecrafts text …","Contains every node that can be produced in the llir step.","","","The runtime, which stores resources","Schedules a specific block to run every tick.","","Replaces a Template with the given index with an actual …","","","","","","","","","","","","","Debris syntax: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Operates on two scoreboard values and stores the result …","","Branches based on a condition","","Calls a function","","","Comparison between two values, eg. val1 <= val2","Evaluates a condition and returns either true or false","","","Executes a literal string","A component for a raw execute command. Either string or …","Stores a ‘fast’ variable","","Stores a ‘fast’ variable from the result of another …","","A function node, contains other nodes","Any node","Does nothing","","Marks that a value is read by this node","","Marks that a value can be both read from and written to …","","","","","","Denotes how a specific node accesses variables.","See [VariableAccess].","Marks that a value is written to by this node. The second …","","","Writes a formatted message","The buffer to write to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if this function contains a node that calls the …","","","","","","","","","","","","","","","","","","","","","","","The command to use","The condition to test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The id of this function","The id of the target var","The id of the target var","The id of the resulting value","The id of that function","","","","","","","","","","","","","","","Returns whether this command has no side effect. …","","Checks whether this condition is “simple”, which …","Iterates over this node and all other nodes that this …","The left value","","The node to execute if that condition is false","","Returns a condition that is true, when this condition is …","The kind of operation","The node to execute if that condition is true","Whether this node has a read-dependency on <code>item_id</code>","The value that this function returns","The right value","The scoreboard of the target var","The scoreboard of the target var","The scoreboard of the resulting value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value to store into the target var","Recursively yields all variables that this condition …","Accepts a callback function as argument and calls it with …","","See <code>variable_accesses</code>.","Whether this node could modify <code>item_id</code>.","","","","Identifies a single callable block of code","Custom scoreboards, each with a unique identifier","","","","","Special scorbeoards used for internal tracking","A unique identifier for an item","","","The Main scoreboard, where all operations are per default","","","","","","","Identifies a specific scoreboard","","Any comparison that can be executed on two scoreboard …","Any operation that can be executed on a scoreboard- This …","A Value that can be stored on a scoreboard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flips the comparison (converts OP such that …","","","","","","","","","","","","","","","","","","","","","","","","","Inverts the comparison, such that it is exactly and only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Counter that can give out unique <code>ItemId</code>’s","Specifies how a specific object lays out its runtime …","This type is spread across multiple fields","This type has exactly one integer sized field","This type has no runtime memory","","","","","","","Copies a scoreboard value from source to destination","","","","","","","","","","","","Copies all items from source over to destination","","","","","","","","","","","","","A simple block created by <code>{}</code>","Branches if a condition evaluates to true","Calls the context after the loop","","A function call which goes to a new block and initializes …","A block that is conditonally executed at compile time","A concrete object Since concrete objects are already …","","Contains all possible ‘kinds’ of contexts. This is …","Directly jumps to the top of the loop","The mode how a <code>MirContext</code> exits","A built-in function","Goes to a specific jump location.","Marks a jump location. A jump location can be seen as a …","A runtime loop","A Mid-level intermediate representation","Acts like <code>MirGotoContext</code>, if the condition is equal to …","Visits the hir and creates a mir from it","A function call to api functions","Keeps track of single context, which can be a function, a …","Helper struct which can hold mutable references to the …","","Calls a specific block of a context","Command to start a new Block withing this context This …","Any node that can be part of the mir representation","Sets the return value for a given context","Overrides the old value in the namespace struct with …","Any value that is used in the mir compilation and also in …","","","A function created by a user","Normal exit, just continue with the next nodes","","Look for the current function and call the context after …","Sets the return value for this context. Note that this …","","A block that is conditionally executed at runtime","The body of a struct definition","A template which marks a future object","Updates the value of a variable. This is the only node …","","Adds an anonymous object and returns a ref MirValue","Adds the class as an anonymous template and returns it as …","Adds an anonymous value that is usually used temporarily","","Adds a value to the current namespace. Fails if the ident …","Adds a value that corresponds to <code>ident</code>","Adds a value to the current value. Does not complain if …","","Returns a shared reference to the global arena","","Returns a mutable reference to the global arena","","Asserts that the type of this value matches <code>typ</code> and …","Asserts that the type of this is equal to <code>other</code>","The nth block of this context to go to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the class of this value","","","","","","","","","","A ref to the global compile context","","The condition, has to be a boolean (right now)","Returns a shared reference to the current context","","","The context to set the return value for","Returns a helper struct that contains both a context and …","","Returns a mutable reference to the current context","All contexts","Which control flow mode is used for this context Most …","","","","","","Returns the default return value of this context","The value that is returned by default (when template is …","","","For testing purposes, creates a dummy id","","","","","","","","","","","","","","","","","","","","","","","Returns whether this control flow mode exits the current …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the hir into a mir","","","","Returns the value that is associated with this ident","Looks up the value that corresponds to this ident","Returns an ident from a span","","","Gets a property from the value","Returns the first value if the length of <code>value</code> is exactly …","","","Returns the type pattern that belongs to a path","","The context id and the id of the corresponding namespace","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the mir_value is [<code>Concrete</code>].","Returns whether this context can only be executed at …","Whether a return statement can select this block as an …","Whether a break or continue statement can select this …","","Returns <code>true</code> if the mir_value is [<code>Template</code>].","","The first visited function gets marked as the main …","","Returns whether this context matches this control flow …","","","Returns a mutable reference to the current namespace","","","","","","","","","","","Creates a new context","","","Increments the jump location counter and returns it","All mir nodes that are emitted","Creates a new mir value that is null","","","","","Pushes a node to the current context","Loads the module into this scope","Adds a function call to the current context","Creates a function call    ","Loads every member of the module (but not the module …","Follows this path","Resolves the accessor and returns the accessed element","A reference to the value to be returned, See <code>ReturnValues</code> …","","","The values returned by this function","","Returns the class of the type as expected in a function …","","","","","","Stores the value and the span it is returned at","Contexts which got scheduled to run every tick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Entry point for visiting the hir","","","","","","","","","","","","","","","","","","","","","","","","","A boolean value that is stored on a scoreboard","","","","","","","","","","","","","","","","","","","","Returns the boolean or-ed with the static value","","","","","","","","","","","","","","","","","","","","","","","","","","Marks objects that have a class","The class of a value.","","","Returns the class of this object","","","","","","","","","","","","","","","","","","","","","","","","","A static string object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An enum over all functions which are implemented by the …","Marks that the function should be implemented by the …","The context which gets passed to a function","Flags a function can have. These effect how the compiler …","A signature describing a single overload of a function","Decides which arguments a function can accepts","A signature containing expected parameters and return type","","Marks that the function has no special flags","A function object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds a node to the previously emitted nodes","","","","","Returns every possible signature as (params, return) …","","","","","","","","","","","","","","","","","","","Tries to get a property starting at the <code>start</code> namespace …","","","","","","","","","The id for the returned value","","Returns whether the args iterator matches all of the …","","","","","","","Shortcut for returning <code>ObjNull</code>","","","","","The current span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A dynamic Integer","Returns a <code>ScoreboardValue</code> which identifies a specific …","","","","","","","","","","","","","The id of the item","","","","","Creates a new dynamic integer with this id","","","","","","A static integer object","Returns a <code>ScoreboardValue</code> which matches this int","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new static integers with this value","","","","","","","A wrapper function for functions that return modules","A module object","","","","","","","","","","","","","","","","","","","Returns the ident of this module","","","","","","","","","Creates a new empty module with this name","Registers a value for the first time","Registers a simple api-function whose signature specifies …","Sets a property","","","","","","","","","","","A callable function object for functions declared in …","Created when the mir comes across a function definition, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Signals that a block will never return. The most …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A static string object","","","","","","","","","","","","","","","","","","","","","","","","","Stores a user defined struct","","","","","","","","","","","","","","The fields are stored in an indexmap so that the user …","","","","","","","","","","","","","","","","Each struct has a namespace containing its objects …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,1,2,0,0,0,3,2,2,2,4,2,2,0,2,4,2,0,0,0,0,3,2,2,2,2,2,0,0,0,5,6,6,6,6,7,8,8,9,5,6,10,3,4,11,1,2,9,5,6,10,3,4,11,1,2,11,9,10,3,4,1,2,10,3,4,1,2,5,8,8,6,5,11,11,10,9,5,7,6,10,3,4,11,1,2,6,10,3,4,11,1,2,0,9,5,6,10,10,3,4,11,1,1,2,2,9,5,6,6,10,10,3,4,11,1,1,2,10,0,6,6,7,12,12,10,5,9,8,8,5,2,0,6,5,9,5,6,10,3,4,11,1,2,7,12,12,10,2,3,6,2,2,3,6,6,0,1,0,8,0,6,11,1,6,0,11,9,11,11,6,2,2,10,3,4,1,2,10,1,2,9,5,6,10,3,4,11,1,2,9,5,6,10,3,4,11,1,2,5,9,5,6,10,3,4,11,1,2,0,0,13,0,13,13,13,13,0,14,0,0,13,13,13,13,13,13,0,14,0,0,0,0,13,13,13,13,13,13,13,13,15,16,17,18,19,20,14,17,15,16,15,17,16,19,20,13,14,15,17,16,19,20,13,14,19,20,13,14,19,20,13,14,19,20,13,14,19,20,13,14,19,15,17,16,19,19,20,20,13,13,14,14,17,15,14,15,17,16,19,20,13,14,14,14,15,15,17,16,19,20,13,14,20,16,19,20,13,14,20,17,16,15,14,17,19,20,15,19,20,13,14,18,19,20,13,14,15,17,16,19,20,13,14,15,17,16,19,20,13,14,15,17,16,19,20,13,14,21,22,23,24,25,24,26,24,27,28,29,21,30,31,32,33,34,35,36,30,26,37,25,35,37,30,36,37,21,31,36,38,23,22,0,0,0,0,39,39,40,39,39,39,41,39,41,42,42,42,39,39,39,43,0,43,0,0,0,0,0,0,0,43,43,44,43,43,43,43,43,43,45,44,46,47,43,48,49,50,45,44,46,47,43,48,49,50,43,46,47,43,46,47,43,43,45,49,43,43,43,43,43,43,44,43,43,43,43,43,50,44,47,46,47,43,46,47,43,43,43,43,43,43,43,43,44,43,45,44,46,47,43,49,50,43,43,43,43,45,44,46,46,47,47,43,48,49,50,45,43,43,43,50,44,46,47,43,0,43,47,43,43,49,43,43,43,43,43,43,43,43,43,44,50,43,45,44,46,47,43,48,49,50,50,43,50,47,50,43,45,49,43,46,47,44,46,47,44,43,43,43,43,48,43,43,43,43,43,47,44,47,46,43,43,43,43,43,43,43,43,43,46,47,43,45,44,46,47,43,48,49,50,45,44,46,47,43,48,49,50,43,45,44,46,47,43,48,49,50,43,43,43,43,43,51,0,52,52,53,54,55,51,56,52,53,55,53,51,57,54,54,58,59,52,53,57,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,52,53,54,57,56,57,51,60,59,51,57,60,61,51,52,58,51,55,61,54,62,59,52,51,52,52,62,52,53,53,63,64,65,66,67,68,69,70,67,69,71,71,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,54,62,57,51,72,60,73,55,76,56,58,54,62,57,51,72,60,73,55,76,56,58,71,78,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,75,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,60,57,51,74,76,77,78,67,68,69,74,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,75,79,77,54,62,51,72,73,74,75,70,76,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,79,68,72,73,67,64,67,64,68,67,67,79,54,52,53,58,66,72,73,74,75,70,76,77,63,78,64,71,65,79,67,68,69,79,54,62,57,51,72,60,73,55,76,56,58,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,76,54,62,57,51,72,60,73,74,55,75,70,76,56,77,63,78,64,71,65,52,53,58,79,66,67,68,69,59,61,77,63,65,80,81,82,83,84,80,81,82,83,84,85,86,85,85,86,87,87,87,0,0,0,88,89,90,88,89,90,88,88,89,90,90,88,89,90,88,90,90,90,89,89,90,88,0,0,88,89,90,88,88,89,89,90,89,90,88,89,90,88,89,90,88,0,0,0,91,91,92,91,92,91,92,91,92,91,92,92,91,92,91,92,92,91,91,92,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,93,94,95,0,96,0,96,0,96,94,95,0,96,96,0,0,0,96,0,96,0,0,96,95,97,98,97,98,99,99,94,94,0,0,97,98,96,0,0,97,98,100,101,102,103,104,95,105,99,93,106,94,96,97,98,100,101,102,103,104,95,105,99,93,106,94,96,100,101,102,103,104,95,105,99,93,106,94,96,101,102,103,104,95,105,99,93,106,94,96,102,105,100,100,101,102,103,104,95,105,99,93,106,94,96,96,97,98,100,101,102,103,104,95,105,99,93,106,94,96,100,101,102,103,104,97,98,100,101,102,103,104,95,105,99,93,106,94,96,96,100,95,96,103,106,105,100,95,103,105,96,100,103,101,102,103,106,101,102,103,104,95,105,99,93,106,94,96,100,96,97,98,100,101,102,103,104,95,105,99,93,106,94,96,97,98,100,101,102,103,104,95,105,99,93,106,94,96,97,98,100,101,102,103,104,95,105,99,93,106,94,96,101,95,96,95,96,96,107,107,107,0,108,109,110,110,110,108,0,110,110,108,109,109,109,109,110,109,0,111,0,0,0,111,109,112,108,111,109,110,113,112,108,111,109,110,113,112,108,111,109,110,113,112,108,111,109,110,113,112,113,112,108,111,109,110,113,112,108,111,109,110,113,109,110,110,112,108,111,109,110,113,113,112,108,111,109,110,113,112,108,113,111,113,112,108,111,109,110,113,110,112,108,111,113,112,112,108,111,109,110,113,113,112,108,111,109,110,113,112,108,111,109,110,113,112,108,111,109,110,113,0,0,114,114,114,114,115,114,115,114,114,0,114,115,114,115,114,115,114,114,115,114,115,0,114,115,115,115,115,114,114,115,114,115,114,115,116,117,118,0,117,116,119,0,0,118,0,116,117,117,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,118,120,118,117,0,116,116,119,117,121,122,123,122,124,123,122,123,122,125,123,125,126,119,119,127,128,123,122,119,127,129,130,131,132,117,133,126,121,116,118,134,125,124,135,128,123,122,119,127,129,130,131,132,117,133,126,121,116,118,134,125,124,135,119,119,126,116,118,119,126,116,118,126,122,119,132,125,123,127,131,125,124,125,124,122,123,133,118,124,135,116,121,133,133,126,128,119,127,129,130,131,132,117,126,116,118,128,119,127,129,130,131,132,117,126,116,118,118,119,119,128,122,119,127,129,130,131,132,117,117,133,126,126,121,116,118,134,125,124,135,135,128,123,122,119,119,127,129,130,131,132,117,133,126,126,121,116,118,118,134,125,124,135,124,128,121,135,123,122,122,135,135,119,121,121,121,122,126,122,130,129,128,123,122,119,127,129,130,131,132,117,133,126,121,116,118,134,125,124,135,119,116,116,116,118,119,122,125,135,116,122,122,125,124,119,127,129,130,131,132,117,126,132,122,125,130,122,122,119,128,134,126,132,123,122,123,122,122,123,122,131,134,128,122,133,119,128,122,127,132,119,121,125,135,119,126,116,118,117,126,135,128,123,122,119,127,129,130,131,132,117,133,126,121,116,118,134,125,124,135,128,123,122,119,127,129,130,131,132,117,133,126,121,116,118,134,125,124,135,128,123,122,119,127,129,130,131,132,117,133,126,121,116,118,134,125,124,135,128,125,120,120,120,120,120,120,120,120,136,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,137,137,137,137,0,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,0,0,139,139,140,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,0,141,141,141,142,141,142,142,141,142,141,142,142,141,142,141,142,141,142,142,141,142,142,141,142,142,142,141,142,142,141,142,142,141,142,141,142,141,142,143,0,144,0,0,0,0,0,0,144,0,145,143,146,147,147,146,143,144,145,148,149,147,146,143,144,145,148,149,147,149,146,146,143,144,145,149,146,143,144,145,149,147,144,147,146,143,146,143,146,146,146,146,143,144,145,148,148,147,146,143,143,144,145,148,149,146,147,147,147,146,143,144,145,148,149,146,147,147,148,146,143,146,148,149,146,147,146,148,148,149,147,146,143,144,145,149,146,148,147,146,143,144,145,148,149,147,146,143,144,145,148,149,147,146,143,144,145,148,149,146,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,152,153,152,153,152,153,153,153,153,153,152,153,153,152,152,153,153,153,153,152,152,153,153,153,153,153,152,153,153,153,153,153,153,152,153,152,153,152,153,153,0,0,0,154,155,154,156,155,154,156,154,156,155,154,156,155,154,156,156,156,154,156,154,156,155,155,155,154,154,156,156,155,154,156,156,154,156,155,154,156,154,156,0,154,156,155,156,154,154,156,156,155,155,154,156,155,154,156,155,154,156,155,154,156,155,154,156,0,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,0,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,0,0,160,161,160,161,161,161,161,160,161,160,161,160,160,160,161,161,160,161,161,160,160,161,161,161,160,161,161,160,160,160,161,160,161,160,161,160,161,160,161,0,162,162,162,162,162,162,162,162,162,162,162,162,0,162,162,162,162,162,162,162,162,162],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["code",3]],["codeid",6]],[[["namespaceentry",4],["ident",4]],[["usize",15],["option",4]]],[[["namespaceentry",4]],["usize",15]],[[["usize",15],["namespaceentry",4]],[["option",4],["namespaceentry",4]]],[[],[["index",3],["option",4]]],[[],["any",8]],[[],[["option",4],["objfunction",3]]],[[],[["option",4],["objfunction",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["objectref",3]],[[],["buildmode",4]],[[],["optmode",4]],[[],["typepattern",4]],[[],["type",4]],[[]],[[]],[[]],[[]],[[]],null,[[["compilecontext",3]],[["rc",3],["class",3]]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["usize",15],["span",3]]],[[],["compilecontext",3]],[[]],null,[[]],[[],["option",4]],[[]],[[["objectref",3]],["bool",15]],[[["namespace",3]],["bool",15]],[[["objectref",3]],["bool",15]],[[["buildmode",4]],["bool",15]],[[["optmode",4]],["bool",15]],[[["config",3]],["bool",15]],[[["typepattern",4]],["bool",15]],[[["type",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["contextid",3]]],[[]],[[]],[[["debrisobject",3]]],[[]],[[]],[[]],[[]],[[["rc",3],["class",3]]],[[]],[[["objectpayload",8],["compilecontext",3]]],null,[[["arena",3],["ident",4]],["option",4]],[[["usize",15]],[["option",4],["namespaceentry",4]]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["codeid",6]],["code",3]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[],["usize",15]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compilecontext",3]],["objectref",3]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["namespaceiterator",3]],[[],["usize",15]],null,[[["class",3]],["bool",15]],null,[[],["memorylayout",4]],null,[[["namespace",3]],["bool",15]],[[["config",3]],["bool",15]],[[["typepattern",4]],["bool",15]],[[["contextid",3],["index",3],["option",4]]],null,null,null,null,null,[[["usize",15],["namespaceentry",4]],["namespaceentry",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typecontextref",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["snippetowned",3]],[[],["slice",3]],[[],["snippet",3]],[[],["sourceannotation",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parseerror",3]],[[],["langerror",3]],[[],["langerrorkind",4]],[[],["compileerror",4]],[[]],[[]],[[]],[[]],[[["parseerror",3]],["bool",15]],[[["langerror",3]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[["compileerror",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[["compilecontext",3]],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parseerror",3]]],[[["langerror",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["parseerror",3]],["bool",15]],[[["langerror",3]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[["compileerror",4]],["bool",15]],[[["langerrorkind",4],["span",3]]],null,null,null,[[],[["option",4],["error",8]]],null,null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[]],[[["normalizedfunctioninterface",8],["box",3]]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["compilecontext",3]],["functionparameters",4]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[],[["normalizedfunctioninterface",8],["box",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["spannedidentifier",3]],["usize",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["spannedidentifier",3]],[[],["identifierpath",3]],[[],["rule",4]],[[]],[[]],[[]],[[["rule",4]],["ordering",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["importdependencies",3]],null,[[["compilecontext",3]],["string",3]],[[["spannedidentifier",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[["rule",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,null,null,[[]],[[]],[[]],[[["span",3]]],[[]],[[["spannedidentifier",3]]],[[]],[[]],[[]],[[]],[[["compilecontext",3],["importdependencies",3],["coderef",3]],["result",6]],null,null,null,[[["usize",15]]],[[["spannedidentifier",3]],["ident",4]],[[]],[[]],[[]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3],["ident",4]],["usize",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[]],[[],["spannedidentifier",3]],[[],["usize",15]],null,null,null,null,[[["spannedidentifier",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[["importdependencies",3],["coderef",3],["compilecontext",3]]],[[["span",3]]],[[["vec",3],["spannedidentifier",3]]],[[["span",3],["usize",15]],["span",3]],null,null,null,null,[[["str",15],["rule",4]],[["pairs",3],["result",4],["error",3]]],[[["rule",4]],[["ordering",4],["option",4]]],null,null,null,null,[[],[["option",4],["spannedidentifier",3]]],[[["span",3]],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hirconstvalue",4]],[[],["hirformatstringmember",4]],[[],["hircomparisonoperator",4]],[[],["hirinfixoperator",4]],[[],["hirinfix",3]],[[],["hirprefixoperator",4]],[[],["hirprefix",3]],[[],["hircontrolkind",4]],[[],["hirparameterdeclaration",3]],[[],["hirdeclarationmode",4]],[[],["hirtypepattern",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["hirconstvalue",4]],["bool",15]],[[["hirformatstringmember",4]],["bool",15]],[[["hircomparisonoperator",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirprefixoperator",4]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hircontrolkind",4]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirdeclarationmode",4]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirstructinitialization",3]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hiritem",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ident",4]],[[],["specialident",4]],[[],["specialident",4]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["span",3]],null,[[["hirconstvalue",4]],["bool",15]],[[["hirformatstringmember",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirstructinitialization",3]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hiritem",4]],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[],["span",3]],null,[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["blockid",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["runtime",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["namespacearena",3],["mircontextmap",3]],[["result",6],["llir",3]]],null,[[],[["usize",15],["blockid",3],["hashmap",3]]],[[["mirvalue",4],["namespacearena",3],["mircontextmap",3]],[["objectref",3],["option",4]]],[[]],[[]],[[]],null,null,null,[[["itemid",3],["objectref",3],["namespacearena",3],["mircontextmap",3]]],null,[[["blockid",3]]],null,[[["itemid",3],["objectref",3],["namespacearena",3],["mircontextmap",3]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["formattedtext",3]],[[],["jsonformatcomponent",4]],[[]],[[]],null,[[["formattedtext",3]],["bool",15]],[[["jsonformatcomponent",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["vec",3],["jsonformatcomponent",4]]],[[]],[[]],[[]],[[["formattedtext",3]],["bool",15]],[[["jsonformatcomponent",4]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockid",3]],["bool",15]],[[],["faststore",3]],[[],["faststorefromresult",3]],[[],["binaryoperation",3]],[[],["call",3]],[[],["condition",4]],[[],["branch",3]],[[],["executerawcomponent",4]],[[],["executeraw",3]],[[],["writemessage",3]],[[],["writetarget",4]],[[],["node",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],null,null,null,[[]],[[],["condition",4]],null,null,[[["itemid",3]],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["itemid",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockid",3]],[[],["scoreboard",4]],[[],["scoreboardvalue",4]],[[],["scoreboardoperation",4]],[[],["scoreboardcomparison",4]],[[],["itemid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockid",3]],["ordering",4]],null,[[["blockid",3]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["scoreboardoperation",4]],["bool",15]],[[["scoreboardcomparison",4]],["bool",15]],[[["itemid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["bool",15]],[[],["scoreboardcomparison",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["option",4],["itemid",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["scoreboardcomparison",4]],[[["blockid",3]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["itemid",3]],["bool",15]],[[["blockid",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["memorylayout",4]],[[]],[[["itemid",3]],["node",4]],[[["memorylayout",4]],["bool",15]],[[["memorycounter",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["vec",3],["itemid",3]]],[[]],[[]],[[]],[[]],[[["objectref",3]]],[[["memorylayout",4]],["bool",15]],[[["memorycounter",3]],["bool",15]],[[["contextid",3],["usize",15]]],[[],["usize",15]],[[],["itemid",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["mirvalue",4]],["usize",15]],[[["namespacearena",3],["objectref",3]],["mirvalue",4]],[[["rc",3],["class",3]],["mirvalue",4]],[[["rc",3],["namespacearena",3],["class",3]],["mirvalue",4]],[[["mircontext",3]]],[[["mirvalue",4],["span",3],["ident",4]],["result",6]],[[["span",3],["mirvalue",4],["ident",4],["namespacearena",3]],["result",6]],[[["mirvalue",4],["span",3],["ident",4]]],[[["span",3],["mirvalue",4],["ident",4],["namespacearena",3]]],[[],["namespacearena",3]],null,[[],["namespacearena",3]],[[],["index",3]],[[["typepattern",4],["span",3],["option",4]],["result",6]],[[["span",3],["rc",3],["option",4]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rc",3]],[[],["mirvalue",4]],[[],["contextid",3]],[[],["contextkind",4]],[[],["controlflowmode",4]],[[]],[[]],[[]],[[]],[[["contextid",3]],["ordering",4]],null,[[],[["objectref",3],["option",4]]],null,[[],["mircontext",3]],null,null,null,[[],["mircontextinfo",3]],[[["contextid",3]],["mircontextinfo",3]],[[],["mircontext",3]],null,null,[[["itemid",3]]],[[],["namespacearena",3]],[[]],[[],["mir",3]],[[],["mircontextmap",3]],[[["compilecontext",3]],["objectref",3]],null,[[]],[[]],[[["usize",15]],["contextid",3]],[[["mircall",3]],["bool",15]],[[["mirvalue",4]],["bool",15]],[[["mirgotocontext",3]],["bool",15]],[[["mirjumplocation",3]],["bool",15]],[[["mirupdatevalue",3]],["bool",15]],[[["mirreturnvalue",3]],["bool",15]],[[["mirbranchif",3]],["bool",15]],[[["mirnode",4]],["bool",15]],[[["contextid",3]],["bool",15]],[[["contextkind",4]],["bool",15]],[[["controlflowmode",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["objectref",3]],[[["str",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["objectref",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["index",3]]],[[]],[[]],[[]],[[["hircontrolkind",4]]],[[]],[[]],[[]],[[]],[[["compilecontext",3],["hir",3]],[["mir",3],["result",6]]],null,[[["usize",15]],[["mirvalue",4],["option",4]]],[[["contextid",3]],["mircontext",3]],[[["spannedidentifier",3]],[["result",6],["mirvalue",4]]],[[["namespacearena",3],["spannedidentifier",3]],[["result",6],["mirvalue",4]]],[[["spannedidentifier",3]],["ident",4]],[[],["mircontext",3]],[[["contextid",3]],["mircontext",3]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[],[["option",4],["mirvalue",4]]],[[],["option",4]],[[],["mirvalue",4]],[[["identifierpath",3],["namespacearena",3]],[["typepattern",4],["result",6]]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,null,null,[[["hircontrolkind",4]],["bool",15]],[[["namespacearena",3]],["namespace",3]],[[["namespacearena",3]],["namespace",3]],[[],["namespace",3]],null,[[["mirvalue",4]],["bool",15]],[[["mirgotocontext",3]],["bool",15]],[[["mirjumplocation",3]],["bool",15]],[[["mirupdatevalue",3]],["bool",15]],[[["mirreturnvalue",3]],["bool",15]],[[["mirbranchif",3]],["bool",15]],[[["mirnode",4]],["bool",15]],[[["contextid",3]],["bool",15]],null,[[["contextid",3],["option",4],["compilecontext",3],["span",3],["contextkind",4],["namespacearena",3]]],[[["coderef",3],["compilecontext",3],["mir",3]]],null,[[],["usize",15]],null,[[["compilecontext",3]]],null,null,[[["contextid",3]],[["ordering",4],["option",4]]],null,[[["mirnode",4]]],[[["objmodule",3],["namespacearena",3]]],[[["span",3],["objectref",3],["mirvalue",4],["vec",3],["option",4]],["result",6]],[[["span",3],["vec",3],["objectref",3],["mirvalue",4],["option",4],["namespacearena",3]],["result",6]],[[["objmodule",3],["namespacearena",3]]],[[["identifierpath",3]],[["accessedproperty",3],["result",6]]],[[["identifierpath",3],["namespacearena",3]],[["accessedproperty",3],["result",6]]],null,null,null,null,[[["contextid",3],["ident",4]],["option",4]],[[],[["rc",3],["option",4]]],null,null,null,null,[[],["option",4]],null,null,null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["hirblock",3]],[["result",6],["mirvalue",4]]],[[["mirbranchif",3]]],[[["mircall",3]]],[[["mirgotocontext",3]]],[[["mirjumplocation",3]]],[[["mirnode",4]]],[[["mirnode",4]]],[[["mirreturnvalue",3]]],[[["mirupdatevalue",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["bool",15],["itemid",3],["objbool",3]]],[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["objbool",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["itemid",3]]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],null,[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],null,[[["objbool",3]],["bool",15]],[[["itemid",3]]],[[["bool",15],["itemid",3],["objbool",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["objstaticbool",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["bool",15]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[["objstaticbool",3]],["bool",15]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["compilecontext",3]],[["rc",3],["class",3]]],null,[[],["objclass",3]],[[]],[[]],[[["objclass",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["rc",3],["class",3]]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[["objclass",3]],["bool",15]],[[["rc",3],["class",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["formatstringcomponent",4]],[[],["objformatstring",3]],[[]],[[]],null,[[["formatstringcomponent",4]],["bool",15]],[[["objformatstring",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[["formatstringcomponent",4]],["bool",15]],[[["objformatstring",3]],["bool",15]],[[["formatstringcomponent",4],["vec",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["objfunction",3]]],[[["contextid",3]],["blockid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["contextid",3]],[["langresult",6],["objectref",3]]],null,[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["objfunction",3]],[[],["functionparameters",4]],[[],["functionflags",4]],[[],["compilerfunction",4]],[[],["functionoverload",3]],[[]],[[]],[[]],[[]],[[]],[[],["compilecontext",3]],[[]],[[["node",4]]],[[["objfunction",3]],["bool",15]],[[["functionparameters",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["typepattern",4],["vec",3]]],[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["mirvalue",4]],["objectref",3]],[[["contextid",3],["ident",4]],[["objectref",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],null,null,[[],["bool",15]],[[],["memorylayout",4]],[[["functionparameters",4]],["bool",15]],[[["vec",3],["functionoverload",3],["compilecontext",3]]],[[["rc",3],["functionparameters",4],["class",3]]],[[["functionsignatureref",6],["debrisfunctioninterface",3]]],[[["compilecontext",3]]],[[],["objectref",3]],[[],[["functionoverload",3],["option",4]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["vec",3],["functionoverload",3],["functionflags",4],["compilecontext",3]]],null,[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["objint",3]],[[]],[[["objint",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["itemid",3]]],[[["compilecontext",3]],[["rc",3],["option",4]]],null,[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[["objint",3]],["bool",15]],[[["itemid",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["objstaticint",3]],[[]],[[["objstaticint",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["i16",15]]],[[["usize",15]]],[[]],[[["u16",15]]],[[["u64",15]]],[[["u128",15]]],[[["i8",15]]],[[["i32",15]]],[[["i64",15]]],[[["i128",15]]],[[["u32",15]]],[[["isize",15]]],[[["u8",15]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[["objstaticint",3]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],["objmodule",3]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["objmodule",3]],[[]],[[["objmodule",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[],["ident",4]],[[],["bool",15]],[[]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[]],[[],["memorylayout",4]],[[["objmodule",3]],["bool",15]],[[["bool",15],["fn",8]]],[[]],[[["objectref",3],["into",8],["ident",4]]],[[["compilecontext",3]]],[[["objectref",3],["into",8],["ident",4]],[["objectref",3],["option",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["objectproperties",6],["ident",4]]],null,null,null,[[],[["option",4],["objfunction",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["functionparameterdefinition",3]],[[],["objnativefunction",3]],[[],["objnativefunctionsignature",3]],[[]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],null,[[["objnativefunction",3]],["bool",15]],[[["objnativefunctionsignature",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[["compilecontext",3]],[["rc",3],["option",4]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["bool",15]],[[],["memorylayout",4]],[[],["memorylayout",4]],null,null,[[["objnativefunction",3]],["bool",15]],[[["contextid",3],["rc",3],["cachedfunctionsignature",3],["class",3],["rc",3],["compilecontext",3]]],[[["usize",15],["span",3],["contextid",3],["typepattern",4]]],null,null,[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["objnever",3]],[[]],[[["objnever",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["compilecontext",3]],["objectref",3]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["objnull",3]],[[]],[[["objnull",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["compilecontext",3]],["objectref",3]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[],["objstring",3]],[[]],[[]],[[["objstring",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["rc",3],["str",15]]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[["objstring",3]],["bool",15]],[[["rc",3],["str",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["rc",3],["str",15]]],null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[]],[[["struct",3]],["bool",15]],[[["objstruct",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],null,[[]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[],["memorylayout",4]],[[["struct",3]],["bool",15]],[[["objstruct",3]],["bool",15]],[[["structref",6]]],null,[[],["bool",15]],[[],["bool",15]],null,[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["compilecontext",3]],[["rc",3],["class",3]]],[[["objstructobject",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[["functioncontext",3]],[["result",4],["objectref",3],["langerrorkind",4]]],[[["namespace",3],["namespacearena",3],["vec",3]]],[[],["memorylayout",4]],[[["objstructobject",3]],["bool",15]],[[["structref",6],["namespacearena",3],["index",3]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[4,"TypePattern"],[4,"Type"],[4,"BuildMode"],[4,"OptMode"],[3,"CompileContext"],[3,"Namespace"],[8,"ValidPayload"],[8,"ObjectPayload"],[3,"DebrisObject"],[3,"ObjectRef"],[3,"Config"],[6,"LangResult"],[4,"LangErrorKind"],[4,"CompileError"],[3,"SnippetOwned"],[3,"SourceAnnotationOwned"],[3,"SliceOwned"],[8,"AsAnnotationSnippet"],[3,"ParseError"],[3,"LangError"],[13,"UnexpectedStructInitializer"],[13,"NonComptimeVariable"],[13,"ComptimeVariable"],[13,"UnexpectedType"],[13,"MissingModule"],[13,"UnexpectedOverload"],[13,"ExpectedBoolean"],[13,"UnexpectedPattern"],[13,"UnpromotableType"],[13,"UnexpectedOperator"],[13,"MissingStructInitializer"],[13,"InvalidControlFlow"],[13,"CircularImport"],[13,"NotYetImplemented"],[13,"VariableAlreadyDefined"],[13,"MissingVariable"],[13,"MissingProperty"],[13,"ConstVariable"],[3,"DebrisFunctionInterface"],[8,"NormalizedFunctionInterface"],[8,"ValidReturnType"],[8,"ToFunctionInterface"],[4,"Rule"],[3,"HirContext"],[3,"HirFile"],[3,"SpannedIdentifier"],[3,"IdentifierPath"],[3,"DebrisParser"],[3,"Hir"],[3,"ImportDependencies"],[4,"HirInfixOperator"],[4,"HirExpression"],[4,"HirStatement"],[4,"HirConstValue"],[4,"HirControlKind"],[4,"HirDeclarationMode"],[4,"HirComparisonOperator"],[4,"HirTypePattern"],[4,"HirObject"],[4,"HirPrefixOperator"],[4,"HirItem"],[4,"HirFormatStringMember"],[3,"HirVariableUpdate"],[3,"HirFunctionCall"],[3,"HirStructInitialization"],[3,"Attribute"],[3,"HirFunction"],[3,"HirStruct"],[3,"HirModule"],[3,"HirInfiniteLoop"],[3,"HirConditionalBranch"],[3,"HirInfix"],[3,"HirPrefix"],[3,"HirImport"],[3,"HirControlFlow"],[3,"HirParameterDeclaration"],[3,"HirVariableInitialization"],[3,"HirPropertyDeclaration"],[3,"HirBlock"],[13,"Integer"],[13,"Bool"],[13,"Fixed"],[13,"String"],[13,"FormatString"],[13,"BinaryOperation"],[13,"UnaryOperation"],[13,"Function"],[3,"Runtime"],[3,"LlirContext"],[3,"Llir"],[4,"JsonFormatComponent"],[3,"FormattedText"],[3,"ExecuteRaw"],[4,"WriteTarget"],[4,"Condition"],[4,"Node"],[4,"VariableAccess"],[4,"VariableAccessMut"],[4,"ExecuteRawComponent"],[3,"Function"],[3,"FastStore"],[3,"FastStoreFromResult"],[3,"BinaryOperation"],[3,"Call"],[3,"Branch"],[3,"WriteMessage"],[13,"Compare"],[4,"Scoreboard"],[4,"ScoreboardOperation"],[4,"ScoreboardComparison"],[4,"ScoreboardValue"],[3,"BlockId"],[3,"ItemId"],[4,"MemoryLayout"],[3,"MemoryCounter"],[4,"ContextKind"],[4,"MirNode"],[4,"ControlFlowMode"],[4,"MirValue"],[8,"MirVisitor"],[3,"ReturnValues"],[3,"MirContext"],[3,"MirContextInfo"],[3,"Mir"],[3,"MirBuilder"],[3,"ContextId"],[3,"MirGotoContext"],[3,"MirCall"],[3,"MirJumpLocation"],[3,"MirUpdateValue"],[3,"MirReturnValue"],[3,"MirBranchIf"],[3,"NamespaceArena"],[3,"CachedFunctionSignature"],[3,"MirContextMap"],[13,"Template"],[3,"ObjBool"],[3,"ObjStaticBool"],[3,"ObjClass"],[8,"HasClass"],[4,"FormatStringComponent"],[3,"ObjFormatString"],[4,"FunctionParameters"],[4,"FunctionFlags"],[4,"CompilerFunction"],[3,"ObjFunction"],[3,"FunctionContext"],[3,"FunctionSignature"],[3,"FunctionOverload"],[3,"ObjInt"],[3,"ObjStaticInt"],[3,"ModuleFactory"],[3,"ObjModule"],[3,"ObjNativeFunction"],[3,"FunctionParameterDefinition"],[3,"ObjNativeFunctionSignature"],[3,"ObjNever"],[3,"ObjNull"],[3,"ObjString"],[3,"Struct"],[3,"ObjStruct"],[3,"ObjStructObject"]]},\
"debris_derive":{"doc":"","t":[23],"n":["object"],"q":["debris_derive"],"d":["Handles an impl block containing methods for debris …"],"i":[0],"f":[null],"p":[]},\
"debris_lang":{"doc":"The Debris compiler.","t":[5,5,5],"n":["debug_run","init","main"],"q":["debris_lang","",""],"d":["Compiles the file <code>test.txt</code> into llir","",""],"i":[0,0,0],"f":[[[["compileconfig",3]],[["result",6],["llir",3]]],[[],["compileconfig",3]],[[]]],"p":[]},\
"debris_std":{"doc":"The standard library implementation for the debris …","t":[5],"n":["load"],"q":["debris_std"],"d":["Loads the standard library module"],"i":[0],"f":[[[["compilecontext",3]],["objmodule",3]]],"p":[]},\
"vfs":{"doc":"Virstual in-memory file system. might switch to a more …","t":[3,13,3,13,4,11,11,11,11,11,11,12,11,11,11,11,12,14,14,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Directory","Directoy","File","File","FsElement","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contents","default","default","dir","dir","directories","directories","directories_inner","eq","eq","eq","file","file","files","fmt","fmt","fmt","from","from","from","into","into","into","ne","ne","ne","new","new","persist","persist","persist","push_string","resolve_path","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_contents","with_data"],"q":["vfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns a new directory with this name or returns an …","","Custom macro to easily generate predefined file structures…","","","","","","returns a new file with this name or returns an existing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,1,0,1,2,3,1,2,3,2,2,3,1,3,3,0,0,1,2,3,1,3,3,1,2,3,1,2,3,1,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,1,2,3,1,2,3,3,2],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["file",3]],[[],["directory",3]],[[],[["option",4],["directory",3]]],[[["string",3]],["directory",3]],null,null,null,[[["fselement",4]],["bool",15]],[[["file",3]],["bool",15]],[[["directory",3]],["bool",15]],[[],[["file",3],["option",4]]],[[],["file",3]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fselement",4]],["bool",15]],[[["file",3]],["bool",15]],[[["directory",3]],["bool",15]],[[]],[[]],[[["path",3],["str",15]],["result",6]],[[["path",3],["str",15]],["result",6]],[[["path",3],["str",15]],["result",6]],[[["str",15]]],[[],[["option",4],["fselement",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["hashmap",3],["string",3],["file",3],["hashmap",3],["directory",3]]],[[["str",15]]]],"p":[[4,"FsElement"],[3,"File"],[3,"Directory"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};