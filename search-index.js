var searchIndex = JSON.parse('{\
"debris_backends":{"doc":"Backend implementations for the debris compiler","t":[8,3,0,0,10,13,13,13,4,13,3,13,13,13,13,4,4,13,13,4,13,13,13,13,13,3,13,13,13,13,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,13,3,13,13,13,13,4,4,13,13,4,13,13,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,18,11,11,0,11,11,11,12,11,11,0,11,0,11,0,12,11,0,0,0,0,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,3,11,11,12,11,11,11,5,11,11,11,12,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,11,11,11,11,11,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,8,10,3,11,11,11,11,11,12,12,5,5,5,11,11,11],"n":["Backend","DatapackBackend","common","datapack","generate","Dummy","Equal","Execute","ExecuteComponent","Function","FunctionIdent","IfScoreRange","IfScoreRelation","JsonMessage","Maximum","MinecraftCommand","MinecraftRange","Minimum","NotEqual","ObjectiveCriterion","Range","RawCommand","ScoreboardAdd","ScoreboardOperation","ScoreboardOperationAdd","ScoreboardPlayer","ScoreboardRemove","ScoreboardSet","ScoreboardSetEqual","ScoreboardSetFromResult","commands","is_collection","namespace","path","player","scoreboard","comparison","player","player1","player2","range","and_then","command","command","criterion","function","json_name","message","name","name","operation","parts","player","player","player","player1","player1","player2","player2","target","value","value","from","to","Dummy","Equal","Execute","ExecuteComponent","Function","FunctionIdent","IfScoreRange","IfScoreRelation","JsonMessage","Maximum","MinecraftCommand","MinecraftRange","Minimum","NotEqual","ObjectiveCriterion","Range","RawCommand","ScoreboardAdd","ScoreboardOperation","ScoreboardOperationAdd","ScoreboardPlayer","ScoreboardRemove","ScoreboardSet","ScoreboardSetEqual","ScoreboardSetFromResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_operator","into","into","into","into","into","into","is_collection","is_condition","namespace","path","player","scoreboard","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","comparison","player","player1","player2","range","and_then","command","command","criterion","function","json_name","message","name","name","operation","parts","player","player","player","player1","player1","player2","player2","target","value","value","from","to","Datapack","FUNCTION_TAGS_PATH","add_load_json","add_tick_json","backend","borrow","borrow_mut","default","dir","fmt","from","function_context","functions","generator","into","json_formatter","main_dir","new","scoreboard_constants","scoreboard_context","stringify","templates","try_from","try_into","type_id","DatapackBackend","borrow","borrow_mut","default","fmt","from","generate","into","try_from","try_into","type_id","0","FunctionContext","FunctionId","GeneratedFunction","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commands","current_function_id","default","eq","equivalent","fmt","fmt","fmt","from","from","from","function_identifiers","function_namespace","functions","functions","get_filename","get_function_id","get_function_ident","hash","identifier","increment","insert","into","into","into","ne","new","next_function_id","register","register_custom_function","register_function","register_with_name","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user_id_map","DatapackGenerator","add_command","borrow","borrow_mut","build","catch_ouput","compile_context","fmt","from","function_calls_stats","function_ctx","get_as_single_command","get_condition","get_condition_inner","handle","handle_binary_operation","handle_branch","handle_call","handle_condition","handle_execute","handle_fast_store","handle_fast_store_from_result","handle_function","handle_main_function","handle_ticking_function","handle_write","into","llir","new","scoreboard_constants","scoreboard_ctx","stack","try_from","try_into","type_id","JsonTextWriter","borrow","borrow_mut","buf","default","flush_pending","fmt","format_json","from","into","into_string","pending","try_from","try_into","type_id","write","write_score","write_str","ScoreboardConstants","borrow","borrow_mut","constants","constants","default","fmt","from","get_name","into","name","try_from","try_into","type_id","Normal","ScoreboardContext","ScoreboardPlayerId","Temporary","add_player","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","format_player","format_scoreboard","from","from","from","get_scoreboard","get_scoreboard_player","get_temporary_player","hash","into","into","ne","new","player_fmt_string","scoreboard_players","scoreboard_prefix","scoreboards","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Stringify","as_str","TemplateData","borrow","borrow_mut","from","from","into","project","project_description","template_load_json","template_pack_mcmeta","template_tick_json","try_from","try_into","type_id"],"q":["debris_backends","","","","","debris_backends::common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::common::ExecuteComponent","","","","","debris_backends::common::MinecraftCommand","","","","","","","","","","","","","","","","","","","","","debris_backends::common::MinecraftRange","","debris_backends::common::commands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::common::commands::ExecuteComponent","","","","","debris_backends::common::commands::MinecraftCommand","","","","","","","","","","","","","","","","","","","","","debris_backends::common::commands::MinecraftRange","","debris_backends::datapack","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::backend","","","","","","","","","","","debris_backends::datapack::function_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::generator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::json_formatter","","","","","","","","","","","","","","","","","","debris_backends::datapack::scoreboard_constants","","","","","","","","","","","","","","debris_backends::datapack::scoreboard_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_backends::datapack::stringify","","debris_backends::datapack::templates","","","","","","","","","","","","",""],"d":["A Backend for debris, which has to convert <code>LLIR</code> into a …","The Datapack Backend implementation","Defines common items that are specific to the latest …","A Backend that can comppile to minecraft datapacks","Converts the llir into a directory","Mostly used by debris","A range that only contains one value","Any used execute command","A component in an execute command","Calls another function","A unique minecraft function identifier","Tests for a relation between a score and a static value","Tests for a relation between to scores","","A range with an upper bound, eg. ..50","Enumerates all minecraft commands that are used by any …","Any valid minecraft range","A range with a lower bound, eg. 0..","A range that contains every value except one","Any objective criterion","A full range, eg. 1..99","","","","Quick operation which adds or removes a static value","A combination of scoreboard and player","","Sets the scoreboard value to a specific integer","Sets the scoreboard value to another scorboard value","Sets the scoreboard value equal to the result of the …","","Whether this function is a collection, marked by a <code>#</code>","The namespace of this function, for example <code>debris</code>","The path of this function, for example <code>foo/bar/baz</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mostly used by debris","A range that only contains one value","Any used execute command","A component in an execute command","Calls another function","A unique minecraft function identifier","Tests for a relation between a score and a static value","Tests for a relation between to scores","","A range with an upper bound, eg. ..50","Enumerates all minecraft commands that are used by any …","Any valid minecraft range","A range with a lower bound, eg. 0..","A range that contains every value except one","Any objective criterion","A full range, eg. 1..99","","","","Quick operation which adds or removes a static value","A combination of scoreboard and player","","Sets the scoreboard value to a specific integer","Sets the scoreboard value to another scorboard value","Sets the scoreboard value equal to the result of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether this function is a collection, marked by a <code>#</code>","Returns whether this component is a condition (Right now …","The namespace of this function, for example <code>debris</code>","The path of this function, for example <code>foo/bar/baz</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an in-memory datapack","","","","","","","","The virtual file structure","","","","Returns the functions directory of this pack","","","","The name of the main directory","Creates a new <code>Datapack</code> from a [Config]","","","","Implements some functions which can static files which …","","","","The Datapack Backend implementation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of the current namespace","Returns an iterator of all the generated functions","","","","","","","","Inserts a function with a given id","","","","","","","Register a function with this id. Returns the filename of …","Registers a custom function which was not specified by …","","","","","","","","","","","","","A bijective mapping from blocks to minecraft functions …","This struct is used to generate a datapack from the llir …","Adds a command to the current stack","","","","Handles the given command and returns the produced output","The compilation configuration","","","Statistics for how often each function got called","Contains the already generated functions","Converts a bunch of minecraft commands into a single …","Evaluates this condition and, if it is true, calls …","","","","","","","","","","","Handles the main fucntion","Handles functions that run every tick","","","The llir to compile","","Keeps track of all constants that are used throughout the …","A context which keeps track of the currently used …","The current stack","","","","","","","","","","","","","","","","","","","","","","Keeps track of used scoreboard constants that are used in …","","","","","","","","","","","","","","","Holds data about specific scoreboard contexts","Used to differentiate between a generated id and a …","","","","","","","","","","","","","","","","","","Returns the name of this scoreboard","Gets the scoreboard player that corresponds to this <code>ItemId</code>","Makes a new scoreboard player and returns it as a …","","","","","Creates a new scoreboard context with the default …","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,0,4,0,5,5,4,3,0,0,3,3,0,3,4,4,4,4,0,4,4,4,4,0,6,6,6,7,7,8,9,8,8,9,10,11,12,13,14,13,15,13,16,17,10,18,11,19,20,17,20,17,15,18,19,21,21,2,3,4,0,4,0,5,5,4,3,0,0,3,3,0,3,4,4,4,4,0,4,4,4,4,4,5,3,7,2,6,4,5,3,7,2,6,4,5,3,7,2,4,5,3,7,2,4,4,5,5,3,3,7,2,2,6,6,4,5,3,7,2,6,3,4,5,3,7,2,6,6,5,6,6,7,7,4,5,3,7,2,4,5,3,2,6,4,5,3,7,2,6,4,5,3,7,2,6,4,5,3,7,2,6,8,9,8,8,9,10,11,12,13,14,13,15,13,16,17,10,18,11,19,20,17,20,17,15,18,19,21,21,0,22,22,22,0,22,22,22,22,22,22,0,22,0,22,0,22,22,0,0,0,0,22,22,22,0,23,23,23,23,23,23,23,23,23,23,24,0,0,0,25,24,26,25,24,26,24,24,25,26,24,24,24,25,24,26,25,24,26,26,26,26,26,25,26,26,24,25,24,26,25,24,26,24,26,26,26,26,26,26,24,25,24,26,25,24,26,25,24,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,0,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,29,29,30,0,0,30,31,31,30,31,30,30,30,30,30,31,30,31,31,31,30,30,31,31,31,30,31,30,30,31,31,31,31,31,30,31,30,31,30,31,30,0,32,0,33,33,33,33,33,33,33,0,0,0,33,33,33],"f":[null,null,null,null,[[["llir",3],["compilecontext",3]],["directory",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["minecraftcommand",4]],[[],["executecomponent",4]],[[],["minecraftrange",4]],[[],["scoreboardplayer",3]],[[],["objectivecriterion",4]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15],["scoreboardcomparison",4]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bool",15]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["config",3]]],[[["config",3]]],null,[[]],[[]],[[],["datapack",3]],null,[[["formatter",3]],["result",6]],[[]],null,[[],["directory",3]],null,[[]],null,null,[[["config",3]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["datapackbackend",3]],[[["formatter",3]],["result",6]],[[]],[[["llir",3],["compilecontext",3]],["directory",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["functionid",3]],[[]],null,null,[[],["functionid",3]],[[["functionid",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[]],null,[[],["string",3]],[[["blockid",3]],[["option",4],["functionid",3]]],[[["functionid",3]],[["option",4],["rc",3]]],[[]],null,[[]],[[["minecraftcommand",4],["functionid",3],["vec",3]]],[[]],[[]],[[]],[[["functionid",3]],["bool",15]],[[["rc",3],["str",15]]],[[],["functionid",3]],[[["functionid",3]]],[[],["functionid",3]],[[["blockid",3]],["functionid",3]],[[["functionid",3],["string",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[["minecraftcommand",4]]],[[]],[[]],[[],["directory",3]],[[["node",4]],[["minecraftcommand",4],["vec",3]]],null,[[["formatter",3]],["result",6]],[[]],null,null,[[["minecraftcommand",4],["vec",3]],[["minecraftcommand",4],["option",4]]],[[["condition",4],["minecraftcommand",4],["option",4]],["minecraftcommand",4]],[[["condition",4],["vec",3]]],[[["node",4]]],[[["binaryoperation",3]]],[[["branch",3]]],[[["call",3]]],[[["condition",4]]],[[["executeraw",3]]],[[["faststore",3]]],[[["faststorefromresult",3]]],[[["function",3]]],[[],["bool",15]],[[],["bool",15]],[[["writemessage",3]]],[[]],null,[[["llir",3],["compilecontext",3]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],null,[[]],[[]],[[["formatter",3]],["result",6]],[[["scoreboardcontext",3],["formattedtext",3]],["string",3]],[[]],[[]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["scoreboardcontext",3],["jsonformatcomponent",4]]],[[["scoreboardplayer",3]]],[[["str",15]]],null,[[]],[[]],[[]],null,[[],["scoreboardconstants",3]],[[["formatter",3]],["result",6]],[[]],[[["scoreboardcontext",3],["i32",15]],["scoreboardplayer",3]],[[]],[[["i32",15]],[["rc",3],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["scoreboardplayerid",4]],[["rc",3],["str",15]]],[[]],[[]],[[]],[[]],[[],["scoreboardplayerid",4]],[[]],[[["scoreboardplayerid",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]],[["rc",3],["str",15]]],[[["scoreboard",4]],[["rc",3],["str",15]]],[[]],[[["itemid",3]]],[[]],[[["scoreboard",4]],[["rc",3],["str",15]]],[[["itemid",3]],[["rc",3],["str",15]]],[[],["scoreboardplayer",3]],[[]],[[]],[[]],[[["scoreboardplayerid",4]],["bool",15]],[[["buildmode",4],["string",3]]],null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["str",15]],null,[[]],[[]],[[["config",3]]],[[]],[[]],null,null,[[["templatedata",3]],["string",3]],[[["templatedata",3]],["string",3]],[[["templatedata",3]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[8,"Backend"],[4,"ObjectiveCriterion"],[4,"MinecraftRange"],[4,"MinecraftCommand"],[4,"ExecuteComponent"],[3,"FunctionIdent"],[3,"ScoreboardPlayer"],[13,"IfScoreRelation"],[13,"IfScoreRange"],[13,"Execute"],[13,"ScoreboardSetFromResult"],[13,"RawCommand"],[13,"ScoreboardAdd"],[13,"Function"],[13,"JsonMessage"],[13,"ScoreboardRemove"],[13,"ScoreboardOperation"],[13,"ScoreboardSet"],[13,"ScoreboardOperationAdd"],[13,"ScoreboardSetEqual"],[13,"Range"],[3,"Datapack"],[3,"DatapackBackend"],[3,"FunctionId"],[3,"GeneratedFunction"],[3,"FunctionContext"],[3,"DatapackGenerator"],[3,"JsonTextWriter"],[3,"ScoreboardConstants"],[4,"ScoreboardPlayerId"],[3,"ScoreboardContext"],[8,"Stringify"],[3,"TemplateData"]]},\
"debris_common":{"doc":"Common items used by the compiler","t":[4,13,13,13,13,13,13,13,13,13,3,6,3,13,4,13,3,13,13,13,13,13,13,3,13,4,13,13,13,0,5,12,0,0,0,12,12,12,12,12,0,12,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11],"n":["Accessor","Add","And","Clone","CmpEq","CmpGe","CmpGt","CmpLe","CmpLt","CmpNe","Code","CodeId","CodeRef","Div","Ident","Index","InputFiles","Modu","Mul","Not","Or","Path","PromoteRuntime","Span","Special","SpecialIdent","Sub","UnaryMinus","Value","accessor","character_width_at_index","file","graph","ident","input_file","input_files","input_files","len","path","source","span","start","Accessor","Path","borrow","borrow_mut","clone","clone_into","eq","equals_ident","equivalent","fmt","from","from","hash","into","ne","to_owned","try_from","try_into","type_id","GraphDfs","GraphLoopDetector","GraphMatrix","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","data","default","default","edges","fmt","from","from","from","get_row","get_row_mut","has_loop","index","index_mut","into","into","into","iter","iter_order","new","rows","size","to_visit","to_visit","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","visited","Add","And","Clone","CmpEq","CmpGe","CmpGt","CmpLe","CmpLt","CmpNe","Div","Ident","Index","Modu","Mul","Not","Or","PromoteRuntime","Special","SpecialIdent","Sub","UnaryMinus","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","into","into","ne","new","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Code","CodeId","CodeRef","InputFile","InputFiles","add_input","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","code","default","eq","equivalent","file","fmt","fmt","fmt","fmt","from","from","from","from","get_code","get_code_ref","get_input","get_input_offset","get_offset","get_relative_span","get_span","get_span_code","get_span_file","get_span_line","get_span_str","get_total_offset","hash","input_files","input_files","into","into","into","into","ne","new","offset","path","source","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Span","at_start","borrow","borrow_mut","char_bounds","character_width_at_index","clone","clone_into","dropped_left_n","empty","end","eq","equivalent","fmt","from","hash","into","is_empty","len","len","ne","new","start","start","to_owned","try_from","try_into","type_id","until"],"q":["debris_common","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::accessor","","","","","","","","","","","","","","","","","","","debris_common::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::ident","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::input_file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_common::span","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An accessor represents a dotted path","","","","","","","","","","A code object contains the source code and optionally a …","The type of a code id, currently just a usize","A handy object to work in a specific input file","","identifier for a value","","Keeps track of all input files and allows to make cheap …","","","","","A path like a.b.c","","A span which uniquely specifies a span of characters in …","","Every special identifier","","","Since Idents have be cloned quite often a generic value is…","","Utility function to get the width of a character at a …","","Very basic graph implementation which is specialized for …","","Input files are used to store the files required for …","","All input files which are used in this compiler","","","","","","An accessor represents a dotted path","A path like a.b.c","","","","","","","","","","","","","","","","","","A struct that implements a non-recursive …","Detects loops in a graph. This is a custom struct in …","A directed graph backed by a matrix. …","","","","","","","","","","Returns the indices of all [Option::Some] variants in the …","","","","","","","Returns <code>true</code> if the graph has a loop which is reachable …","","","","","","","","Creates a new [GraphMatrix] with a <code>size</code> rows and <code>size</code> …","","","","","","","","","","","","","","","","","","","","","","","","","identifier for a value","","","","","","","","Every special identifier","","","Since Idents have be cloned quite often a generic value is…","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new identifier","","","","","","","","","","","A code object contains the source code and optionally a …","The type of a code id, currently just a usize","A handy object to work in a specific input file","A single input file, implementation detail","Keeps track of all input files and allows to make cheap …","Adds a code unit and returns its ID","","","","","","","","","","","The code of the input file","","","","","","","","","","","","","","","Gets the input file with this id","Gets the offset of the file with this id","","Returns a span that is relative to the start of this code …","","","Searches for the input file that contains the given span","Returns the line in a file at which this span begins","Returns the str that corresponds to a span","Calculates the total byte offset","","","All input files which are used in this compiler","","","","","","","The global offset","","","","","","","","","","","","","","","","A span which uniquely specifies a span of characters in …","Returns a span with the same start and a length of one","","","Since ranges are used to index into a str on a byte level,…","Utility function to get the width of a character at a …","","","","Creates an empty Span","Returns the end of this span","","","","","","","Returns, whether this span is empty","Returns the length of this span","","","Creates a new <code>Span</code> from the starting character and its …","Returns the start of this span","","","","","","Constructs a new span which ranges from the start of this …"],"i":[0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,2,0,1,1,1,1,3,1,0,2,0,1,1,2,0,0,4,0,0,0,4,5,6,7,7,0,6,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,8,9,10,8,9,10,8,9,10,8,8,8,9,10,8,8,9,8,8,8,9,10,10,10,8,8,8,9,10,8,9,10,8,9,10,8,9,10,9,1,1,1,1,1,1,1,1,1,1,0,2,1,1,1,1,1,2,0,1,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,1,2,2,2,1,2,1,2,1,2,2,2,1,2,1,2,1,2,1,2,1,0,0,0,0,0,5,7,4,11,5,7,4,11,5,4,4,11,5,7,7,4,7,4,11,5,7,4,11,5,4,5,5,5,4,4,4,5,5,5,5,5,7,4,5,7,4,11,5,7,5,11,7,7,4,7,4,11,5,7,4,11,5,7,4,11,5,0,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["str",15]],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["accessor",4]],[[]],[[["accessor",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["ident",4]]],[[]],[[]],[[]],[[["accessor",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["graphloopdetector",3]],[[],["graphdfs",3]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15],["graphmatrix",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["graphmatrix",3]]],null,[[["usize",15]]],[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["ident",4]],[[],["specialident",4]],[[]],[[]],[[["ident",4]],["bool",15]],[[["specialident",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["specialident",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ident",4]],["bool",15]],[[["asref",8],["str",15]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["code",3]],["codeid",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["coderef",3]],[[]],null,[[],["inputfiles",3]],[[["code",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["code",3]],[[["codeid",6]],["coderef",3]],[[["codeid",6]],["code",3]],[[["codeid",6]],["usize",15]],[[],["usize",15]],[[["span",3]],["span",3]],[[],["span",3]],[[["span",3]],["coderef",3]],[[["span",3]]],[[["span",3]],["usize",15]],[[["span",3]],["str",15]],[[],["usize",15]],[[]],null,null,[[]],[[]],[[]],[[]],[[["code",3]],["bool",15]],[[]],null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[],["span",3]],[[]],[[]],[[["str",15]]],[[["usize",15],["str",15]],["usize",15]],[[],["span",3]],[[]],[[["usize",15]],["span",3]],[[]],[[],["usize",15]],[[["span",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["bool",15]],[[],["usize",15]],null,[[["span",3]],["bool",15]],[[["usize",15]]],[[],["usize",15]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["span",3]]]],"p":[[4,"SpecialIdent"],[4,"Ident"],[4,"Accessor"],[3,"CodeRef"],[3,"InputFiles"],[3,"Span"],[3,"Code"],[3,"GraphMatrix"],[3,"GraphLoopDetector"],[3,"GraphDfs"],[3,"InputFile"]]},\
"debris_core":{"doc":"Core implementation of the debris compiler","t":[12,13,4,13,13,3,13,13,3,3,13,13,13,13,13,13,13,13,3,13,13,13,8,6,3,4,13,13,13,13,13,13,4,4,8,12,10,12,0,12,0,0,12,12,0,12,10,0,0,10,11,11,0,12,12,10,11,11,12,0,0,10,0,0,0,12,12,12,12,12,12,0,12,3,4,6,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,3,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,12,11,11,11,4,3,13,13,13,13,4,13,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,6,3,8,10,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,12,11,11,11,11,11,11,11,11,8,17,13,4,13,13,13,13,3,13,4,6,13,13,13,13,13,13,3,13,6,3,3,3,13,13,13,13,13,13,13,13,13,12,12,12,10,11,11,11,12,11,11,11,11,12,11,11,12,12,11,11,11,11,12,11,12,12,0,11,12,0,12,12,0,11,12,12,12,12,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,3,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,12,3,8,8,8,11,11,10,11,11,11,11,10,11,10,10,11,10,11,11,11,13,3,13,3,3,3,3,3,4,3,13,17,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,13,11,11,11,12,12,13,13,13,13,13,13,12,13,13,13,13,13,11,12,11,11,13,13,13,13,13,13,13,12,13,11,11,11,13,13,13,13,11,11,11,11,13,13,13,11,11,0,0,0,13,0,12,13,13,12,13,13,13,13,13,13,13,13,13,12,11,13,11,11,11,11,11,13,11,13,11,13,12,12,13,12,13,13,13,13,11,11,13,13,13,13,12,12,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,13,13,13,11,11,11,11,13,13,13,13,13,3,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,3,3,12,11,11,11,11,12,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,12,11,11,11,11,11,11,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,3,4,3,4,4,4,4,3,3,3,3,3,4,4,3,4,3,3,4,3,4,3,3,3,4,3,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,3,3,3,12,12,12,12,0,0,0,0,0,12,12,12,0,0,12,12,12,0,12,3,4,13,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,12,11,12,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,12,11,11,11,11,12,11,11,12,11,11,11,3,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,13,13,3,13,3,13,3,13,13,13,4,13,13,3,4,3,13,3,13,3,4,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,12,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,13,13,3,3,3,17,13,13,3,13,13,13,6,3,3,4,8,3,3,13,13,13,13,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,10,11,11,11,11,5,5,12,12,11,11,11,11,11,11,12,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,13,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,3,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,4,13,4,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,13,13,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,3,13,13,13,3,4,13,4,13,13,13,13,3,3,3,3,3,3,3,3,3,4,3,3,4,8,3,3,13,13,16,13,13,3,13,13,13,13,12,12,12,11,11,12,12,12,12,12,12,12,12,12,12,11,12,11,11,11,12,11,11,11,12,12,12,12,12,12,11,12,12,12,12,12,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,10,10,10,10,10,10,12,12,12,3,3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,11,11,11,12,11,11,11,13,13,13,13,13,3,3,3,3,4,3,3,4,13,13,13,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,16,10,10,10,10,11,11,10,10,13,3,4,3,13,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,5,11,11,11,11,5,11,11,11,11,11,11,11,12,11,11,11,12,11,11,5,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,3,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,3,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,3,4,3,4,3,6,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,11,11,12,11,11,11,11,12,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Any","BuildMode","Class","Class","CompileContext","ComptimeBool","ComptimeInt","Config","DebrisObject","Debug","Debug","DynamicBool","DynamicInt","FormatString","Full","Function","Module","Namespace","Never","None","Null","ObjectPayload","ObjectProperties","ObjectRef","OptMode","Release","String","Struct","StructObject","Tuple","TupleObject","Type","TypePattern","ValidPayload","ancestor","as_any","build_mode","class","class","compile_context","config","config","current_uid","debris_object","default_scoreboard_name","eq","error","function_interface","get_class","get_class","get_class","hir","id_counter","input_files","into_object","into_result","into_result","keymap","llir","memory","memory_layout","mir","namespace","objects","opt_mode","own_id","payload","project_description","project_name","type_ctx","types","values","Class","ClassKind","ClassRef","Function","Struct","StructObject","Tuple","TupleObject","Type","borrow","borrow","borrow_mut","borrow_mut","comptime_encodable","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_property","get_property","into","into","is_bool","is_function","is_never","is_struct","kind","matches","matches","matches_exact","matches_exact","matches_type","memory_ids","ne","ne","new_empty","pattern_runtime_encodable","properties","runtime_encodable","set_property","to_string","to_string","try_from","try_from","try_into","try_into","typ","type_id","type_id","namespace","namespace","parameters","return_value","strukt","tuple","CompileContext","TypeContext","TypeContextRef","add_input_file","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache","clear_cache","config","ctx","current_uid","default","default","drop","eq","equivalent","fmt","fmt","from","from","from","get","get_input_file","get_unique_id","input_files","insert","into","into","into","ne","never","never","null","null","try_from","try_from","try_from","try_into","try_into","try_into","type_ctx","type_ctx","type_ctx","type_id","type_id","type_id","BuildMode","Config","Debug","Debug","Full","None","OptMode","Release","aggressive_function_inlining","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_mode","clone","clone","clone_into","clone_into","default","default","default_scoreboard_name","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","into","into","into","is_debug","is_release","ne","opt_mode","opt_mode","project_description","project_name","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_build_mode","0","DebrisObject","ObjectPayload","ObjectProperties","ObjectRef","ValidPayload","as_any","as_function","as_function","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone_into","create_class","create_class","deref","downcast_payload","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","from_payload","get_class","get_class","get_property","get_property","get_property","into","into","into_object","into_result","memory_layout","payload","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AsAnnotationSnippet","COLORED","CircularImport","CompileError","ComptimeVariable","ConstVariable","ExpectedBoolean","InvalidControlFlow","LangError","LangError","LangErrorKind","LangResult","MissingModule","MissingProperty","MissingStructInitializer","MissingVariable","NonComptimeVariable","NotYetImplemented","ParseError","ParseError","Result","SliceOwned","SnippetOwned","SourceAnnotationOwned","TupleMismatch","UnexpectedOperator","UnexpectedOverload","UnexpectedPattern","UnexpectedStructInitializer","UnexpectedType","UnpromotableType","UnreachableCode","VariableAlreadyDefined","annotation_type","annotation_type","annotations","as_annotation_snippet","as_annotation_snippet","borrow","borrow_mut","caller","clone","clone_into","eq","equivalent","expected","fmt","fmt","fold","footer","format","from","from","from","id","into","kind","label","lang_error","ne","origin","parse_error","range","slices","snippet","source","source","span","span","title","to_owned","to_string","to_string","try_from","try_into","type_id","utils","available","class","ctx_span","declared","error","expected","expected","got","got","got","got","ident","lhs","lhs_count","missing","mode","module","msg","name","notes","operator","parameters","parent","path","previous_definition","property","rhs","rhs_count","similar","similar","strukt","strukt","value_span","var_name","var_name","var_name","var_name","CircularImport","ComptimeVariable","ConstVariable","ExpectedBoolean","InvalidControlFlow","LangError","LangErrorKind","LangErrorSnippet","MissingModule","MissingProperty","MissingStructInitializer","MissingVariable","NonComptimeVariable","NotYetImplemented","TupleMismatch","UnexpectedOperator","UnexpectedOverload","UnexpectedPattern","UnexpectedStructInitializer","UnexpectedType","UnpromotableType","UnreachableCode","VariableAlreadyDefined","as_annotation_snippet","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","caller","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","footer","from","from","from","get_snippet","into","into","into","kind","ne","ne","new","slices","span","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","available","class","ctx_span","declared","error","expected","expected","got","got","got","got","ident","lhs","lhs_count","missing","mode","module","msg","name","notes","operator","parameters","parent","path","previous_definition","property","rhs","rhs_count","similar","similar","strukt","strukt","value_span","var_name","var_name","var_name","var_name","ParseError","as_annotation_snippet","borrow","borrow_mut","clone","clone_into","eq","equivalent","expected","fmt","fmt","from","into","ne","span","to_owned","to_string","try_from","try_into","type_id","AnnotationOwned","SliceOwned","SnippetOwned","SourceAnnotationOwned","annotation_type","annotation_type","annotation_type","annotations","as_annotation","as_slice","as_snippet","as_source_annotation","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fold","footer","from","from","from","from","id","id","into","into","into","into","label","label","origin","range","slices","source","title","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","display_expected_of","display_expected_of_all","display_expected_of_any","0","DebrisFunctionInterface","NormalizedFunctionInterface","ToFunctionInterface","ValidReturnType","borrow","borrow_mut","call","call","from","from","from","get_class","into","into_result","query_parameters","query_return","to_function_interface","try_from","try_into","type_id","COMMENT","DebrisParser","EOI","Hir","HirContext","HirFile","IdentifierPath","ImportDependencies","Rule","SpannedIdentifier","WHITESPACE","_PEST_GRAMMAR_DebrisParser","accessor","assignment","assignment_comptime","assignment_let","assignment_pattern","assignment_tuple","attribute_list","block","bool","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","clone","clone_into","cmp","code_id","code_id","compare_eq","compare_ge","compare_gt","compare_le","compare_lt","compare_ne","compile_context","control_flow","control_flow_break","control_flow_continue","control_flow_kw","control_flow_return","default","dependencies","eq","equivalent","exp_infix","exp_parens","exp_prefix","exp_primary","expression","expression_base","expression_without_struct","file_offset","fixed","fmt","fmt","fmt","fn_pattern","format_string","format_string_text","format_string_var","from","from","from","from","function_call","function_def","function_signature","get","hash","hir_context","hir_impl","hir_nodes","ident","identifier","idents","if_branch","import","imported_modules","inf_loop","infix_and","infix_comparison","infix_divide","infix_minus","infix_modulo","infix_or","infix_plus","infix_times","input_file","insert","integer","into","into","into","into","is_empty","item","iter","keyword","len","loop_block","main_function","main_function","module","modules","object","object_def","param_list","parameter_list","parse","partial_cmp","prefix_minus","prefix_not","prefix_value","program","span","spans","statement","string","string_inner","struct_def","struct_initialization","struct_initializer_pair","struct_initializer_pairs","struct_items","struct_variables","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tuple_initialization","tuple_pattern","type_def","type_id","type_id","type_id","type_id","type_pattern","type_pattern_list","value","value_update","variable_declaration","HirContext","add_import_file","borrow","borrow_mut","compile_context","dependencies","file_offset","fmt","from","get_ident","input_file","into","new","normalize_pest_span","span","try_from","try_into","type_id","HirFile","PREC_CLIMBER","__private_field","borrow","borrow","borrow_mut","borrow_mut","code_id","deref","fmt","from","from","from_code","get_accessor","get_attribute","get_block","get_conditional_branch","get_control_flow","get_expression","get_expression_primary","get_function_call","get_function_def","get_identifier_path","get_import","get_infinite_loop","get_item","get_module","get_object","get_object_def","get_operator","get_param_list","get_pattern","get_property_declaration","get_statement","get_struct_def","get_struct_initialization","get_tuple_initialization","get_type_pattern","get_unary_operator","get_value","initialize","into","into","main_function","try_from","try_from","try_into","try_into","type_id","type_id","And","Attribute","BinaryOperation","Block","Block","Bool","Break","Comparison","Comptime","ConditionalBranch","ConditonalBranch","Continue","ControlFlow","Divide","Eq","Fixed","FormatString","Function","Function","FunctionCall","FunctionCall","Ge","Gt","HirBlock","HirComparisonOperator","HirConditionalBranch","HirConstValue","HirControlFlow","HirControlKind","HirDeclarationMode","HirExpression","HirFormatStringMember","HirFunction","HirFunctionCall","HirImport","HirInfiniteLoop","HirInfix","HirInfixOperator","HirItem","HirModule","HirObject","HirParameterDeclaration","HirPrefix","HirPrefixOperator","HirPropertyDeclaration","HirStatement","HirStruct","HirStructInitialization","HirTupleInitialization","HirTypePattern","HirVariableInitialization","HirVariablePattern","HirVariableUpdate","Ident","Import","InfiniteLoop","InfiniteLoop","Integer","Le","Let","Lt","Minus","Minus","Module","Modulo","Ne","Not","Object","Or","Path","Path","Plus","Return","Statement","String","String","Struct","StructInitialization","Times","Tuple","Tuple","TupleInitialization","UnaryOperation","Value","Variable","Variable","VariableDecl","VariableUpdate","accessor","accessor","accessor","accessor","attributes","attributes","attributes","block","block","block","block_negative","block_positive","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","condition","datatype","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_ident","get_raw_special_ident","get_special_ident","id","ident","ident","ident","ident","ident","ident","ident_span","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","kind","last_item_span","mode","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","objects","objects","operator","operator","parameter_span","parameters","parameters","parameters_span","pattern","properties","return_type","return_type_span","return_value","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","statements","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typ","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","values","values","span","span","span","span","span","value","value","value","value","value","lhs","operation","operation","rhs","value","parameters","return_type","span","span","values","IdentifierPath","SpannedIdentifier","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","display","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","hash","hash","idents","idents","into","into","last","ne","ne","new","new","single_ident","span","span","split_at_last","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CallGraph","Llir","LlirContext","Runtime","compile_context","context_id","functions","graph","json_format","llir_builder","llir_context","llir_impl","llir_nodes","load_blocks","loop_detector","mir_nodes","opt","runtime","runtime","scheduled_blocks","span","utils","visitor","FormattedText","JsonFormatComponent","RawText","Score","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","components","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","into","into","ne","ne","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","LlirBuilder","arena","borrow","borrow_mut","build","context","context_id","current_function","emit","from","get_object","get_object_by_id","get_object_or_none","into","llir_helper","mir_contexts","new","nodes","replace_object","set_object","try_from","try_into","type_id","visit_branch_if","visit_call","visit_context","visit_goto_context","visit_jump_location","visit_return_value","visit_update_value","LlirContext","borrow","borrow_mut","compile_context","context_id","fmt","from","get_object","into","mir_nodes","replace_object","set_object","span","try_from","try_into","type_id","Llir","LlirFunction","LlirFunctions","add","block_for","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","context_to_function","default","fmt","fmt","fmt","fmt","from","from","from","from_mir","function_id_counter","functions","functions","get_function","get_function_calls","into","into","into","into_llir","is_context_registered","main_function","nodes","returned_value","runtime","runtime","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","Actionbar","And","BinaryOperation","BinaryOperation","Branch","Branch","Call","Call","Chat","Compare","Condition","Condition","Execute","ExecuteRaw","ExecuteRawComponent","FastStore","FastStore","FastStoreFromResult","FastStoreFromResult","Function","Node","Nop","Or","Read","Read","ReadWrite","ReadWrite","ScoreboardValue","String","Subtitle","Title","VariableAccess","VariableAccessMut","Write","Write","Write","WriteMessage","WriteTarget","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calls_function","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","condition","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","has_call","id","id","id","id","id","inner_iter_with_guarantee","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_effect_free","is_effect_free","is_empty","is_simple","iter","iter_mut","iter_with_guarantee","lhs","message","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg_branch","nodes","nodes","not","operation","pos_branch","reads_from","returned_value","rhs","scoreboard","scoreboard","scoreboard","target","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variable_accesses","variable_accesses","variable_accesses_mut","variable_accesses_mut","writes_to","comparison","lhs","rhs","call_graph","function_parameters","global_opt","peephole_opt","variable_metadata","CallGraph","InfiniteLoopDetector","borrow","borrow","borrow_mut","borrow_mut","default","detect_infinite_loop","fmt","from","from","from","graph","graph_for","has_loop","into","into","iter_dfs","loop_detector","modify_call","pending_functions","try_from","try_from","try_into","try_into","type_id","type_id","update","visited_functions","visitor","FunctionParameter","FunctionParameters","None","Read","Write","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone_into","default","default","dependencies_for","fmt","fmt","from","from","into","into","is_dependency","is_read","parameters","set_read","set_read_weak","set_write_weak","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","ChangeReads","ChangeWrite","CodeStats","Commands","ConstOptimizer","DEBUG","Delete","DiscardResult","GlobalOptimizer","InlineBranch","InlineFunction","InsertAfter","NodeId","OptimizeCommand","OptimizeCommandDeque","OptimizeCommandKind","Optimizer","RedundancyOptimizer","RedundantCopyOptimizer","RemoveAliasFunction","Replace","SetCondition","UpdateBranch","add_node","aggressive_function_inlining","alias_function_optimizer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_graph","clear","commands","config","default","default","default","default","deref","deref_mut","execute_commands","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","function_calls","function_parameters","functions","get_call_count","get_function","get_function_mut","get_info","get_reads","id","infinite_loop_detector","into","into","into","into","into","into","into","into","into","is_id_unused","iter_at","iter_functions","iter_nodes","kind","main_function","new","new","new","new","new","optimize","optimize","optimize","optimize","optimize","optimize_call_chain","optimize_common_path","optimizer","pending_commands","previous_node","push","remove_node","retain_functions","run","run_optimizer","runtime","shift","shift_back","shift_forward","simple_arithmetic_optimization","stats","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_node","value_hints","variable_information","visited_functions","branch","new_node","PeepholeOptimizer","borrow","borrow_mut","default","fmt","from","into","nodes","nodes","optimize","optimize_and_insert","optimize_branch","push","take","try_from","try_into","type_id","value_hints","Exact","Hint","Unknown","ValueHints","VariableUsage","add_read","add_write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear_all","clear_hint","clone","clone","clone_into","clone_into","default","default","default","exact","fmt","fmt","fmt","from","from","from","get_hint","get_scoreboard_value","hints","into","into","into","reads","remove_read","remove_write","set_hint","static_binary_operation","static_condition","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_hints","writes","Runtime","add_on_load","borrow","borrow_mut","contains","default","fmt","from","into","load_blocks","root_blocks","schedule","scheduled_blocks","try_from","try_into","type_id","0","BlockId","Custom","Divide","Equal","Greater","GreaterOrEqual","Internal","ItemId","Less","LessOrEqual","Main","Max","Min","Minus","Modulo","NotEqual","Plus","Scoreboard","Scoreboard","ScoreboardComparison","ScoreboardOperation","ScoreboardValue","Static","Times","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","context","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","evaluate","evaluate","flip_sides","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","id","id","into","into","into","into","into","into","invert","ne","ne","ne","ne","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MemoryCounter","MemoryLayout","Multiple","One","Unsized","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","context_id","copy","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","id","into","into","mem_copy","mem_size","ne","ne","new","next_id","next_item","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","Block","BranchIf","Break","CachedFunctionSignature","Call","ComptimeConditionalBlock","Concrete","ContextId","ContextKind","Continue","ControlFlowMode","Function","GotoContext","JumpLocation","Loop","Mir","MirBranchIf","MirBuilder","MirCall","MirContext","MirContextInfo","MirContextMap","MirGotoContext","MirJumpLocation","MirNode","MirReturnValue","MirUpdateValue","MirValue","MirVisitor","NamespaceArena","NamespaceIndex","NativeFunction","Normal","Output","Return","ReturnValue","ReturnValues","RuntimeConditionalBlock","Struct","Template","UpdateValue","arena","block_id","block_id","borrow","borrow_mut","compile_context","compile_context","condition","context","context_id","context_id","context_stack","contexts","contexts","control_flow","default","default_return","fmt","fmt","from","function","get","get_main_context","get_mut","global_context","hir_function_blocks","hir_modules","id","id","index","into","jump_location_counter","kind","main_context","main_context","mir","mir_builder","mir_context","mir_context_kind","mir_control_flow","mir_impl","mir_nodes","mir_visitor","namespaces","namespaces","neg_branch","new_value","nodes","parameters","parameters","pos_branch","return_index","return_type","return_value","return_values","span","span","span","span","template","ticking_contexts","ticking_contexts","to_string","try_from","try_into","type_id","value","values","visit_branch_if","visit_call","visit_goto_context","visit_jump_location","visit_return_value","visit_update_value","visited_functions","class","id","CachedFunctionSignature","ContextStack","MirBuilder","accept_function_parameters","add_context","add_context_after","add_mutable_value","arena","arena_mut","assign_to_pattern","block_id","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_context","call_function","compile_context","contains","context","context_info","context_mut","context_stack","current_context","current_context","current_span","dynamic_context","fmt","fmt","fmt","from","from","from","get_jump_target","get_type_pattern","global_context","hir_function_blocks","hir_modules","instantiate_native_function","into","into","into","iter","jump_location_for","jump_locations","main_context","mir","namespace_mut","new","parameters","pop","pop_context","pop_jump_location","promote_runtime","push","push","push_existing_context","push_jump_location","register_ticking_function","return_type","stack","ticking_contexts","try_clone","try_clone_if_variable","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_return_value","visit","visit_block","visit_block_local","visit_conditional_branch","visit_const_value","visit_control_flow","visit_expression","visit_function","visit_function_call","visit_import","visit_infinite_loop","visit_module","visit_object","visit_statement","visit_struct","visit_struct_initialization","visit_tuple_initialization","visit_variable_declaration","visit_variable_update","visited_functions","0","0","AccessedProperty","ContextId","MirContext","MirContextInfo","NamespaceArena","NamespaceIndex","ReturnValues","add","add_anonymous_object","add_anonymous_template","add_anonymous_template","add_unique_value","add_unique_value","add_value","add_value","arena","as_inner","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compile_context","context","control_flow","convert_into_template","declare_as_variable","default","default_return","dummy","eq","eq","equivalent","equivalent","find_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","get","get","get_by_id","get_from_spanned_ident","get_from_spanned_ident","get_ident","get_mut","get_single","get_span_str","get_template","get_template_or_default","get_type_pattern","hash","hash","id","insert_with","into","into","into","into","into","into","into","jump_location_counter","kind","namespace","namespace_mut","namespaces","ne","ne","new","new","next_jump_location","nodes","parent","partial_cmp","push","register","register_function_call","register_function_call","register_members","replace_with_id","resolve_idents","resolve_path","resolve_path","return_values","search","span","span","template","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","Block","ComptimeConditionalBlock","ContextKind","Function","Loop","NativeFunction","RuntimeConditionalBlock","Struct","borrow","borrow_mut","clone","clone_into","default_return","eq","equivalent","fmt","from","into","is_dynamic","is_function","is_loop","matches_control_flow","to_owned","try_from","try_into","type_id","Break","Continue","ControlFlowMode","Normal","Return","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","exits_block","fmt","from","from","into","is_normal","to_owned","try_from","try_into","type_id","Mir","add_context","borrow","borrow_mut","context_info","contexts","default","fmt","from","from_hir","into","namespaces","try_from","try_into","type_id","BranchIf","Call","Concrete","GotoContext","JumpLocation","MirBranchIf","MirCall","MirGotoContext","MirJumpLocation","MirNode","MirReturnValue","MirUpdateValue","MirValue","ReturnValue","Template","UpdateValue","assert_type","assert_type_exact","block_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","clone","clone_into","concrete","concrete_object","condition","context_id","context_id","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expect_concrete","expect_template","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","function","get_property","id","index","into","into","into","into","into","into","into","into","is_concrete","is_template","ne","ne","ne","ne","ne","ne","ne","neg_branch","new_value","null","parameters","pos_branch","return_index","return_value","signature_class","span","span","span","template","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","class","id","MirVisitor","Output","visit_branch_if","visit_call","visit_goto_context","visit_jump_location","visit_node","visit_node","visit_return_value","visit_update_value","Anonymous","Namespace","NamespaceEntry","NamespaceIterator","Variable","add_object","add_value","add_value_at","ancestor","ancestor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","declare_as_variable","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","get","get_by_id","id_counter","into","into","into","into_iter","is_empty","is_variable","iter","keymap","keymap_iter","len","namespace","ne","ne","new","next","own_id","register_key_at","replace_object_at","size_hint","span","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","values","span","value","obj_bool","obj_bool_static","obj_class","obj_format_string","obj_function","obj_int","obj_int_static","obj_module","obj_native_function","obj_never","obj_null","obj_string","obj_struct","obj_struct_object","obj_tuple_object","ObjBool","and_static","as_scoreboard_value","borrow","borrow_mut","class","cmp","eq","equivalent","fmt","fmt","from","from","get_class","id","into","into_result","memory_layout","memory_layout","ne","new","or_static","to_string","try_from","try_into","type_id","ObjStaticBool","as_scoreboard_value","borrow","borrow_mut","class","eq","equivalent","fmt","fmt","from","from","get_class","into","into_result","memory_layout","ne","to_string","try_from","try_into","type_id","value","HasClass","ObjClass","borrow","borrow_mut","class","class","class","clone","clone_into","deref","eq","equivalent","fmt","fmt","from","from","get_class","get_property","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","FormatStringComponent","ObjFormatString","String","Value","borrow","borrow","borrow_mut","borrow_mut","class","clone","clone","clone_into","clone_into","components","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","get_class","into","into","into_result","memory_layout","ne","ne","new","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Any","CompilerFunction","CompilerImplemented","FunctionContext","FunctionFlags","FunctionOverload","FunctionParameters","FunctionSignature","FunctionSignatureRef","None","ObjFunction","RegisterTickingFunction","Specific","as_function","block_for","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","callback_function","class","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compile_context","debug_name","default","emit","eq","eq","equivalent","equivalent","expected_signatures","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_class","get_object","get_object_by_ident","id","into","into","into","into","into","into","into","into_result","item_id","llir_builder","matches","matches","matches_function_parameters","memory_layout","ne","new","new","new","new_single","null","overload","overloads","parameters","return_type","signature","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_flags","ObjInt","as_scoreboard_value","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","from","get_class","id","into","into_result","memory_layout","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","ObjStaticInt","as_scoreboard_value","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_class","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","value","ModuleFactory","ObjModule","borrow","borrow","borrow_mut","borrow_mut","call","class","clone","clone_into","eq","equivalent","factory_fn","fmt","fmt","fmt","from","from","from","get_class","get_property","ident","ident","import_members","import_members","into","into","into_result","members","members","memory_layout","ne","new","new","register","register_function","register_typed_function","set_property","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_members","FunctionParameterDefinition","ObjNativeFunction","ObjNativeFunctionSignature","as_function","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","class","class","class","clone","clone","clone","clone_into","clone_into","clone_into","context_id","create_class","definition_scope","eq","eq","equivalent","equivalent","expected_type","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","function","function_span","get_class","get_class","into","into","into","into_result","into_result","memory_layout","memory_layout","name","native_function_id","ne","new","new","return_type_span","span","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ObjNever","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","get_class","instance","into","into_result","memory_layout","to_owned","to_string","try_from","try_into","type_id","ObjNull","borrow","borrow_mut","class","clone","clone_into","eq","equivalent","fmt","fmt","from","from","get_class","instance","into","into_result","memory_layout","to_owned","to_string","try_from","try_into","type_id","ObjString","borrow","borrow_mut","class","clone","clone_into","deref","eq","equivalent","fmt","fmt","from","from","get_class","into","into_result","memory_layout","ne","new","to_owned","to_string","try_from","try_into","type_id","value","value","ObjStruct","Struct","StructRef","borrow","borrow","borrow_mut","borrow_mut","class","comptime_encodable","create_class","deref","eq","eq","equivalent","equivalent","fields","fmt","fmt","fmt","fmt","from","from","get_class","ident","into","into","into_result","memory_layout","ne","ne","new","properties","runtime_encodable","struct_ref","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ObjStructObject","borrow","borrow_mut","class","create_class","eq","equivalent","fmt","fmt","from","get_class","into","into_result","iter","memory_ids","memory_layout","memory_layout","ne","new","struct_type","to_string","try_from","try_into","type_id","variables","ObjTupleObject","Tuple","TupleRef","borrow","borrow","borrow_mut","borrow_mut","class","comptime_encodable","create_class","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_class","into","into","into_result","iter_values","layout","matches","memory_layout","memory_layout","namespace","ne","ne","new","runtime_encodable","to_string","to_string","try_from","try_from","try_into","try_into","tuple","type_id","type_id","Any","Class","Class","ComptimeBool","ComptimeInt","DynamicBool","DynamicInt","FormatString","Function","Module","Never","Null","String","Struct","StructObject","Tuple","TupleObject","Type","TypePattern","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","comptime_encodable","eq","eq","equivalent","equivalent","expect_class","fmt","fmt","fmt","fmt","from","from","from","hash","into","into","is_bool","is_int","is_never","matches","matches","ne","runtime_encodable","should_be_const","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["debris_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::class","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::class::ClassKind","","","","","","debris_core::compile_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::debris_object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error::LangErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error::lang_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error::lang_error::LangErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error::parse_error","","","","","","","","","","","","","","","","","","","","debris_core::error::snippet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::error::utils","","","debris_core::function_interface","","","","","","","","","","","","","","","","","","","","","debris_core::hir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir::hir_context","","","","","","","","","","","","","","","","","","debris_core::hir::hir_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir::hir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::hir::hir_nodes::HirConstValue","","","","","","","","","","debris_core::hir::hir_nodes::HirExpression","","","","","debris_core::hir::hir_nodes::HirTypePattern","","","","","debris_core::hir::identifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::json_format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::llir_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::llir_context","","","","","","","","","","","","","","","","debris_core::llir::llir_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::llir_nodesdebris_core::llir::llir_nodes::Condition","","","debris_core::llir::opt","","","","","debris_core::llir::opt::call_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::opt::function_parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::opt::global_opt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::opt::global_opt::OptimizeCommandKind","","debris_core::llir::opt::peephole_opt","","","","","","","","","","","","","","","","","","debris_core::llir::opt::variable_metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::llir::runtime","","","","","","","","","","","","","","","","debris_core::llir::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mir","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mir::MirValue","","debris_core::mir::mir_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mir::mir_context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mir::mir_context_kind","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mir::mir_control_flow","","","","","","","","","","","","","","","","","","","","","","debris_core::mir::mir_impl","","","","","","","","","","","","","","","debris_core::mir::mir_nodes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::mir::mir_nodes::MirValue","","debris_core::mir::mir_visitor","","","","","","","","","","debris_core::namespace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::namespace::NamespaceEntry","","debris_core::objects","","","","","","","","","","","","","","","debris_core::objects::obj_bool","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_bool_static","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_class","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_format_string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_int","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_int_static","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_module","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_native_function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_never","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_null","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_string","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_struct_object","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::objects::obj_tuple_object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_core::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","The Any pattern matches every type","The build mode for this compilation","A type pattern can also take any normal type","The type of a class","The Compilation context stores various information about …","A boolean value known at compile time","Compile time known 32-bit signed integer","Holds data about the user specified configuration","Objects are a central type for the compiler. Basically …","Debug build: produces slower code, but contains various …","Some optimizations, but no aggresive inlining (default)","Runtime boolean","32-bit signed integer known at runtime","A compile time known format string","Full optimizations","Any function, native or api","Module type","","Marks a value that cannot be constructed, for example The …","No optimizations","The null type, implicitely return by function which don’…","A trait for values that can be used as debris object …","The type of the properties map","This struct is used to pass objects arround","How to optimize the code","drops most safety checks, lower readability","A compile time known string","Type of a struct definition","An instantiated struct","Type of a tuple","An instantiated tuple","The type of a class object","The enumeration of patterns allowed as function arguments","","Id of the ancestor namespace","","","This module defines classes. The concept of a class …","The class of the object","","","The current config which specifies how to compile","The current unique id system. Note that this is different …","","","Tests whether this object is equal to another object","Compilation error handling","This module contains a trait <code>ToFunctionInterface</code> which …","","","","High-level intermediate representation","The current id counter for items that get added to this …","The code files","","","","Maps Idents to indexes of <code>values</code>","Low-level intermediate representation","","Returns the memory layout of this specific object This …","Mid-level intermediate representation","","Contains all objects which can be used in a debris …","","Own namespace id","The actual value","","","Contains all types","","The actual values that this namespace contains. This map …","A class combines [ClassKind] and corresponding methods. …","","","","","","","","","","","","","Returns whether this type can be fully encoded at compile …","","","","","","","","","","","","","","","","","Returns <code>true</code> if the class_kind is [<code>ClassKind::Function</code>].","Returns whether this class kind is of type [Type::Never]","Returns <code>true</code> if the class_kind is [<code>ClassKind::Struct</code>].","","","","Returns whether <code>other</code> is the same class as self Behavior …","","","","","","","Yeah…","","Returns whether this type can be fully encoded at runtime.","","","","","","","","","","","","","","","","","The Compilation context stores various information about …","Used to manage types","Wrapper for ergonomics, holds a ref to type_ctx and …","","","","","","","","Cache for classes","All those RefCell’s are an easy way to create memory …","The current config which specifies how to compile","","The current unique id system. Note that this is different …","","","","","","","","","","","","","Returns a unique id","The code files","","","","","","","The never singleton","","The null singleton","","","","","","","","","Contains all types","","","","The build mode for this compilation","Holds data about the user specified configuration","Debug build: produces slower code, but contains various …","Some optimizations, but no aggresive inlining (default)","Full optimizations","No optimizations","How to optimize the code","drops most safety checks, lower readability","Returns whether the optimizer should perform aggressive …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether the current build mode is debug","Whether the current build mode is release","","Returns the default optimization mode for this build mode","","","","","","","","","","","","","","","Replaces the build mode and changes the opt mode to the …","","Objects are a central type for the compiler. Basically …","A trait for values that can be used as debris object …","The type of the properties map","This struct is used to pass objects arround","","","Interface any object can implement to be treated as a …","Interface any object can implement to be treated as a …","","","","","The class of the object","","","The class specific to this object. Contains additionally …","The class specific to this object. Contains additionally …","","Converts the payload into its original type","Tests whether this object is equal to another object","","","","","","","","","","","","Tries to get a property that belongs to this object","May be overwritten by distinct payloads which carry …","May be overwritten by distinct payloads which carry …","","","","","Returns the memory layout of this specific object This …","The actual value","","","","","","","","","","Used to determine whether the error messages should use …","","A Compile Error","","","","","A generic error which gets thrown when compiling","An error which happens when compiling the input","Specifies a specific error reason","A result type which allows quick error throwing since no …","","","","","","","Thrown when parsing bad input","An error which happens when parsing the input","The result type used by most of the core functions","An owned counterpart to the <code>annotate_snippets::Slice</code> …","An owned counterpart to the <code>annotate_snippets::Snippet</code> …","An owned counterpart to the …","","","","","","","","","","","","","","","","","In debug mode stores the caller to provide additional …","","","","","Symbols which were expected instead","","","","","","","","","","","The specific error","","","","","","","","Owned variants of the <code>annotate_snippets</code> library structs","","","The span where this error occured","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A generic error which gets thrown when compiling","Specifies a specific error reason","","","","","","","","","","","","","","","","","","","","","","","","In debug mode stores the caller to provide additional …","","","","","","","","","","","","","","","","","","","","","The specific error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Thrown when parsing bad input","","","","","","","","Symbols which were expected instead","","","","","","The span where this error occured","","","","","","An owned counterpart to the …","An owned counterpart to the <code>annotate_snippets::Slice</code> …","An owned counterpart to the <code>annotate_snippets::Snippet</code> …","An owned counterpart to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Displays a string which say that the elementes of …","","","","The common type for working with callbacks","Any function that can be called as a normal function …","This trait can convert functions into compatible …","Trait used for converting any valid return value into a …","","","","Calls this interface and returns the result and a vec of …","","","","If possible, returns the type of the return value","","","Static method for querying the accepted parameters","Static method for querying the return type, may be None","","","","","","The pest parser which can parse the grammar file","","The hir representation of an input file and all of its …","Contains state data that are used during the hir …","This struct stores the high-level intermediate …","A list of [SpannedIdentifier]s, can be a dotted path","Keeps track of all imported modules, uses indexes as keys","","Identifies a variable or value based on its span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the high-level representation from the pest …","Defines every node used in the hir representation","","","","","","","","","","","","","","","","","Inserts a dependency and the code span and returns its …","","","","","","","","","","","","","","","","","","","","","","","","","","","The spans that correspond to the modules. Access via the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains state data that are used during the hir …","","","","","","","","","","","","","","","","","","This struct stores the high-level intermediate …","","","","","","","","","","","","Creates a [HirFile] from code.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Logical and","Attributes are a form of metadata that can be applied to …","A binary operation, for example <code>a + b</code>","A block which returns something","A normal block","","","Any comparison like <, >, <=, >=, ==, !=","","","A normal if statement","","Controls the program flow","Mathematical division","","","","A function, like <code>fn(Int, Int) -> Int</code>","","A function call, for example <code>foo()</code> or <code>path.to.foo()</code>","A function call, which can be both an expression and …","","","A block of code. Usually contained withing a pair of {} …","Any supported comparison operator","An if-branch which checks a condition and runs code …","A constant literal, already parsed","Represents a control flow statement like return or break","","","Any expression","","A function, which contains other statements","Any function call, can be dotted","Marks an import statement. The id specifies the index of …","An infinite loop (Can be exited using control keywords …","Holds an infix operator combined with its span","Any operator that can be used as an infix","Any Item","A module with an associated name","","Holds a variable type declaration like <code>foo: String</code> This …","Holds a prefix operator combined with its span","Any prefix operator","Declaration of a property in a struct definition","Any statement, the difference to an expression is that a …","A struct definition","Creates a Struct Object from a struct","","Any pattern that is allowed to specify a function …","Sets a variable like <code>let a = expression();</code>","","Similar to <code>HirVariableInitialization</code>, however this node …","","Imports another debris file","","","","","","","Mathematical substraction","Mathematical minus","","Mathematical modulo","","Logical negation","","Logical or","A path to a variable, for example <code>for.bar.a</code>","A normal type, like <code>Int</code>","Mathematical addition","","","","","","","Mathematical multiplication","","","","A unary operation, for example <code>-a</code>","A literal value, for example <code>2.0</code> or <code>\\\"Hello World\\\"</code>","","A variable, for example <code>a</code>","A variable declaration, for example <code>let foo = 1</code>","A write to an already existing variable","","","","","","","","","The block containing all statements of the function","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of the property","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the associated [Ident]","Returns the associated [SpecialIdent]","Returns the associated [SpecialIdent]","","","The identifier inside of the struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the span of the item in the block which is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The objects that got declared within this block","","","","","","","","","All declared properties of this struct","","","The returned value:","","","","","","","","","","","","","","","The span of the declaration","","","","","","","","","The statements of this block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A list of [SpannedIdentifier]s, can be a dotted path","Identifies a variable or value based on its span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>SpannedIdentifier</code> from the [Span]","Creates a new IdentifierPath from the vec of identifiers","","","","","","","","","","","","","","The low-level intermediate representation struct","A specific llir context","","The current context","The id of this context","The functions which were created, excluding the main …","","(Current incomplete) interface for minecrafts text …","","","","Contains every node that can be produced in the llir step.","","","The previous mir nodes","Contains two optimizer that can operate on the llir: The …","","The runtime, which stores resources","","","","","Debris syntax: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Populates the <code>llir_functions</code> vector","","","","","","Converts a <code>MirValue</code> into an <code>ObjectRef</code>","Returns an object that belongs to this id. None if the …","","","","","Creates a new <code>LLIRBuilder</code>. when building, populates the …","","","Updates the template with this id to an object","","","","","","Visits the context and optionally generates it. Returns …","","","","","A specific llir context","","","The current context","The id of this context","","","Returns an object that corresponds to a <code>MirValue</code>","","The previous mir nodes","","Replaces a Template with the given index with an actual …","","","","","The low-level intermediate representation struct","A function node as it is represented during the llir stage","Contains the already generated llir functions and in the …","","","","","","","","","Mapping from context to function","","","","","","","","","Compiles the mir into a llir","","The functions which were created, excluding the main …","","","","","","","","","","","","The runtime, which stores resources","","","","","","","","","","","","","","","Operates on two scoreboard values and stores the result …","","Branches based on a condition","","Calls a function","","","Comparison between two values, eg. val1 <= val2","Evaluates a condition and returns either true or false","","","Executes a literal string","A component for a raw execute command. Either string or …","Stores a ‘fast’ variable","","Stores a ‘fast’ variable from the result of another …","","A function node, contains other nodes","Any node","Does nothing","","Marks that a value is read by this node","","Marks that a value can be both read from and written to …","","","","","","Denotes how a specific node accesses variables.","See [VariableAccess].","Marks that a value is written to by this node. The second …","","","Writes a formatted message","The buffer to write to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if this function contains a node that calls the …","","","","","","","","","","","","","","","","","","","","","","","The command to use","The condition to test","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks whether this node contains a call","The id of this function","The id of the target var","The id of the target var","The id of the resulting value","The id of that function","","","","","","","","","","","","","","","","Returns whether evaluating this condition has any side …","Returns whether this command has no side effect. …","","Checks whether this condition is “simple”, which …","Iterates over this node and all other nodes that this …","A copy of the above function, but with mutability enabled …","Iterates the subnodes and additionally whether the subnode…","The left value","","","","","","","","","","","","The node to execute if that condition is false","","The nodes which this function contains","Returns a condition that is true, when this condition is …","The kind of operation","The node to execute if that condition is true","Whether this node has a read-dependency on <code>item_id</code>","The value that this function returns","The right value","The scoreboard of the target var","The scoreboard of the target var","The scoreboard of the resulting value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value to store into the target var","Recursively yields all variables that this condition …","Accepts a callback function as argument and calls it with …","","See <code>variable_accesses</code>.","Whether this node could modify <code>item_id</code>.","","","","","","","","This module contains structs which can hold metadata for …","","","","","","","","This function returns true if start definitely contains …","","","","","","","","","","","","","","","","","","","","","","","Declares how a variable is used by a function","Stores how functions use variables as parameters.","Variable is not used at all by this function","Variable is read by this function","Variable is written to by this function before it is read","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the function_parameter is […","","","","","","","","","","","","","Replaces all variables <code>.0</code> with <code>.1</code>","Changes the variable this node writes to","tracks statistics about the global code which can be used …","Interface for optimizing functions to get data about the …","Optimizes nodes which are const-evaluatable. This …","If true prints some debug information to stdout","Deletes a single node","Converts the [FastStoreFromResult] node into its command, …","Does optimization on the whole program.","Discards the node and only keeps the branch that matches …","Inlines the function of this function call.","Inserts this node after","The optimizer can uniquely identify each node with this …","","Just a wrapper arround deque with a simple push method","Optimizing functions output commands that tell the …","","","","Removes all aliases to a function which only redirects to …","Replaces the old node completely","Changes the condition of this branch to a new condition …","Updates the specified branch with the new node","","","This optimizer handles functions that alias other …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute every command that is in the current command stack","","","","","","","","","","","","","","","","Tracks which parameters a function takes. Due to the …","","","","","Returns the variable info for this node","","","","","","","","","","","","","","Iterates all subsequent nodes of this function","Iterates over all functions","Iterates over all nodes.","","","","","","","","","","Removes useless nodes","A node which copies a value <code>a</code> to <code>b</code> is often redundant. …","","Inlines the function call chain. This optimizer only runs …","This expensive optimization searches for common paths at …","","","","","","","Runs the optimization passes and returns the final …","Runs an optimizing function","","Shifts the node id of this command one back","","","Optimizes basic arithmetic expressions with the shape x …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the variable reads and writes. The iterator does …","","","","This local variable is cached, so no repeated allocations …","","","A just-in-time peephole optimizer.","","","","","","","","","","Optimizes a node and the previous nodes and pushes the …","","Adds this node to the collection and optimizes it on the …","Drops this instance and returns the wrapped nodes","","","","Information about the possible values of runtime variables","Hints that the value can have exactly one value (the …","A hint about the possible value of a variable","Hints that the value is unknown (the variable can take …","Stores the possible range of values of a runtime variable","General data about the usage of a specific variable","","","","","","","","","Clears all hints","Clears all hints for this id","","","","","","","","","","","","","","","","Tries to get the static value of a scoreboard value","","","","","","","","","Tries to evaluate a binary operation with static values","Tries to evaluate a condition with static values","","","","","","","","","","","","Updates the hints for all variables that this node …","","","Adds a specific block to the list of blocks which should …","","","Returns whether this function contains the given <code>id</code>.","","","","","","Gives an iterator over the blocks which are the root …","Schedules a specific block to run every tick.","","","","","","Identifies a single callable block of code","Custom scoreboards, each with a unique identifier","","","","","Special scorbeoards used for internal tracking","A unique identifier for an item","","","The Main scoreboard, where all operations are per default","","","","","","","Identifies a specific scoreboard","","Any comparison that can be executed on two scoreboard …","Any operation that can be executed on a scoreboard- This …","A Value that can be stored on a scoreboard","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flips the comparison (converts OP such that …","","","","","","","","","","","","","","","","","","","","","","","","","","","Inverts the comparison, such that it is exactly and only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Counter that can give out unique <code>ItemId</code>’s","Specifies how a specific object lays out its runtime …","This type is spread across multiple fields","This type has exactly one integer sized field","This type has no runtime memory","","","","","","","","Copies a scoreboard value from source to destination","","","","","","","","","","","","","Copies all items from source over to destination","Returns the amount of words that this layout occupies","","","","","","","","","","","","","","","A simple block created by <code>{}</code>","Branches if a condition evaluates to true","Calls the context after the loop","","A function call which goes to a new block and initializes …","A block that is conditonally executed at compile time","A concrete object Since concrete objects are already …","","Contains all possible ‘kinds’ of contexts. This is …","Directly jumps to the top of the loop","The mode how a <code>MirContext</code> exits","A built-in function","Goes to a specific jump location.","Marks a jump location. A jump location can be seen as a …","A runtime loop","A Mid-level intermediate representation","Acts like <code>MirGotoContext</code>, if the condition is equal to …","Visits the hir and creates a mir from it","A function call to api functions","Keeps track of single context, which can be a function, a …","Helper struct which can hold mutable references to the …","","Calls a specific block of a context","Command to start a new Block withing this context This …","Any node that can be part of the mir representation","Sets the return value for a given context","Overrides the old value in the namespace struct with …","Any value that is used in the mir compilation and also in …","","","","A function created by a user","Normal exit, just continue with the next nodes","","Look for the current function and call the context after …","Sets the return value for this context. Note that this …","","A block that is conditionally executed at runtime","The body of a struct definition","A template which marks a future object","Updates the value of a variable. This is the only node …","","The nth block of this context to go to","","","","A ref to the global compile context","","The condition, has to be a boolean (right now)","","","The context to set the return value for","","All contexts","","Which control flow mode is used for this context Most …","","The value that is returned by default (when template is …","","","","","","","","The global, empty context which only contains modules","","A list of all modules that are imported","The context id and the id of the corresponding namespace","","","","Holds the current jump location index","","The first visited function gets marked as the main …","","","","","","","","","","","","","","All mir nodes that are emitted","","","","A reference to the value to be returned, See <code>ReturnValues</code> …","","","The values returned by this function","","","","","Stores the value and the span it is returned at","Contexts which got scheduled to run every tick","","","","","","","","","","","","","","Cache for all function definitions that were already …","","","","Keeps track of the current compile context And the …","Visits the hir and creates a mir from it","Matches the parameters against the expected parameters. …","Creates a new context and pushes it to the top","Creates a new context that is not successor of the …","Adds a mutable concrete value to the current namespace. …","Returns a shared reference to the global arena","Returns a mutable reference to the global arena","Assigns <code>value</code> to <code>pattern</code>. If the pattern is a tuple …","","","","","","","","Generates a function call to that context. After the …","Calls a function in the current context","","","Returns a shared reference to the current context","Returns a helper struct that contains both a context and …","Returns a mutable reference to the current context","","","The current compile context","The span of the current context","Returns whether a variable declared in <code>stopping_context</code> is…","","","","","","","Calculates the next jump target for <code>context_id</code>","","The global, empty context which only contains modules","","A list of all modules that are imported","Instantiates a native function signature and returns a …","","","","Iterates this stack, from the current context to the …","Selectes the current jump location for a give control flow","","The first visited function gets marked as the main …","","Returns a mutable reference to the current namespace","","","","","","Promotes a comptime value to its runtime variant","Adds a mir node to the current context","","","","Compiler implemented debris function. Adds a function to …","","The stack, consisting of (context, origin of this context)","Contexts which got scheduled to run every tick","Tries to clone the value or returns it unmodified if that …","Tries to clone this value or returns the original value …","","","","","","","","","","","Entry point for visiting the hir","","Visits a block without creating a new context","","","","","","","","","","","","","","","","","Cache for all function definitions that were already …","","","","","Keeps track of single context, which can be a function, a …","Helper struct which can hold mutable references to the …","","","","","Adds an anonymous object and returns a ref MirValue","Adds the class as an anonymous template and returns it as …","Adds an anonymous value that is usually used temporarily","Adds a value to the current namespace. Fails if the ident …","Adds a value that corresponds to <code>ident</code>","Adds a value to the current value. Does not complain if …","","","","","","","","","","","","","","","","","","","","","","","A ref to the global compile context","","Which control flow mode is used for this context Most …","","","","The value that is returned by default (when template is …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value that is associated with this ident","Looks up the value that corresponds to this ident","Returns an ident from a span","","Returns the first value if the length of <code>value</code> is exactly …","","","","Returns the type pattern that belongs to a path","","","The context id and the id of the corresponding namespace","","","","","","","","","Holds the current jump location index","","","","","","","Creates a new context","","Increments the jump location counter and returns it","All mir nodes that are emitted","","","Pushes a node to the current context","Loads the module into this scope","Adds a function call to the current context","Creates a function call    ","Loads every member of the module (but not the module …","Replaces the old value with this id at the namespace at …","","Follows this path","Resolves the accessor and returns the accessed element","The values returned by this function","","","","Stores the value and the span it is returned at","","","","","","","","","","","","","","","","","","","","","","","","","","","","A simple block created by <code>{}</code>","A block that is conditonally executed at compile time","Contains all possible ‘kinds’ of contexts. This is …","A built-in function","A runtime loop","A function created by a user","A block that is conditionally executed at runtime","The body of a struct definition","","","","","Returns the default return value of this context","","","","","","Returns whether this context can only be executed at …","Whether a return statement can select this block as an …","Whether a break or continue statement can select this …","Returns whether this context matches this control flow …","","","","","Calls the context after the loop","Directly jumps to the top of the loop","The mode how a <code>MirContext</code> exits","Normal exit, just continue with the next nodes","Look for the current function and call the context after …","","","","","","","","Returns whether this control flow mode exits the current …","","","","","","","","","","A Mid-level intermediate representation","","","","","All contexts","","","","Converts the hir into a mir","","","","","","Branches if a condition evaluates to true","A function call which goes to a new block and initializes …","A concrete object Since concrete objects are already …","Goes to a specific jump location.","Marks a jump location. A jump location can be seen as a …","Acts like <code>MirGotoContext</code>, if the condition is equal to …","A function call to api functions","Calls a specific block of a context","Command to start a new Block withing this context This …","Any node that can be part of the mir representation","Sets the return value for a given context","Overrides the old value in the namespace struct with …","Any value that is used in the mir compilation and also in …","Sets the return value for this context. Note that this …","A template which marks a future object","Updates the value of a variable. This is the only node …","Asserts that the type of this value matches <code>typ</code> and …","Asserts that the type of this is equal to <code>other</code>","The nth block of this context to go to","","","","","","","","","","","","","","","","","Returns the class of this value","","","","","The condition, has to be a boolean (right now)","","The context to set the return value for","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets a property from the value","","","","","","","","","","","Returns <code>true</code> if the mir_value is [<code>MirValue::Concrete</code>].","Returns <code>true</code> if the mir_value is [<code>MirValue::Template</code>].","","","","","","","","","","Creates a new mir value that is null","","","A reference to the value to be returned, See <code>ReturnValues</code> …","","Returns the class of the type as expected in a function …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An anonymous value is usually a temporary value","","A value in the mir namespace","","A spanned entry corresponds to a variable declared …","Adds an object with a name to this namespace","Adds an anonymous object (without name) to this namespace","Inserts the value at this index and returns the last …","","Id of the ancestor namespace","","","","","","","","","Declares an entry in this namespace as variable. This …","","","","","","","","","","Retrieves a named object from this namespace together …","Retrieves an object by its id from this namespace","The current id counter for items that get added to this …","","","","","Thanks, clippy…","Returns <code>true</code> if the namespace_entry is […","","Maps Idents to indexes of <code>values</code>","","The amount of objects in this namespace","","","","Creates a new Namespace","","Own namespace id","Registers the key with the next id slot","Replaces the object with this id","","","","","","","","","","","","","","The actual values that this namespace contains. This map …","","","","","","","","","","","","","","","","","","A boolean value that is stored on a scoreboard","","","","","","","","","","","","","","","","","","","","","Returns the boolean or-ed with the static value","","","","","","","","","","","","","","","","","","","","","","","","","","Marks objects that have a class","The class of a value.","","","Returns the class of this object","","","","","","","","","","","","","","","","","","","","","","","","","A static string object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An enum over all functions which are implemented by the …","Marks that the function should be implemented by the …","The context which gets passed to a function","Flags a function can have. These effect how the compiler …","A signature describing a single overload of a function","Decides which arguments a function can accepts","A signature containing expected parameters and return type","","Marks that the function has no special flags","A function object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A debug name, to allow for a simpler mir debug …","","Adds a node to the previously emitted nodes","","","","","Returns every possible signature as (params, return) …","","","","","","","","","","","","","","","","","","","Tries to get a property starting at the <code>start</code> namespace …","A unique id for this function","","","","","","","","","The id for the returned value","","","Returns whether the args iterator matches all of the …","","","","","","","","Shortcut for returning <code>ObjNull</code>","","","","","","The current span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A dynamic Integer","Returns a <code>ScoreboardValue</code> which identifies a specific …","","","","","","","","","","","","","The id of the item","","","","","","Creates a new dynamic integer with this id","","","","","","A static integer object","Returns a <code>ScoreboardValue</code> which matches this int","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new static integers with this value","","","","","","","A wrapper function for functions that return modules","A module object","","","","","","","","","","","","","","","","","","","","Returns the ident of this module","The identifying name of this module","","Whether to import every property of this module on its own","","","","","The members of this module","","","","Creates a new empty module with this name","Registers a value for the first time","A more concise way to register builtin functions without …","Registers a simple api-function whose signature specifies …","Sets a property","","","","","","","","","","","A callable function object for functions declared in …","Created when the mir comes across a function definition, …","","","","","","","","","","The class which contains the in and out parameters","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Signals that a block will never return. The most …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A static string object","","","","","","","","","","","","","","","","","","","","","","","","","","Stores a user defined struct","","","","","","","","","","","","","","","The fields are stored in an indexmap so that the user …","","","","","","","","","","","","","","","","Each struct has a namespace containing its objects …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A heterogenous, compile-time known collection of objects. …","","","","","","","","Returns true if any of the contained fields of this tuple …","","","","","","","","","","","","","","","","","","","Returns whether the other tuple matches this tuple, where …","","","","","","","Returns whether every type contained in this tuple can be …","","","","","","","","","","The Any pattern matches every type","A type pattern can also take any normal type","The type of a class","A boolean value known at compile time","Compile time known 32-bit signed integer","Runtime boolean","32-bit signed integer known at runtime","A compile time known format string","Any function, native or api","Module type","Marks a value that cannot be constructed, for example The …","The null type, implicitely return by function which don’…","A compile time known string","Type of a struct definition","An instantiated struct","Type of a tuple","An instantiated tuple","The type of a class object","The enumeration of patterns allowed as function arguments","","","","","","","","","Returns whether this type can be encoded at compile time.","","","","","","","","","","","","","","","","","","","Returns whether the type matches on this pattern","Returns whether <code>self</code> matches the pattern of <code>other</code>","","Returns whether this type can be completely encoded at …","Returns whether this type should be const. Const types …","","","","","","","","","",""],"i":[1,2,0,2,3,0,3,3,0,0,4,5,3,3,3,5,3,3,0,3,5,3,0,0,0,0,4,3,3,3,3,3,0,0,0,6,7,8,0,9,0,0,10,10,0,8,7,0,0,7,11,11,0,6,10,7,11,11,6,0,0,12,0,0,0,8,6,9,8,8,10,0,6,0,0,0,13,13,13,13,13,13,13,14,13,14,13,13,14,13,14,13,13,14,14,13,13,14,13,14,13,14,13,13,13,13,14,13,14,13,14,13,13,13,14,14,13,14,13,14,13,14,13,14,13,14,13,13,14,15,16,17,17,15,16,0,0,0,10,18,10,19,18,10,19,19,19,10,18,10,10,19,10,19,19,10,19,18,10,19,18,10,10,10,18,18,10,19,19,18,19,18,19,18,10,19,18,10,19,10,18,10,18,10,19,0,0,4,5,5,5,0,4,5,4,5,8,4,5,8,8,4,5,4,5,4,8,8,4,5,8,4,5,8,4,5,8,4,5,8,4,5,8,4,4,8,4,8,8,8,4,5,4,5,8,4,5,8,4,5,8,8,1,0,0,0,0,0,7,12,12,9,1,9,1,9,1,1,12,12,1,9,7,1,1,9,1,1,9,1,1,1,7,1,9,12,12,9,1,7,1,12,9,1,1,9,1,9,1,9,1,0,0,20,0,20,20,20,20,0,21,0,0,20,20,20,20,20,20,0,21,0,0,0,0,20,20,20,20,20,20,20,20,20,22,23,24,25,21,21,21,26,21,21,21,21,27,21,21,24,22,21,21,21,21,22,21,26,23,0,21,24,0,23,22,0,21,24,27,26,22,21,25,21,21,21,21,0,28,29,30,31,32,31,33,31,34,35,36,28,37,38,39,40,41,42,43,44,37,33,45,32,43,45,37,38,44,45,28,39,38,44,46,30,29,20,20,20,20,20,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,26,47,26,20,47,26,20,26,26,20,26,20,26,20,26,20,26,26,20,20,47,47,26,20,20,47,26,20,26,26,20,26,47,26,26,20,26,20,47,26,20,47,26,20,47,26,20,28,29,30,31,32,31,33,31,34,35,36,28,37,38,39,40,41,42,43,44,37,33,45,32,43,45,37,38,44,45,28,39,38,44,46,30,29,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,22,48,23,24,48,24,22,23,22,24,48,23,22,24,48,23,22,24,48,23,24,22,22,24,48,23,22,48,22,24,48,23,48,23,24,23,22,24,22,22,24,48,23,22,24,48,23,22,24,48,23,0,0,0,49,0,0,0,0,49,49,50,49,49,49,49,51,49,51,52,52,52,49,49,49,53,0,53,0,0,0,0,0,0,0,53,0,53,53,53,53,53,53,53,53,53,53,54,55,56,53,54,55,56,53,53,53,53,57,55,53,53,53,53,53,53,58,53,53,53,53,53,56,58,53,53,53,53,53,53,53,53,53,58,53,53,55,56,53,53,53,53,53,54,55,56,53,53,53,56,53,0,0,0,53,0,59,53,53,55,53,53,53,53,53,53,53,53,53,58,56,53,53,54,55,56,56,53,56,53,56,53,57,55,53,56,53,53,53,53,54,53,53,53,53,53,60,56,53,53,53,53,53,53,53,53,53,53,53,54,55,56,53,54,55,56,53,53,53,53,54,55,56,53,53,53,53,53,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,61,57,61,57,61,57,61,57,57,61,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,57,61,57,57,61,57,61,57,61,62,0,63,63,64,65,66,62,67,63,64,66,64,62,68,65,65,69,70,63,64,68,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,64,63,64,65,68,67,68,62,72,70,62,68,72,73,62,63,69,62,66,73,65,74,70,63,62,71,69,63,63,63,74,63,64,64,75,76,77,78,79,80,81,82,79,81,83,83,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,65,74,68,62,84,72,85,66,88,67,69,65,74,68,62,84,72,85,66,88,67,69,83,90,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,87,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,72,68,62,86,88,90,76,79,80,81,86,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,87,92,89,65,74,62,84,85,86,87,82,88,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,92,80,84,85,79,76,79,76,89,80,79,79,92,65,71,63,64,69,78,84,85,86,87,82,88,89,75,90,76,83,77,91,92,79,80,81,92,65,74,68,62,84,72,85,66,88,67,69,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,88,65,74,68,62,84,72,85,86,66,87,82,88,67,71,89,75,90,76,83,77,91,63,64,69,92,78,79,80,81,70,73,89,75,77,91,93,94,95,96,97,93,94,95,96,97,98,99,98,98,99,100,100,100,101,101,0,0,60,59,60,59,60,59,60,59,59,60,59,60,59,60,59,60,60,59,59,60,59,59,59,60,59,59,60,59,60,59,59,59,60,59,60,59,60,59,60,59,60,59,0,0,0,0,102,102,103,104,0,0,0,0,0,105,104,102,0,0,103,105,102,0,104,0,0,106,106,107,106,107,106,107,106,107,106,107,107,106,107,106,107,107,106,106,107,107,106,107,106,107,106,107,106,107,106,107,106,107,106,107,106,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,0,109,109,103,110,109,103,110,109,109,109,103,103,110,109,103,110,109,103,109,103,109,109,103,103,110,109,109,109,109,110,110,103,109,103,103,110,109,103,110,109,103,110,109,111,112,113,0,114,0,114,0,114,112,113,0,114,114,0,0,0,114,0,114,0,0,114,113,115,116,115,116,117,117,112,112,0,0,115,116,114,0,0,115,116,118,119,120,121,122,113,123,117,111,124,112,114,115,116,118,119,120,121,122,113,123,117,111,124,112,114,118,119,120,121,122,113,123,117,111,124,112,114,119,120,121,122,113,123,117,111,124,112,114,120,123,119,120,121,122,113,123,117,111,124,112,114,119,120,121,122,113,123,117,111,124,112,114,118,118,119,120,121,122,113,113,123,117,111,124,112,114,114,115,116,118,119,120,121,122,113,123,117,111,124,112,114,114,118,119,120,121,122,114,115,116,118,119,120,121,122,113,123,117,111,124,112,114,113,114,118,113,114,114,114,121,124,119,120,121,122,113,123,117,111,124,114,123,118,118,113,121,123,114,118,121,119,120,121,124,119,120,121,122,113,123,117,111,124,112,114,118,113,114,115,116,118,119,120,121,122,113,123,117,111,124,112,114,115,116,118,119,120,121,122,113,123,117,111,124,112,114,115,116,118,119,120,121,122,113,123,117,111,124,112,114,119,113,114,113,114,114,125,125,125,0,0,0,0,0,0,0,104,126,104,126,126,126,104,104,104,126,104,0,104,104,126,104,104,104,126,104,126,104,126,104,126,104,126,104,0,0,127,127,127,127,128,127,128,128,127,127,127,128,128,127,128,127,128,127,128,128,127,128,128,128,128,127,127,128,127,128,127,128,129,130,130,0,0,0,0,130,130,0,130,130,130,0,0,0,0,0,0,0,130,130,130,130,131,132,0,133,134,130,135,129,132,136,137,131,133,134,130,135,129,132,136,137,131,131,131,133,134,129,132,136,137,129,129,133,134,130,135,129,131,133,134,130,135,129,132,136,137,131,131,131,134,133,134,134,133,133,135,133,133,134,130,135,129,132,136,137,131,133,134,134,134,135,134,133,134,135,129,131,138,134,132,136,137,0,0,133,136,134,129,131,133,134,133,134,135,135,135,0,133,133,134,130,135,129,132,136,137,131,133,134,130,135,129,132,136,137,131,133,134,130,135,129,132,136,137,131,131,131,137,131,131,139,139,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,141,0,141,0,0,142,142,141,143,142,141,143,142,143,143,141,142,141,142,141,143,142,141,141,143,142,141,143,142,143,143,143,141,143,142,142,142,142,143,143,143,141,142,141,143,142,141,143,142,141,143,142,143,142,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,144,0,145,146,147,147,147,145,0,147,147,145,146,146,146,146,147,146,0,148,0,0,0,148,146,144,145,148,146,147,149,144,145,148,146,147,149,144,145,148,146,147,149,144,145,148,146,147,149,144,149,144,145,148,146,147,149,144,145,148,146,147,149,146,147,147,144,145,148,148,146,147,147,149,149,144,145,148,146,147,149,144,145,149,148,149,144,145,148,146,147,149,147,144,145,148,149,144,144,145,148,146,147,149,148,147,149,144,145,148,146,147,149,144,145,148,146,147,149,144,145,148,146,147,149,0,0,150,150,150,150,151,150,151,150,150,151,0,150,151,150,151,150,151,150,150,151,151,150,151,0,150,150,151,151,151,151,150,150,151,150,151,150,151,152,153,154,155,156,0,155,154,157,0,0,156,0,154,155,155,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,156,158,156,155,0,154,154,157,155,159,160,161,162,162,163,164,165,159,160,166,164,167,162,163,162,168,162,162,162,169,162,162,162,164,164,164,163,170,171,162,163,163,164,162,164,0,0,0,0,0,0,0,172,167,165,170,163,169,161,165,166,161,169,163,169,163,160,165,168,164,162,162,162,162,162,169,168,158,158,158,158,158,158,164,173,173,0,0,0,164,164,164,164,164,164,164,161,161,164,174,161,164,174,164,164,164,174,164,164,164,164,164,174,174,164,161,164,174,161,164,174,164,164,164,164,164,164,161,164,174,174,174,174,164,164,164,164,161,174,164,174,164,164,174,164,174,164,161,174,164,164,164,161,164,174,161,164,174,161,164,174,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,152,153,0,0,0,0,0,0,0,168,163,159,163,159,163,159,163,159,153,159,163,175,152,172,153,168,159,163,175,152,172,153,168,152,153,152,153,152,163,159,163,159,159,172,168,153,152,153,152,153,172,163,152,152,172,153,153,168,159,163,175,152,172,153,153,168,152,172,168,172,159,163,163,172,168,163,168,168,163,152,153,163,172,159,163,175,152,172,153,168,163,163,163,163,172,152,153,163,168,163,163,175,152,159,163,159,163,163,172,163,159,163,163,172,163,175,168,152,153,152,153,159,163,175,152,172,153,168,159,163,175,152,172,153,168,159,163,175,152,172,153,168,175,168,154,154,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,156,156,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,0,167,167,167,167,167,167,167,167,167,167,167,167,167,167,155,155,157,155,155,0,0,0,0,0,0,0,0,155,157,155,157,157,160,169,157,160,171,170,166,165,155,169,157,160,171,170,166,165,155,157,157,157,157,157,165,160,166,169,157,160,171,170,166,165,155,169,157,160,171,170,166,165,155,157,157,169,157,160,171,170,166,165,155,155,169,157,157,160,171,170,166,165,155,169,157,170,171,169,157,160,171,170,166,165,155,157,157,157,160,171,170,166,165,155,165,170,157,169,165,166,169,157,169,160,165,157,157,155,169,157,160,171,170,166,165,155,169,157,160,171,170,166,165,155,169,157,160,171,170,166,165,155,169,173,173,0,158,158,158,158,158,158,158,158,158,176,0,0,0,176,6,6,6,6,6,177,176,6,177,176,6,176,176,6,176,6,176,6,176,6,177,176,6,6,6,6,177,176,6,177,6,176,6,6,177,6,177,176,6,6,177,6,6,6,177,176,176,177,176,6,177,176,6,177,176,6,176,6,178,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,179,179,179,0,179,179,179,179,179,179,179,179,179,179,179,179,179,179,0,179,179,179,179,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,0,0,181,181,182,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,0,0,183,183,183,184,183,184,184,183,184,183,184,184,183,184,183,184,183,184,184,183,184,184,183,184,184,184,183,184,184,183,184,184,183,184,183,184,183,184,185,0,186,0,0,0,0,0,0,186,0,187,185,188,189,189,188,185,186,187,190,191,189,188,185,186,187,190,191,189,191,188,188,185,186,187,191,188,185,186,187,191,189,188,186,189,188,185,188,185,188,188,188,188,185,186,187,190,190,189,188,185,185,186,187,190,191,188,189,189,188,189,188,185,186,187,190,191,188,189,189,185,190,185,188,185,188,190,191,188,189,188,188,190,190,191,189,188,185,186,187,191,188,190,189,188,185,186,187,190,191,189,188,185,186,187,190,191,189,188,185,186,187,190,191,188,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,0,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,0,0,194,195,194,195,194,195,195,195,195,195,194,194,195,195,194,194,195,195,195,195,195,194,194,194,195,195,195,195,195,195,194,195,195,195,195,195,195,195,194,195,194,195,194,195,195,0,0,0,196,197,196,198,197,196,198,196,198,198,197,196,198,197,196,198,196,198,198,196,198,196,198,197,197,197,196,196,198,198,197,196,198,196,198,196,198,197,196,198,196,198,196,198,197,198,196,196,198,198,197,197,196,198,197,196,198,197,196,198,197,196,198,197,196,198,0,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,0,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,0,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,0,0,0,202,203,202,203,203,202,203,203,202,203,202,203,202,202,202,203,203,202,203,203,202,202,203,203,203,202,203,203,202,202,203,202,203,202,203,202,203,202,203,0,204,204,204,204,204,204,204,204,204,204,204,204,204,0,204,204,204,204,204,204,204,204,204,204,0,0,0,205,206,205,206,206,205,206,205,206,205,206,205,205,206,206,205,205,206,206,205,206,206,206,205,205,206,206,206,205,206,206,205,205,206,205,206,205,206,206,205,206,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,2,3,2,3,2,3,2,3,3,2,3,2,3,2,2,2,3,3,2,2,3,3,2,3,3,3,3,2,3,2,3,3,2,3,2,3,2,3,2,3,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["any",8]],null,null,null,null,null,null,null,null,null,[[["objectref",3]],["bool",15]],null,null,[[["compilecontext",3]],[["class",3],["rc",3]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["compilecontext",3]],[["rc",3],["option",4]]],null,null,null,[[["compilecontext",3]],["objectref",3]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],null,null,null,[[],["memorylayout",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["type",4]]],[[]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[["type",4]],["bool",15]],[[["itemid",3],["namespacearena",3],["vec",3]]],[[["classkind",4]],["bool",15]],[[["class",3]],["bool",15]],[[["classkind",4]]],[[],["bool",15]],null,[[],["bool",15]],[[["objectref",3],["ident",4]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["type",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["code",3]],["codeid",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,null,null,[[],["compilecontext",3]],[[],["typecontext",3]],[[]],[[["typecontext",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["rc",3],["option",4]]],[[["codeid",6]],["code",3]],[[],["usize",15]],null,[[["rc",3],["class",3]]],[[]],[[]],[[]],[[["typecontext",3]],["bool",15]],[[],["objectref",3]],null,[[],["objectref",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typecontextref",3]],null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["buildmode",4]],[[],["optmode",4]],[[]],[[]],[[]],[[]],null,[[["buildmode",4]],["bool",15]],[[["optmode",4]],["bool",15]],[[["config",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["config",3]],["bool",15]],[[],["optmode",4]],null,null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["buildmode",4]]],null,null,null,null,null,null,[[],["any",8]],[[],[["option",4],["objfunction",3]]],[[],[["option",4],["objfunction",3]]],[[]],[[]],[[]],[[]],null,[[],["objectref",3]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[]],[[],["option",4]],[[["objectref",3]],["bool",15]],[[["objectref",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["debrisobject",3]]],[[["compilecontext",3],["objectpayload",8]]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[]],[[]],[[["compilecontext",3]],["objectref",3]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[],["memorylayout",4]],null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[["compilecontext",3]],["snippetowned",3]],[[]],[[]],null,[[],["compileerror",4]],[[]],[[["compileerror",4]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[["compilecontext",3]],["string",3]],[[["langerror",3]]],[[["parseerror",3]]],[[]],null,[[]],null,null,null,[[["compileerror",4]],["bool",15]],null,null,null,null,null,[[],[["error",8],["option",4]]],null,null,null,null,[[]],[[["compilecontext",3]],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["langerror",3]],[[],["langerrorkind",4]],[[]],[[]],[[["langerror",3]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[["span",3],["compilecontext",3]],["langerrorsnippet",3]],[[]],[[]],[[]],null,[[["langerror",3]],["bool",15]],[[["langerrorkind",4]],["bool",15]],[[["langerrorkind",4],["span",3]]],null,null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["compilecontext",3]],["snippetowned",3]],[[]],[[]],[[],["parseerror",3]],[[]],[[["parseerror",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["parseerror",3]],["bool",15]],null,[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[],["annotation",3]],[[["inputfiles",3]],["slice",3]],[[["inputfiles",3]],["snippet",3]],[[["inputfiles",3]],["sourceannotation",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["string",3]],[[],["string",3]],[[],["string",3]],null,null,null,null,null,[[]],[[]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["functioncontext",3]],[["result",6],["objectref",3]]],[[["box",3],["normalizedfunctioninterface",8]]],[[]],[[]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[]],[[["functioncontext",3]],[["langresult",6],["objectref",3]]],[[["compilecontext",3]],["functionparameters",4]],[[["compilecontext",3]],[["rc",3],["option",4]]],[[],[["box",3],["normalizedfunctioninterface",8]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["rule",4]],[[]],[[["rule",4]],["ordering",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["importdependencies",3]],null,[[["rule",4]],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,[[["usize",15]]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["span",3],["ident",4]],["usize",15]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],null,[[]],null,[[],["usize",15]],null,null,null,null,null,null,null,null,null,[[["rule",4],["str",15]],[["result",4],["error",3],["pairs",3]]],[[["rule",4]],[["ordering",4],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[["spannedidentifier",3]],["usize",15]],[[]],[[]],null,null,null,[[["formatter",3]],["result",6]],[[]],[[["spannedidentifier",3]],["ident",4]],null,[[]],[[["coderef",3],["importdependencies",3],["compilecontext",3]]],[[["usize",15],["span",3]],["span",3]],[[["span",3]],["span",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],null,[[],["precclimber",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[["coderef",3],["importdependencies",3],["compilecontext",3]],["result",6]],[[["pairs",3],["hircontext",3],["rule",4]],["hirexpression",4]],[[["pair",3],["hircontext",3],["rule",4]],[["result",6],["attribute",3]]],[[["hircontext",3],["pair",3],["rule",4]],[["result",6],["hirblock",3]]],[[["hircontext",3],["pair",3],["rule",4]],[["result",6],["hirconditionalbranch",3]]],[[["hircontext",3],["pair",3],["rule",4]],[["hircontrolflow",3],["result",6]]],[[["hircontext",3],["pair",3],["rule",4]],[["hirexpression",4],["result",6]]],[[["hircontext",3],["pair",3],["rule",4]],[["hirexpression",4],["result",6]]],[[["hircontext",3],["pair",3],["rule",4]],[["hirfunctioncall",3],["result",6]]],[[["vec",3],["pair",3],["rule",4],["hircontext",3],["attribute",3]],[["hirfunction",3],["result",6]]],[[["pairs",3],["hircontext",3],["rule",4]],[["identifierpath",3],["result",6]]],[[["hircontext",3],["pair",3],["rule",4]],["hirimport",3]],[[["hircontext",3],["pair",3],["rule",4]],[["result",6],["hirinfiniteloop",3]]],[[["hircontext",3],["pair",3],["rule",4]],[["hiritem",4],["result",6]]],[[["vec",3],["pair",3],["rule",4],["hircontext",3],["attribute",3]],[["result",6],["hirmodule",3]]],[[["vec",3],["pair",3],["rule",4],["hircontext",3],["attribute",3]],[["result",6],["hirobject",4]]],[[["hircontext",3],["pair",3],["rule",4]],[["result",6],["hirobject",4]]],[[["usize",15],["pair",3],["rule",4]],["hirinfix",3]],[[["pair",3],["hircontext",3],["rule",4]],[["result",6],["vec",3]]],[[["pair",3],["hircontext",3],["rule",4]],[["result",6],["hirvariablepattern",4]]],[[["pair",3],["hircontext",3],["rule",4]],[["result",6],["hirpropertydeclaration",3]]],[[["hircontext",3],["pair",3],["rule",4]],[["hirstatement",4],["result",6]]],[[["vec",3],["pair",3],["rule",4],["hircontext",3],["attribute",3]],[["hirstruct",3],["result",6]]],[[["hircontext",3],["pair",3],["rule",4]],[["hirstructinitialization",3],["result",6]]],[[["hircontext",3],["pair",3],["rule",4]],[["result",6],["hirtupleinitialization",3]]],[[["pair",3],["hircontext",3],["rule",4]],[["result",6],["hirtypepattern",4]]],[[["pair",3],["hircontext",3],["rule",4]],["hirprefix",3]],[[["hircontext",3],["pair",3],["rule",4]],[["hirexpression",4],["result",6]]],[[]],[[]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hirconstvalue",4]],[[],["hirformatstringmember",4]],[[],["hircomparisonoperator",4]],[[],["hirinfixoperator",4]],[[],["hirinfix",3]],[[],["hirprefixoperator",4]],[[],["hirprefix",3]],[[],["hircontrolkind",4]],[[],["hirparameterdeclaration",3]],[[],["hirdeclarationmode",4]],[[],["hirtypepattern",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["hirconstvalue",4]],["bool",15]],[[["hirformatstringmember",4]],["bool",15]],[[["hircomparisonoperator",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirprefixoperator",4]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hircontrolkind",4]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirdeclarationmode",4]],["bool",15]],[[["hirvariablepattern",4]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirstructinitialization",3]],["bool",15]],[[["hirtupleinitialization",3]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hiritem",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ident",4]],[[],["specialident",4]],[[],["specialident",4]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["span",3]],null,[[["hirconstvalue",4]],["bool",15]],[[["hirformatstringmember",4]],["bool",15]],[[["hirinfixoperator",4]],["bool",15]],[[["hirinfix",3]],["bool",15]],[[["hirprefix",3]],["bool",15]],[[["hirimport",3]],["bool",15]],[[["hircontrolflow",3]],["bool",15]],[[["hirinfiniteloop",3]],["bool",15]],[[["hirparameterdeclaration",3]],["bool",15]],[[["hirvariablepattern",4]],["bool",15]],[[["hirvariableinitialization",3]],["bool",15]],[[["hirvariableupdate",3]],["bool",15]],[[["hirpropertydeclaration",3]],["bool",15]],[[["hirfunctioncall",3]],["bool",15]],[[["hirconditionalbranch",3]],["bool",15]],[[["hirstructinitialization",3]],["bool",15]],[[["hirtupleinitialization",3]],["bool",15]],[[["hirexpression",4]],["bool",15]],[[["hirstatement",4]],["bool",15]],[[["hirtypepattern",4]],["bool",15]],[[["hirblock",3]],["bool",15]],[[["attribute",3]],["bool",15]],[[["hirfunction",3]],["bool",15]],[[["hirstruct",3]],["bool",15]],[[["hirmodule",3]],["bool",15]],[[["hirobject",4]],["bool",15]],[[["hiritem",4]],["bool",15]],null,null,null,null,null,null,null,null,null,null,null,[[],["span",3]],null,[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],[[],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["spannedidentifier",3]],[[],["identifierpath",3]],[[]],[[]],[[["compilecontext",3]],["string",3]],[[["spannedidentifier",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["span",3]]],[[]],[[["spannedidentifier",3]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["spannedidentifier",3]],[[["spannedidentifier",3]],["bool",15]],[[["identifierpath",3]],["bool",15]],[[["span",3]]],[[["vec",3],["spannedidentifier",3]]],[[],[["spannedidentifier",3],["option",4]]],[[],["span",3]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["formattedtext",3]],[[],["jsonformatcomponent",4]],[[]],[[]],null,[[["formattedtext",3]],["bool",15]],[[["jsonformatcomponent",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["vec",3],["jsonformatcomponent",4]]],[[]],[[]],[[]],[[]],[[["formattedtext",3]],["bool",15]],[[["jsonformatcomponent",4]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],[["result",6],["objectref",3]]],null,[[],["contextid",3]],null,[[["node",4]]],[[]],[[["mirvalue",4]],["objectref",3]],[[["itemid",3]],[["objectref",3],["option",4]]],[[["mirvalue",4]],[["objectref",3],["option",4]]],[[]],null,null,[[["llirfunctions",3],["namespacearena",3],["mircontextmap",3],["mircontext",3]]],null,[[["itemid",3],["objectref",3]]],[[["itemid",3],["objectref",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["mirbranchif",3]]],[[["mircall",3]]],[[["contextid",3]],["result",6]],[[["mirgotocontext",3]]],[[["mirjumplocation",3]]],[[["mirreturnvalue",3]]],[[["mirupdatevalue",3]]],null,[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[]],[[["mirvalue",4],["mircontextmap",3],["namespacearena",3]],[["objectref",3],["option",4]]],[[]],null,[[["namespacearena",3],["objectref",3],["itemid",3],["mircontextmap",3]]],[[["namespacearena",3],["objectref",3],["itemid",3],["mircontextmap",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[["blockid",3],["llirfunction",3]]],[[],["blockid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["llirfunctions",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["mircontextmap",3],["namespacearena",3]],[["result",6],["llir",3]]],null,null,null,[[["blockid",3]],[["option",4],["llirfunction",3]]],[[],[["fxhashmap",6],["blockid",3],["usize",15]]],[[]],[[]],[[]],[[["config",3]],["llir",3]],[[],["bool",15]],null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockid",3]],["bool",15]],[[],["faststore",3]],[[],["faststorefromresult",3]],[[],["binaryoperation",3]],[[],["call",3]],[[],["condition",4]],[[],["branch",3]],[[],["executerawcomponent",4]],[[],["executeraw",3]],[[],["writemessage",3]],[[],["writetarget",4]],[[],["node",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["faststore",3]],["bool",15]],[[["faststorefromresult",3]],["bool",15]],[[["binaryoperation",3]],["bool",15]],[[["call",3]],["bool",15]],[[["condition",4]],["bool",15]],[[["branch",3]],["bool",15]],[[["executerawcomponent",4]],["bool",15]],[[["executeraw",3]],["bool",15]],[[["writemessage",3]],["bool",15]],[[["writetarget",4]],["bool",15]],[[["node",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],null,null,null,null,null,[[["bool",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,null,[[["faststore",3]],["bool",15]],[[["faststorefromresult",3]],["bool",15]],[[["binaryoperation",3]],["bool",15]],[[["call",3]],["bool",15]],[[["condition",4]],["bool",15]],[[["branch",3]],["bool",15]],[[["executerawcomponent",4]],["bool",15]],[[["executeraw",3]],["bool",15]],[[["writemessage",3]],["bool",15]],[[["node",4]],["bool",15]],null,[[]],null,[[],["condition",4]],null,null,[[["itemid",3]],["bool",15]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["itemid",3]],["bool",15]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["infiniteloopdetector",3]],[[["fxhashmap",6],["blockid",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["fxhashmap",6]]],[[]],null,[[["fxhashmap",6]],[["nonzerou32",3],["graphmatrix",3]]],[[["blockid",3]],["bool",15]],[[]],[[]],[[]],null,[[["blockid",3],["i32",15]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["fxhashmap",6]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["functionparameter",4]],[[]],[[]],[[],["functionparameters",3]],[[["itemid",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["itemid",3]],["bool",15]],[[],["bool",15]],null,[[["blockid",3],["itemid",3]]],[[["blockid",3],["itemid",3]]],[[["blockid",3],["itemid",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["node",4]]],null,[[["commands",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,null,[[]],[[],["redundancyoptimizer",3]],[[],["redundantcopyoptimizer",3]],[[],["constoptimizer",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["blockid",3]],["usize",15]],[[["blockid",3]],["function",3]],[[["blockid",3]],["function",3]],[[["itemid",3]],["variableusage",3]],[[["itemid",3]],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["itemid",3]],["bool",15]],[[]],[[]],[[]],null,null,[[["globaloptimizer",3],["codestats",3],["optimizecommanddeque",3]]],[[["blockid",3],["llirfunction",3],["runtime",3],["fxhashmap",6],["config",3]]],[[["optimizecommandkind",4]]],[[]],[[["callgraph",3]]],[[["commands",3]]],[[]],[[["commands",3]]],[[["commands",3]]],[[["commands",3]]],[[["commands",3]]],[[["commands",3]]],null,null,[[],["option",4]],[[]],[[["node",4]]],[[]],[[],[["fxhashmap",6],["blockid",3],["function",3]]],[[],["bool",15]],null,[[["i8",15]]],[[]],[[]],[[["commands",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["fxhashmap",6],["runtime",3]]],[[["blockid",3],["node",4],["option",4]]],null,null,null,null,null,null,[[]],[[]],[[],["peepholeoptimizer",3]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[["node",4]],["node",4]],[[["node",4]]],[[["branch",3]],["node",4]],[[["node",4]]],[[],[["vec",3],["node",4]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["itemid",3]]],[[],["hint",4]],[[],["variableusage",3]],[[]],[[]],[[]],[[],["valuehints",3]],[[],["variableusage",3]],[[],[["i32",15],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["itemid",3]],["hint",4]],[[["scoreboardvalue",4]],[["i32",15],["option",4]]],null,[[]],[[]],[[]],null,[[]],[[]],[[["itemid",3],["hint",4]]],[[["binaryoperation",3]],[["i32",15],["option",4]]],[[["condition",4]],[["option",4],["bool",15]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["node",4]]],null,null,[[["blockid",3]]],[[]],[[]],[[["blockid",3]],["bool",15]],[[],["runtime",3]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[["blockid",3]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blockid",3]],[[],["scoreboard",4]],[[],["scoreboardvalue",4]],[[],["scoreboardoperation",4]],[[],["scoreboardcomparison",4]],[[],["itemid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockid",3]],["ordering",4]],null,[[["blockid",3]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["scoreboardoperation",4]],["bool",15]],[[["scoreboardcomparison",4]],["bool",15]],[[["itemid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["i32",15]],[[["i32",15]],["bool",15]],[[],["scoreboardcomparison",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["itemid",3],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["scoreboardcomparison",4]],[[["blockid",3]],["bool",15]],[[["scoreboard",4]],["bool",15]],[[["scoreboardvalue",4]],["bool",15]],[[["itemid",3]],["bool",15]],[[["blockid",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["memorylayout",4]],[[]],null,[[["itemid",3]],["node",4]],[[["memorylayout",4]],["bool",15]],[[["memorycounter",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["itemid",3],["vec",3]]],[[]],[[]],null,[[]],[[]],[[["objectref",3]]],[[],["usize",15]],[[["memorylayout",4]],["bool",15]],[[["memorycounter",3]],["bool",15]],[[["u32",15],["contextid",3]]],[[],["u32",15]],[[],["itemid",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[],["mircontextmap",3]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],null,[[["contextid",3]],["mircontext",3]],[[],["mircontext",3]],[[["contextid",3]],["mircontext",3]],null,null,null,null,null,null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[["mirbranchif",3]]],[[["mircall",3]]],[[["mirgotocontext",3]]],[[["mirjumplocation",3]]],[[["mirreturnvalue",3]]],[[["mirupdatevalue",3]]],null,null,null,null,null,null,[[["vec",3],["span",3],["option",4],["mirvalue",4]],["bool",15]],[[["span",3],["contextkind",4]],["contextid",3]],[[["contextkind",4],["span",3],["contextid",3]],["contextid",3]],[[["objectref",3]],["mirvalue",4]],[[],["namespacearena",3]],[[],["namespacearena",3]],[[["hirdeclarationmode",4],["span",3],["hirvariablepattern",4],["mirvalue",4]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["span",3],["contextid",3]]],[[["vec",3],["span",3],["objectref",3],["mirvalue",4],["option",4]],[["result",6],["mirvalue",4]]],null,[[["span",3]],["bool",15]],[[],["mircontext",3]],[[],["mircontextinfo",3]],[[],["mircontext",3]],null,[[],["contextid",3]],null,null,[[["contextid",3]],["option",4]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["contextid",3]],["option",4]],[[["hirtypepattern",4]],[["typepattern",4],["result",6]]],null,null,null,[[["vec",3],["span",3],["objnativefunctionsignature",3],["option",4],["mirvalue",4]],["result",6]],[[]],[[]],[[]],[[]],[[["controlflowmode",4]],["option",4]],null,null,null,[[],["namespace",3]],[[["mir",3],["coderef",3],["compilecontext",3]]],null,[[]],[[],["mircontext",3]],[[["controlflowmode",4]]],[[["mirvalue",4],["span",3]],[["result",6],["mirvalue",4]]],[[["mirnode",4]]],[[["span",3],["contextid",3]]],[[["contextid",3]]],[[["contextid",3],["usize",15],["controlflowmode",4]]],[[["span",3],["mirvalue",4],["vec",3]],[["result",6],["mirvalue",4]]],null,null,null,[[["class",3],["span",3],["itemid",3],["rc",3]],[["result",6],["mirvalue",4]]],[[["mirvalue",4],["span",3]],[["result",6],["mirvalue",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["span",3],["mirvalue",4],["contextid",3]],[["usize",15],["result",6]]],[[["hirblock",3]],[["result",6],["mirvalue",4]]],[[["hirblock",3]],[["result",6],["mirvalue",4]]],[[["hirblock",3]],[["result",6],["mirvalue",4]]],[[["hirconditionalbranch",3]],[["result",6],["mirvalue",4]]],[[["hirconstvalue",4]],[["result",6],["mirvalue",4]]],[[["hircontrolflow",3]],[["result",6],["mirvalue",4]]],[[["hirexpression",4]],[["result",6],["mirvalue",4]]],[[["hirfunction",3]],[["result",6],["mirvalue",4]]],[[["hirfunctioncall",3]],[["result",6],["mirvalue",4]]],[[["hirimport",3]],[["result",6],["mirvalue",4]]],[[["hirinfiniteloop",3]],[["result",6],["mirvalue",4]]],[[["hirmodule",3]],[["result",6],["mirvalue",4]]],[[["hirobject",4]],[["result",6],["mirvalue",4]]],[[["hirstatement",4]],[["result",6],["mirvalue",4]]],[[["hirstruct",3]],[["result",6],["mirvalue",4]]],[[["hirstructinitialization",3]],[["result",6],["mirvalue",4]]],[[["hirtupleinitialization",3]],[["result",6],["mirvalue",4]]],[[["hirvariableinitialization",3]],[["result",6],["mirvalue",4]]],[[["hirvariableupdate",3]],[["result",6],["mirvalue",4]]],null,null,null,null,null,null,null,null,null,null,[[["mirvalue",4]],["usize",15]],[[["namespacearena",3],["objectref",3]],["mirvalue",4]],[[["rc",3],["class",3]],["mirvalue",4]],[[["rc",3],["namespacearena",3],["class",3]],["mirvalue",4]],[[["span",3],["mirvalue",4],["ident",4]],["result",6]],[[["namespacearena",3],["ident",4],["span",3],["mirvalue",4]],["result",6]],[[["span",3],["mirvalue",4],["ident",4]]],[[["namespacearena",3],["ident",4],["span",3],["mirvalue",4]]],null,[[],["namespaceindex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["namespaceindex",3]],[[],["contextid",3]],[[]],[[]],[[["namespaceindex",3]],["ordering",4]],null,null,null,[[["itemid",3]]],[[["itemid",3],["span",3]]],[[],["namespacearena",3]],null,[[["u32",15]],["contextid",3]],[[["namespaceindex",3]],["bool",15]],[[["contextid",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["ident",4],["contextid",3]],[["option",4],["mirvalue",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["namespaceindex",3]]],[[]],[[["u32",15]]],[[["namespaceindex",3]],["namespace",3]],[[["usize",15]],[["option",4],["mirvalue",4]]],[[["u32",15],["namespaceindex",3]],[["option",4],["mirvalue",4]]],[[["spannedidentifier",3]],[["result",6],["mirvalue",4]]],[[["spannedidentifier",3],["namespacearena",3]],[["result",6],["mirvalue",4]]],[[["spannedidentifier",3]],["ident",4]],[[["namespaceindex",3]],["namespace",3]],[[],[["option",4],["mirvalue",4]]],[[["span",3]],["str",15]],[[],["option",4]],[[],["mirvalue",4]],[[["identifierpath",3],["namespacearena",3]],[["typepattern",4],["result",6]]],[[]],[[]],null,[[],["namespaceindex",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["namespacearena",3]],["namespace",3]],[[["namespacearena",3]],["namespace",3]],null,[[["namespaceindex",3]],["bool",15]],[[["contextid",3]],["bool",15]],[[["namespacearena",3],["contextid",3],["option",4],["span",3],["contextkind",4],["compilecontext",3]]],[[["objectref",3]]],[[],["usize",15]],null,null,[[["namespaceindex",3]],[["ordering",4],["option",4]]],[[["mirnode",4]]],[[["objmodule",3],["namespacearena",3]]],[[["option",4],["span",3],["objectref",3],["mirvalue",4],["vec",3]],["result",6]],[[["option",4],["namespacearena",3],["objectref",3],["span",3],["mirvalue",4],["vec",3]],["result",6]],[[["objmodule",3],["namespacearena",3]]],[[["u32",15],["namespaceindex",3],["namespaceentry",4]],["namespaceentry",4]],[[["namespacearena",3]],[["result",6],["accessedproperty",3]]],[[["identifierpath",3]],[["result",6],["accessedproperty",3]]],[[["identifierpath",3],["namespacearena",3]],[["result",6],["accessedproperty",3]]],null,[[["ident",4],["contextid",3]],["option",4]],null,null,null,[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["contextkind",4]],[[]],[[["compilecontext",3]],["objectref",3]],[[["contextkind",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["hircontrolkind",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["controlflowmode",4]],[[]],[[]],[[["controlflowmode",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[["hircontrolkind",4]]],[[]],[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["mircontext",3]]],[[]],[[]],[[["contextid",3]],["mircontextinfo",3]],null,[[],["mir",3]],[[["formatter",3]],["result",6]],[[]],[[["hir",3],["compilecontext",3]],[["result",6],["mir",3]]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["typepattern",4],["span",3],["option",4]],["result",6]],[[["rc",3],["option",4],["span",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rc",3]],[[],["mirvalue",4]],[[]],[[],[["objectref",3],["option",4]]],[[],["option",4]],null,null,null,[[["mircall",3]],["bool",15]],[[["mirvalue",4]],["bool",15]],[[["mirgotocontext",3]],["bool",15]],[[["mirjumplocation",3]],["bool",15]],[[["mirupdatevalue",3]],["bool",15]],[[["mirreturnvalue",3]],["bool",15]],[[["mirbranchif",3]],["bool",15]],[[["mirnode",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["objectref",3]],[[["str",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["objectref",3]]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["mirvalue",4]],["bool",15]],[[["mirgotocontext",3]],["bool",15]],[[["mirjumplocation",3]],["bool",15]],[[["mirupdatevalue",3]],["bool",15]],[[["mirreturnvalue",3]],["bool",15]],[[["mirbranchif",3]],["bool",15]],[[["mirnode",4]],["bool",15]],null,null,[[["compilecontext",3]]],null,null,null,null,[[],[["rc",3],["option",4]]],null,null,null,[[],["option",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[["mirbranchif",3]]],[[["mircall",3]]],[[["mirgotocontext",3]]],[[["mirjumplocation",3]]],[[["mirnode",4]]],[[["mirnode",4]]],[[["mirreturnvalue",3]]],[[["mirupdatevalue",3]]],null,null,null,null,null,[[["namespaceentry",4],["ident",4]],[["option",4],["u32",15]]],[[["namespaceentry",4]],["u32",15]],[[["u32",15],["namespaceentry",4]],[["option",4],["namespaceentry",4]]],[[],[["option",4],["namespaceindex",3]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["namespaceentry",4]],[[]],[[["u32",15],["span",3]]],[[["namespaceentry",4]],["bool",15]],[[["namespace",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["ident",4],["namespacearena",3]],["option",4]],[[["u32",15]],[["option",4],["namespaceentry",4]]],null,[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["namespaceiterator",3]],null,null,[[],["usize",15]],null,[[["namespaceentry",4]],["bool",15]],[[["namespace",3]],["bool",15]],[[["namespaceindex",3],["option",4],["contextid",3]]],[[],["option",4]],null,[[["u32",15],["ident",4]],[["option",4],["u32",15]]],[[["u32",15],["namespaceentry",4]],["namespaceentry",4]],[[]],[[],[["option",4],["span",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["mirvalue",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["itemid",3],["bool",15],["objbool",3]]],[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["objbool",3],["itemid",3],["scoreboardcomparison",4],["scoreboardvalue",4]]],[[["objbool",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["itemid",3]]],[[["compilecontext",3]],[["option",4],["rc",3]]],null,[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],null,[[["objbool",3]],["bool",15]],[[["itemid",3]]],[[["itemid",3],["bool",15],["objbool",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["objstaticbool",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[["objstaticbool",3]],["bool",15]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["compilecontext",3]],[["class",3],["rc",3]]],null,[[],["objclass",3]],[[]],[[]],[[["objclass",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["rc",3],["class",3]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[["objclass",3]],["bool",15]],[[["rc",3],["class",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["formatstringcomponent",4]],[[],["objformatstring",3]],[[]],[[]],null,[[["formatstringcomponent",4]],["bool",15]],[[["objformatstring",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[["formatstringcomponent",4]],["bool",15]],[[["objformatstring",3]],["bool",15]],[[["formatstringcomponent",4],["vec",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["option",4],["objfunction",3]]],[[["contextid",3]],["blockid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["contextid",3]],[["langresult",6],["objectref",3]]],null,[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["objfunction",3]],[[],["functionparameters",4]],[[],["functionflags",4]],[[],["compilerfunction",4]],[[],["functionoverload",3]],[[]],[[]],[[]],[[]],[[]],[[],["compilecontext",3]],null,[[]],[[["node",4]]],[[["objfunction",3]],["bool",15]],[[["functionparameters",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["typepattern",4],["vec",3]]],[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[["mirvalue",4]],["objectref",3]],[[["ident",4],["contextid",3]],[["objectref",3],["option",4]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],null,null,[[],["bool",15]],[[],["bool",15]],[[["functionparameters",4]],["bool",15]],[[],["memorylayout",4]],[[["functionparameters",4]],["bool",15]],[[["str",15],["compilecontext",3],["functionoverload",3],["vec",3]]],[[["class",3],["rc",3],["functionparameters",4]]],[[["debrisfunctioninterface",3],["functionsignatureref",6]]],[[["str",15],["compilecontext",3]]],[[],["objectref",3]],[[],[["option",4],["functionoverload",3]]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15],["compilecontext",3],["functionoverload",3],["vec",3],["functionflags",4]]],null,[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["objint",3]],[[]],[[["objint",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["itemid",3]]],[[["compilecontext",3]],[["option",4],["rc",3]]],null,[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],null,[[["objint",3]],["bool",15]],[[["itemid",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["scoreboardvalue",4]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["objstaticint",3]],[[]],[[["objstaticint",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u128",15]]],[[["i64",15]]],[[["i8",15]]],[[["i128",15]]],[[["i32",15]]],[[["u32",15]]],[[["isize",15]]],[[["u64",15]]],[[["i16",15]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[["objstaticint",3]],["bool",15]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],["objmodule",3]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["objmodule",3]],[[]],[[["objmodule",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[["ident",4],["namespacearena",3]],[["option",4],["mirvalue",4]]],[[],["ident",4]],null,[[],["bool",15]],null,[[]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[]],null,[[],["memorylayout",4]],[[["objmodule",3]],["bool",15]],[[["bool",15],["fn",8]]],[[]],[[["into",8],["objectref",3],["ident",4]]],[[["objfunction",3],["compilecontext",3]]],[[["str",15],["compilecontext",3]]],[[["into",8],["objectref",3],["ident",4]],[["objectref",3],["option",4]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["objectproperties",6],["ident",4]]],null,null,null,[[],[["option",4],["objfunction",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["compilecontext",3]],[["class",3],["rc",3]]],null,[[],["functionparameterdefinition",3]],[[],["objnativefunction",3]],[[],["objnativefunctionsignature",3]],[[]],[[]],[[]],null,[[["compilecontext",3]],[["class",3],["rc",3]]],null,[[["objnativefunction",3]],["bool",15]],[[["objnativefunctionsignature",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[["compilecontext",3]],[["option",4],["rc",3]]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[],["memorylayout",4]],null,null,[[["objnativefunction",3]],["bool",15]],[[["rc",3],["compilecontext",3],["cachedfunctionsignature",3],["contextid",3],["rc",3],["class",3]]],[[["typepattern",4],["span",3],["contextid",3],["usize",15]]],null,null,[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["objnever",3]],[[]],[[["objnever",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[["compilecontext",3]],["objectref",3]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["objnull",3]],[[]],[[["objnull",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[["compilecontext",3]],["objectref",3]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["objstring",3]],[[]],[[]],[[["objstring",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["rc",3],["str",15]]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[["objstring",3]],["bool",15]],[[["rc",3],["str",15]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],[["rc",3],["str",15]]],null,null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["bool",15]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[]],[[["struct",3]],["bool",15]],[[["objstruct",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],null,[[]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[],["memorylayout",4]],[[["struct",3]],["bool",15]],[[["objstruct",3]],["bool",15]],[[["structref",6]]],null,[[],["bool",15]],null,[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["objstructobject",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[["namespacearena",3]]],[[["namespacearena",3],["namespace",3],["vec",3]]],[[],["memorylayout",4]],null,[[["objstructobject",3]],["bool",15]],[[["structref",6],["namespacearena",3],["namespaceindex",3]]],null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[]],[[]],[[]],[[]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[],["bool",15]],[[["compilecontext",3]],[["class",3],["rc",3]]],[[["tuple",3]],["bool",15]],[[["objtupleobject",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["typepattern",4],["vec",3]]],[[]],[[["compilecontext",3]],[["option",4],["rc",3]]],[[]],[[]],[[["functioncontext",3]],[["langerrorkind",4],["objectref",3],["result",4]]],[[["namespacearena",3]]],null,[[["tuple",3]],["bool",15]],[[],["memorylayout",4]],null,null,[[["tuple",3]],["bool",15]],[[["objtupleobject",3]],["bool",15]],[[["tupleref",6],["namespacearena",3],["namespaceindex",3]]],[[],["bool",15]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["typepattern",4]],[[],["type",4]],[[]],[[]],[[],["bool",15]],[[["typepattern",4]],["bool",15]],[[["type",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["rc",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["rc",3],["class",3]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["class",3]],["bool",15]],[[["type",4]],["bool",15]],[[["typepattern",4]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"ObjectRef"],[4,"TypePattern"],[4,"Type"],[4,"BuildMode"],[4,"OptMode"],[3,"Namespace"],[8,"ValidPayload"],[3,"Config"],[3,"DebrisObject"],[3,"CompileContext"],[6,"LangResult"],[8,"ObjectPayload"],[4,"ClassKind"],[3,"Class"],[13,"StructObject"],[13,"TupleObject"],[13,"Function"],[3,"TypeContextRef"],[3,"TypeContext"],[4,"LangErrorKind"],[4,"CompileError"],[3,"SnippetOwned"],[3,"SourceAnnotationOwned"],[3,"SliceOwned"],[8,"AsAnnotationSnippet"],[3,"LangError"],[3,"ParseError"],[13,"UnexpectedStructInitializer"],[13,"NonComptimeVariable"],[13,"ComptimeVariable"],[13,"UnexpectedType"],[13,"MissingModule"],[13,"UnexpectedOverload"],[13,"ExpectedBoolean"],[13,"UnexpectedPattern"],[13,"UnpromotableType"],[13,"UnexpectedOperator"],[13,"TupleMismatch"],[13,"MissingStructInitializer"],[13,"InvalidControlFlow"],[13,"CircularImport"],[13,"NotYetImplemented"],[13,"VariableAlreadyDefined"],[13,"MissingVariable"],[13,"MissingProperty"],[13,"ConstVariable"],[3,"LangErrorSnippet"],[3,"AnnotationOwned"],[3,"DebrisFunctionInterface"],[8,"NormalizedFunctionInterface"],[8,"ValidReturnType"],[8,"ToFunctionInterface"],[4,"Rule"],[3,"DebrisParser"],[3,"Hir"],[3,"ImportDependencies"],[3,"HirFile"],[3,"HirContext"],[3,"IdentifierPath"],[3,"SpannedIdentifier"],[3,"PREC_CLIMBER"],[4,"HirInfixOperator"],[4,"HirExpression"],[4,"HirStatement"],[4,"HirConstValue"],[4,"HirControlKind"],[4,"HirDeclarationMode"],[4,"HirComparisonOperator"],[4,"HirTypePattern"],[4,"HirObject"],[4,"HirVariablePattern"],[4,"HirPrefixOperator"],[4,"HirItem"],[4,"HirFormatStringMember"],[3,"HirVariableUpdate"],[3,"HirFunctionCall"],[3,"HirStructInitialization"],[3,"Attribute"],[3,"HirFunction"],[3,"HirStruct"],[3,"HirModule"],[3,"HirInfiniteLoop"],[3,"HirConditionalBranch"],[3,"HirInfix"],[3,"HirPrefix"],[3,"HirImport"],[3,"HirControlFlow"],[3,"HirParameterDeclaration"],[3,"HirVariableInitialization"],[3,"HirPropertyDeclaration"],[3,"HirTupleInitialization"],[3,"HirBlock"],[13,"Integer"],[13,"Bool"],[13,"Fixed"],[13,"String"],[13,"FormatString"],[13,"BinaryOperation"],[13,"UnaryOperation"],[13,"Function"],[13,"Tuple"],[3,"LlirContext"],[3,"Llir"],[3,"CallGraph"],[3,"Runtime"],[4,"JsonFormatComponent"],[3,"FormattedText"],[3,"LlirBuilder"],[3,"LlirFunctions"],[3,"LlirFunction"],[3,"ExecuteRaw"],[4,"WriteTarget"],[4,"Condition"],[4,"Node"],[4,"VariableAccess"],[4,"VariableAccessMut"],[4,"ExecuteRawComponent"],[3,"Function"],[3,"FastStore"],[3,"FastStoreFromResult"],[3,"BinaryOperation"],[3,"Call"],[3,"Branch"],[3,"WriteMessage"],[13,"Compare"],[3,"InfiniteLoopDetector"],[4,"FunctionParameter"],[3,"FunctionParameters"],[3,"OptimizeCommandDeque"],[4,"OptimizeCommandKind"],[3,"CodeStats"],[3,"RedundancyOptimizer"],[3,"Commands"],[3,"GlobalOptimizer"],[3,"OptimizeCommand"],[3,"RedundantCopyOptimizer"],[3,"ConstOptimizer"],[8,"Optimizer"],[13,"UpdateBranch"],[3,"PeepholeOptimizer"],[4,"Hint"],[3,"VariableUsage"],[3,"ValueHints"],[3,"BlockId"],[4,"Scoreboard"],[4,"ScoreboardOperation"],[4,"ScoreboardComparison"],[4,"ScoreboardValue"],[3,"ItemId"],[4,"MemoryLayout"],[3,"MemoryCounter"],[3,"NamespaceIndex"],[3,"ContextId"],[4,"ContextKind"],[4,"MirNode"],[4,"ControlFlowMode"],[4,"MirValue"],[8,"MirVisitor"],[3,"MirContextInfo"],[3,"MirGotoContext"],[3,"CachedFunctionSignature"],[3,"MirContextMap"],[3,"MirContext"],[3,"MirBuilder"],[3,"MirBranchIf"],[3,"MirReturnValue"],[3,"Mir"],[3,"ReturnValues"],[3,"MirCall"],[3,"MirUpdateValue"],[3,"MirJumpLocation"],[3,"NamespaceArena"],[13,"Template"],[3,"ContextStack"],[3,"AccessedProperty"],[4,"NamespaceEntry"],[3,"NamespaceIterator"],[13,"Variable"],[3,"ObjBool"],[3,"ObjStaticBool"],[3,"ObjClass"],[8,"HasClass"],[4,"FormatStringComponent"],[3,"ObjFormatString"],[4,"FunctionParameters"],[4,"FunctionFlags"],[4,"CompilerFunction"],[3,"ObjFunction"],[3,"FunctionContext"],[3,"FunctionSignature"],[3,"FunctionOverload"],[3,"ObjInt"],[3,"ObjStaticInt"],[3,"ModuleFactory"],[3,"ObjModule"],[3,"ObjNativeFunction"],[3,"FunctionParameterDefinition"],[3,"ObjNativeFunctionSignature"],[3,"ObjNever"],[3,"ObjNull"],[3,"ObjString"],[3,"Struct"],[3,"ObjStruct"],[3,"ObjStructObject"],[3,"Tuple"],[3,"ObjTupleObject"]]},\
"debris_derive":{"doc":"","t":[0,23,0,6,3,4,3,13,13,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,5,5,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,5],"n":["object","object","utils","Groups","MacroConfig","MethodIdent","MethodMetadata","Normal","Special","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","creat_trait_impl","eq","fmt","fmt","fmt","fmt","from","from","from","from_args","from_method","function_name","group_methods","handle_object","hash","into","into","into","method","method_ident","ne","prefix","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","typ","type_id","type_id","type_id","camelcase"],"q":["debris_derive","","","debris_derive::object","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","debris_derive::utils"],"d":["","Handles an impl block containing methods for debris …","","","Various parameters for this macro","A identifier for a debris method","Contains all neccessary metadata for a debris method","","","","","","","","","","","Creates the <code>class</code> method which contains all the methods …","","","","","","","","","","Returns metadata for this method or None if this is not a …","The ident for the implementing function","Groups different methods by their identifier","","","","","","The method","The ident for the debris object","","The prefix used to rename methods","","","","","","","","","","","","","Naive function that converts a snake_case string to a …"],"i":[0,0,0,0,0,0,0,1,1,1,2,3,1,2,3,1,1,0,1,1,1,2,3,1,2,3,3,2,2,0,0,1,1,2,3,2,2,1,1,1,1,1,2,3,1,2,3,3,1,2,3,0],"f":[null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["methodident",4]],[[]],[[["hashmap",3],["methodident",4],["macroconfig",3],["vec",3],["type",4]],["tokenstream",3]],[[["methodident",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["attributeargs",6]],["result",6]],[[["methodident",4],["implitemmethod",3]]],null,[[["itemimpl",3]],[["hashmap",3],["result",6]]],[[["attributeargs",6],["itemimpl",3]],[["result",6],["tokenstream",3]]],[[]],[[]],[[]],[[]],null,null,[[["methodident",4]],["bool",15]],[[],["str",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["str",15]],["string",3]]],"p":[[4,"MethodIdent"],[3,"MethodMetadata"],[3,"MacroConfig"]]},\
"debris_lang":{"doc":"The Debris compiler.","t":[5,5,5],"n":["debug_run","init","main"],"q":["debris_lang","",""],"d":["Compiles the file <code>test.txt</code> into llir","",""],"i":[0,0,0],"f":[[[["compileconfig",3]],[["result",6],["llir",3]]],[[],["compileconfig",3]],[[]]],"p":[]},\
"debris_std":{"doc":"The standard library implementation for the debris …","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["bool_to_int","execute_format_string","execute_string","int_to_int","load","print_format_string","print_int","print_int_static","print_string","register_primitives","register_ticking_function","signature_for","static_bool_to_int","static_int_to_int"],"q":["debris_std","","","","","","","","","","","","",""],"d":["","","Executes a string as a command and returns the result","","Loads the standard library module","","","","","Registers all primitive types","Empty stub, the function in implemented in the compiler","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[["functioncontext",3],["objbool",3]],["objint",3]],[[["functioncontext",3],["objformatstring",3]],["objint",3]],[[["functioncontext",3],["objstring",3]],["objint",3]],[[["objint",3]],["objint",3]],[[["compilecontext",3]],["objmodule",3]],[[["functioncontext",3],["objformatstring",3]]],[[["functioncontext",3],["objint",3]]],[[["functioncontext",3],["objstaticint",3]]],[[["functioncontext",3],["objstring",3]]],[[["compilecontext",3],["objmodule",3]]],[[]],[[["compilecontext",3]],["functionoverload",3]],[[["functioncontext",3],["objstaticbool",3]],["objint",3]],[[["functioncontext",3],["objstaticint",3]],["objint",3]]],"p":[]},\
"vfs":{"doc":"Virstual in-memory file system. might switch to a more …","t":[3,13,3,13,4,11,11,11,11,11,11,12,11,11,11,11,12,14,14,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Directory","Directoy","File","File","FsElement","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contents","default","default","dir","dir","directories","directories","directories_inner","eq","eq","eq","file","file","files","fmt","fmt","fmt","from","from","from","into","into","into","ne","ne","ne","new","new","persist","persist","persist","push_string","resolve_path","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_contents","with_data"],"q":["vfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Creates a new directory with this name or returns an …","","Custom macro to easily generate predefined file structures…","","","","","","returns a new file with this name or returns an existing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,1,0,1,2,3,1,2,3,2,2,3,1,3,3,0,0,1,2,3,1,3,3,1,2,3,1,2,3,1,2,3,1,2,3,2,3,1,2,3,2,3,1,2,3,1,2,3,1,2,3,3,2],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["file",3]],[[],["directory",3]],[[],[["directory",3],["option",4]]],[[["string",3]],["directory",3]],null,null,null,[[["fselement",4]],["bool",15]],[[["file",3]],["bool",15]],[[["directory",3]],["bool",15]],[[],[["file",3],["option",4]]],[[["string",3]],["file",3]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fselement",4]],["bool",15]],[[["file",3]],["bool",15]],[[["directory",3]],["bool",15]],[[]],[[]],[[["path",3],["str",15]],["result",6]],[[["path",3],["str",15]],["result",6]],[[["path",3],["str",15]],["result",6]],[[["str",15]]],[[],[["fselement",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["string",3],["fxhashmap",6],["directory",3],["file",3],["fxhashmap",6]]],[[["string",3]]]],"p":[[4,"FsElement"],[3,"File"],[3,"Directory"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};